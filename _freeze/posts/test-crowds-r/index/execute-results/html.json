{
  "hash": "ec620ea4d3b56d5dedd25aa41972b6e0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Crowds\"\nauthor: \"[Jason Foster](mailto:jason.j.foster@gmail.com)\"\ndate: last-modified\ncategories:\n  - analysis\n  - finance\n  - r\ndraft: true\neditor: \n  mode: source\n---\n\n::: {.cell}\n\n:::\n\n\n# Preprocessing\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(zoo)\nload(\"../crowds-r/score_df.rda\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn_ahead <- 20 * 3\nwidth <- 20 * 3\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncols <- c(\"date\", \"quantile\")\n\nweight_df <- reshape(score_df[ , c(cols, \"weight\")], timevar = \"quantile\",\n                     idvar = \"date\", direction = \"wide\")\n\nperformance_df <- reshape(score_df[ , c(cols, \"performance\")], timevar = \"quantile\",\n                          idvar = \"date\", direction = \"wide\")\n\nx_df <- merge(weight_df, performance_df, by = \"date\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx_xts <- zoo(x_df[ , -1], x_df[ , 1])\ny_xts <- lag(x_xts[ , \"weight.Q1\"], k = n_ahead, na.pad = TRUE)\ntrain_xts <- merge(y_xts, x_xts)\n```\n:::\n\n\n# Standardization\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(roll)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nscore_xts <- roll_scale(train_xts, nrow(train_xts), min_obs = 1)\nscore_idx <- complete.cases(y_xts) & complete.cases(score_xts)\ncov_xts <- roll_cov(score_xts, width = nrow(score_xts), min_obs = 1)\ncov_idx <- apply(cov_xts, 3, function(i) all(!is.na(i)))\n```\n:::\n\n\n# Distance\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_idx <- which(score_idx & cov_idx)\ntarget_z_xts <- tail(score_xts[ , -1], length(train_idx))\ntarget_x_xts <- tail(x_xts, length(train_idx))\nscore_xts <- score_xts[train_idx, -1]\ncov_xts <- cov_xts[-1, -1, train_idx]\n```\n:::\n\n\n# Prediction\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(CVXR)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmin_rss_optim <- function(x, y) {\n  \n    x <- as.matrix(x)\n    y <- as.numeric(y)\n\n    params <- Variable(ncol(x))\n\n    obj <- Minimize(sum_squares(y - x %*% params))\n\n    cons <- list(sum(params) == 1, params >= 0, params <= 1)\n\n    prob <- Problem(obj, cons)\n\n    result <- solve(prob)$getValue(params)\n\n    return(result)\n\n}\n```\n:::\n\n\n# Backtest\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_z <- length(train_idx)\npredict_ls <- list()\n\nfor (z in 1:n_z) {\n  \n  # distance\n  target_z <- coredata(target_z_xts[z, ])\n  dist_ls <- list()\n  \n  for (i in 1:z) {\n    \n    x_i <- coredata(score_xts[i, ])\n    sigma <- cov_xts[, , i]\n  \n    dist <- tryCatch({\n      sqrt((x_i - target_z) %*% solve(sigma) %*% t(x_i - target_z))\n    }, error = function(e) {\n      NA\n    })\n  \n    dist_ls <- append(dist_ls, list(dist))\n    \n  }\n  \n  dist <- do.call(rbind, dist_ls)\n  \n  dist_idx <- dist <= quantile(dist, 0.05, na.rm = TRUE)\n  test_idx <- dist_idx\n  x_test <- x_xts[train_idx][test_idx]\n  \n  # similarity\n  n_x <- nrow(x_test)\n  sign_ls <- list()\n  target_x <- coredata(target_x_xts[z, ])\n  \n  if (n_x > 0) {\n    for (i in 1:n_x) {\n    \n      x_i <- coredata(x_test[i, ])\n    \n      sign <- tryCatch({\n        sum(sign(x_i) == sign(target_x), na.rm = TRUE)\n      }, error = function(e) {\n        NA\n      })\n    \n      sign_ls <- append(sign_ls, list(sign))\n  \n    }    \n  }\n\n  sign <- do.call(rbind, sign_ls)\n  \n  sign_idx <- sign == ncol(score_xts)\n  \n  # prediction\n  if (sum(sign_idx) > 0) {\n    \n    x_subset <- x_test[sign_idx]\n    y_subset <- y_xts[train_idx][test_idx][sign_idx]\n    \n    weights <- min_rss_optim(x_subset, y_subset)\n    predict <- target_x %*% weights # sum(target_x * weights)\n  \n  } else {\n    \n    predict <- NA\n    \n  }\n  \n  predict_ls <- append(predict_ls, list(predict))\n\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npredict <- do.call(rbind, predict_ls)\npredict_xts <- zoo(predict, index(target_x_xts))\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=576}\n:::\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}