{
  "hash": "796017d835aa35d30b46039213005685",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Crowds\"\nauthor: \"[Jason Foster](mailto:jason.j.foster@gmail.com)\"\ndate: last-modified\ncategories:\n  - analysis\n  - finance\n  - r\ndraft: true\neditor: \n  mode: source\n---\n\n\n# Preprocessing\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(zoo)\nload(\"../crowds-r/score_df.rda\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn_ahead <- 20 * 3\nwidth <- 20 * 3\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncols <- c(\"date\", \"quantile\")\n\nweight_df <- reshape(score_df[ , c(cols, \"weight\")], timevar = \"quantile\",\n                     idvar = \"date\", direction = \"wide\")\n\nperformance_df <- reshape(score_df[ , c(cols, \"performance\")], timevar = \"quantile\",\n                          idvar = \"date\", direction = \"wide\")\n\nx_df <- merge(weight_df, performance_df, by = \"date\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx_xts <- zoo(x_df[ , -1], x_df[ , 1])\ny_xts <- lag(x_xts[ , \"weight.Q1\"], k = n_ahead, na.pad = TRUE)\ntrain_xts <- merge(y_xts, x_xts)\n```\n:::\n\n\n# Normalization\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(roll)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nscore_xts <- roll_scale(train_xts, nrow(train_xts), min_obs = 1)\nscore_idx <- complete.cases(y_xts) & complete.cases(score_xts)\ncov_xts <- roll_cov(score_xts, width = nrow(score_xts), min_obs = 1)\ncov_idx <- apply(cov_xts, 3, function(i) all(!is.na(i)))\n```\n:::\n\n\n# Distance\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntarget <- coredata(tail(score_xts[ , -1], 1))\ntrain_idx <- score_idx & cov_idx\nscore_xts <- score_xts[train_idx, -1]\ncov_xts <- cov_xts[-1, -1, train_idx]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn_rows <- nrow(score_xts)\ndist_ls <- list()\n\nfor (i in 1:n_rows) {\n\n  x_i <- coredata(score_xts[i, ])\n  sigma <- cov_xts[, , i]\n\n  dist <- tryCatch({\n    sqrt((x_i - target) %*% solve(sigma) %*% t(x_i - target))\n  }, error = function(e) {\n    NA\n  })\n\n  dist_ls <- append(dist_ls, list(dist))\n\n}\n\ndist <- do.call(rbind, dist_ls)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndist_idx <- dist <= quantile(dist, 0.05, na.rm = TRUE)\ntest_idx <- dist_idx\nx_test <- x_xts[train_idx][test_idx]\n```\n:::\n\n\n# Similarity\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_rows <- nrow(x_test)\nsign_ls <- list()\ntarget <- coredata(tail(x_xts, 1))\n\nfor (i in 1:n_rows) {\n  \n  x_i <- coredata(x_test[i, ])\n\n  sign <- tryCatch({\n    sum(sign(x_i) == sign(target), na.rm = TRUE)\n  }, error = function(e) {\n    NA\n  })\n\n  sign_ls <- append(sign_ls, list(sign))\n\n}\n\nsign <- do.call(rbind, sign_ls)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsign_idx <- sign == ncol(score_xts)\n```\n:::\n\n\n# Prediction\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(CVXR)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmin_rss_optim <- function(x, y) {\n  \n    x <- as.matrix(x)\n    y <- as.numeric(y)\n\n    params <- Variable(ncol(x))\n\n    obj <- Minimize(sum_squares(y - x %*% params))\n\n    cons <- list(sum(params) == 1, params >= 0, params <= 1)\n\n    prob <- Problem(obj, cons)\n\n    result <- solve(prob)$getValue(params)\n\n    return(result)\n\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx_subset <- x_test[sign_idx]\ny_subset <- y_xts[train_idx][test_idx][sign_idx]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nweights <- min_rss_optim(x_subset, y_subset)\npredict <- target %*% weights\nprint(predict)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          [,1]\n[1,] 0.5337411\n```\n\n\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}