{
  "hash": "4e6e821ca5082d0ea063049ef25df816",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Statistics\"\nauthor: \"[Jason Foster](mailto:jason.j.foster@gmail.com)\"\ndate: last-modified\ncategories:\n  - algorithms\n  - r\ndefault-image-extension: \"\"\n---\n\n\n<!---# https://github.com/quarto-dev/quarto-cli/issues/6092 -->\n\n[![](https://github.com/jasonjfoster/roll/workflows/R-CMD-check/badge.svg)](https://github.com/jasonjfoster/roll/actions) [![](https://www.r-pkg.org/badges/version/roll)](https://cran.r-project.org/package=roll) [![](https://codecov.io/gh/jasonjfoster/roll/graph/badge.svg)](https://codecov.io/github/jasonjfoster/roll) [![](https://cranlogs.r-pkg.org/badges/last-day/roll?color=brightgreen)](https://cranlogs.r-pkg.org/badges/last-day/roll) [![](https://cranlogs.r-pkg.org/badges/last-week/roll?color=brightgreen)](https://cranlogs.r-pkg.org/badges/last-week/roll) [![](https://cranlogs.r-pkg.org/badges/roll?color=brightgreen)](https://cranlogs.r-pkg.org/badges/roll) [![](https://cranlogs.r-pkg.org/badges/grand-total/roll?color=brightgreen)](https://cranlogs.r-pkg.org/badges/grand-total/roll)\n\n# Usage\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(roll)\nlibrary(microbenchmark)\noptions(microbenchmark.unit = \"us\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn_vars <- 10\nn_obs <- 1000\nweights <- 0.9 ^ (n_obs:1)\n\nx <- matrix(rnorm(n_obs * n_vars), nrow = n_obs, ncol = n_vars)\ny <- matrix(rnorm(n_obs), nrow = n_obs, ncol = 1)\nx_lgl <- x < 0\n```\n:::\n\n\n# Rolling any\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_any(x_lgl, width = 125, min_obs = 1),\n                         \"250\" = roll_any(x_lgl, width = 250, min_obs = 1),\n                         \"500\" = roll_any(x_lgl, width = 500, min_obs = 1),\n                         \"1000\" = roll_any(x_lgl, width = 1000, min_obs = 1))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr     min       lq     mean  median       uq      max neval\n  125  98.201 122.1515 139.9180 136.201 150.0505  373.101   100\n  250 105.101 119.6010 158.3641 139.301 152.1015 1242.401   100\n  500 107.401 123.9505 138.8359 138.251 149.4505  225.200   100\n 1000 106.802 120.9010 138.8949 131.751 146.4010  479.001   100\n```\n\n\n:::\n:::\n\n\n# Rolling all\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_all(x_lgl, width = 125, min_obs = 1),\n                         \"250\" = roll_all(x_lgl, width = 250, min_obs = 1),\n                         \"500\" = roll_all(x_lgl, width = 500, min_obs = 1),\n                         \"1000\" = roll_all(x_lgl, width = 1000, min_obs = 1))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr     min       lq     mean   median       uq     max neval\n  125  91.201 124.5505 146.6150 136.7010 164.9510 273.301   100\n  250  92.600 121.7505 142.8420 127.7510 146.8005 285.701   100\n  500 109.101 123.3510 149.7669 135.6005 168.7510 344.201   100\n 1000  93.400 118.6515 134.1449 127.9005 138.9015 220.600   100\n```\n\n\n:::\n:::\n\n\n# Rolling sums\n\n$$\n\\begin{aligned}\n&\\text{Expanding window} \\\\\n&\\bullet\\text{sum}_{x}\\leftarrow\\lambda\\times\\text{sum}_{x}+\\text{w}_{new}\\times\\text{x}_{new}\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{sum}_{x}\\leftarrow\\lambda\\times\\text{sum}_{x}+\\text{w}_{new}\\times\\text{x}_{new}-\\lambda\\times\\text{w}_{old}\\times\\text{x}_{old}\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_sum(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_sum(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_sum(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_sum(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr    min       lq     mean   median       uq     max neval\n  125 96.501 114.3510 126.9259 118.8510 128.6510 221.200   100\n  250 94.701 113.1015 124.3450 118.5510 129.9510 214.501   100\n  500 94.102 113.3515 124.2220 116.9510 125.3510 414.301   100\n 1000 94.501 111.3505 120.9260 116.6015 124.9515 204.301   100\n```\n\n\n:::\n:::\n\n\n# Rolling products\n\n$$\n\\begin{aligned}\n&\\text{Expanding window}\\\\\n&\\bullet\\text{prod}_{w}\\leftarrow\\text{prod}_{w}\\times\\text{w}_{new}\\\\\n&\\bullet\\text{prod}_{x}\\leftarrow\\text{prod}_{x}\\times\\text{x}_{new}\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{prod}_{x}\\leftarrow\\text{prod}_{x}\\times\\text{x}_{new}/\\text{x}_{old}\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_prod(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_prod(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_prod(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_prod(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr     min       lq    mean   median       uq     max neval\n  125 218.001 231.9010 245.318 241.4010 251.7510 362.201   100\n  250 219.401 230.6510 245.977 242.4015 251.5005 332.901   100\n  500 153.801 164.8005 188.324 179.0005 188.7020 544.201   100\n 1000 148.501 158.6015 172.078 166.2515 175.5015 288.101   100\n```\n\n\n:::\n:::\n\n\n# Rolling means\n\n$$\n\\begin{aligned}\n&\\text{Expanding window}\\\\\n&\\bullet\\text{sum}_{w}\\leftarrow\\text{sum}_{w}+\\text{w}_{new}\\\\\n&\\bullet\\text{sum}_{x}\\leftarrow\\lambda\\times\\text{sum}_{x}+\\text{w}_{new}\\times\\text{x}_{new}\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{sum}_{x}\\leftarrow\\lambda\\times\\text{sum}_{x}+\\text{w}_{new}\\times\\text{x}_{new}-\\lambda\\times\\text{w}_{old}\\times \\text{x}_{old}\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_mean(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_mean(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_mean(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_mean(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr     min       lq     mean   median       uq     max neval\n  125 105.801 123.6010 138.2619 130.3510 143.2515 231.701   100\n  250  98.001 121.5515 136.5119 129.8015 141.0515 418.700   100\n  500  98.201 122.0010 132.5300 128.2510 137.8515 227.702   100\n 1000  97.501 119.7510 130.1030 126.5505 137.8510 202.401   100\n```\n\n\n:::\n:::\n\n\n# Rolling minimums\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_min(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_min(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_min(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_min(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr     min      lq     mean   median       uq     max neval\n  125 105.401 127.501 149.1831 144.5505 160.3500 284.402   100\n  250 106.202 124.251 149.1890 139.2505 161.5515 448.002   100\n  500 107.800 125.551 155.8220 140.7510 170.1500 452.201   100\n 1000 109.601 128.001 153.7790 144.1010 165.3510 374.300   100\n```\n\n\n:::\n:::\n\n\n# Rolling maximums\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_max(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_max(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_max(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_max(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr     min       lq     mean   median       uq     max neval\n  125 109.602 125.3010 141.4180 140.3010 148.5010 214.201   100\n  250 110.801 125.4015 139.1001 137.5015 149.0515 196.901   100\n  500 106.501 126.7510 145.3689 140.9505 159.3015 269.101   100\n 1000 116.301 134.7510 150.8900 146.1510 156.8010 371.101   100\n```\n\n\n:::\n:::\n\n\n# Rolling index of minimums\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_idxmin(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_idxmin(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_idxmin(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_idxmin(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr     min       lq     mean   median       uq     max neval\n  125 105.100 115.7510 132.1330 123.5015 133.9510 295.600   100\n  250 104.101 116.5010 131.0720 120.6010 129.5005 291.401   100\n  500 105.402 117.6515 140.7409 122.9510 134.3505 378.101   100\n 1000 106.401 120.0515 135.5550 126.2510 138.9020 257.901   100\n```\n\n\n:::\n:::\n\n\n# Rolling index of maximums\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_idxmax(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_idxmax(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_idxmax(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_idxmax(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr     min       lq     mean   median       uq     max neval\n  125  99.601 115.2020 125.8920 119.3510 125.4010 293.902   100\n  250 100.302 112.9505 127.6999 118.2505 125.7510 263.201   100\n  500 104.901 116.8000 129.5040 120.9515 128.6010 250.300   100\n 1000  99.901 119.1010 132.5760 125.6510 133.6515 361.700   100\n```\n\n\n:::\n:::\n\n\n# Rolling medians\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_median(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_median(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_median(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_median(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr       min        lq      mean    median       uq     max neval\n  125  4488.901  5436.851  7884.461  6807.301  9175.85 18082.5   100\n  250  8627.101 11066.651 15335.154 12918.701 18420.80 27778.6   100\n  500 15907.801 20331.351 28436.765 27881.701 36709.25 43193.1   100\n 1000 21932.600 31001.450 38537.062 39575.450 46417.20 55299.1   100\n```\n\n\n:::\n:::\n\n\n# Rolling quantiles\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_quantile(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_quantile(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_quantile(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_quantile(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr       min        lq      mean    median       uq     max neval\n  125  4773.401  5840.051  8994.807  7461.101 11323.50 21145.4   100\n  250  9139.402 11815.051 16775.964 15211.351 22157.20 29556.8   100\n  500 17402.601 25027.150 31430.678 30648.901 37119.35 52118.9   100\n 1000 25257.701 34741.651 42669.820 44398.701 48113.35 67946.4   100\n```\n\n\n:::\n:::\n\n\n# Rolling variances\n\n$$\n\\begin{aligned}\n&\\text{Expanding window}\\\\\n&\\bullet\\text{sum}_{w}\\leftarrow\\text{sum}_{w}+\\text{w}_{new}\\\\\n&\\bullet\\text{sumsq}_{w}\\leftarrow\\text{sumsq}_{w}+\\text{w}_{new}^{2}\\\\\n&\\bullet\\text{sumsq}_{x}\\leftarrow\\lambda\\times\\text{sumsq}_{x}+\\text{w}_{new}\\times (\\text{x}_{new}-\\text{mean}_{x})(\\text{x}_{new}-\\text{mean}_{prev_x})\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{sumsq}_{x}\\leftarrow\\lambda\\times\\text{sumsq}_{x}+\\text{w}_{new}\\times (\\text{x}_{new}-\\text{mean}_{x})(\\text{x}_{new}-\\text{mean}_{prev_x})-\\\\\n&\\lambda\\times\\text{w}_{old}\\times (\\text{x}_{old}-\\text{mean}_{x})(\\text{x}_{old}-\\text{mean}_{prev_x})\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_var(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_var(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_var(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_var(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr     min       lq     mean   median       uq     max neval\n  125 121.201 151.9515 166.4691 160.0015 171.5005 267.600   100\n  250 119.602 150.1010 162.9370 158.8015 167.2010 288.901   100\n  500 120.002 150.2010 164.3571 157.2515 166.1510 358.001   100\n 1000 109.702 144.8505 157.4460 151.2510 162.6515 272.301   100\n```\n\n\n:::\n:::\n\n\n# Rolling standard deviations\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_sd(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_sd(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_sd(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_sd(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr     min      lq     mean   median      uq     max neval\n  125 127.401 155.201 170.8350 163.7010 177.751 270.802   100\n  250 127.500 152.101 168.4500 162.7510 175.601 275.502   100\n  500 116.600 149.451 162.8891 158.8515 168.651 247.001   100\n 1000 118.201 143.201 158.6620 151.5015 160.151 466.300   100\n```\n\n\n:::\n:::\n\n\n# Rolling scaling and centering\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_scale(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_scale(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_scale(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_scale(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr     min       lq     mean   median       uq     max neval\n  125 152.501 162.7510 174.3041 171.2005 181.4010 249.102   100\n  250 152.801 161.7015 174.4460 170.8010 180.7005 270.201   100\n  500 143.301 156.5505 171.0960 164.4510 178.2010 237.001   100\n 1000 138.101 152.1010 168.5681 164.4010 172.6510 417.501   100\n```\n\n\n:::\n:::\n\n\n# Rolling covariances\n\n$$\n\\begin{aligned}\n&\\text{Expanding window}\\\\\n&\\bullet\\text{sum}_{w}\\leftarrow\\text{sum}_{w}+\\text{w}_{new}\\\\\n&\\bullet\\text{sumsq}_{w}\\leftarrow\\text{sumsq}_{w}+\\text{w}_{new}^{2}\\\\\n&\\bullet\\text{sumsq}_{xy}\\leftarrow\\lambda\\times\\text{sumsq}_{xy}+\\text{w}_{new}\\times (\\text{x}_{new}-\\text{mean}_{x})(\\text{y}_{new}-\\text{mean}_{prev_y})\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{sumsq}_{xy}\\leftarrow\\lambda\\times\\text{sumsq}_{xy}+\\text{w}_{new}\\times (\\text{x}_{new}-\\text{mean}_{x})(\\text{y}_{new}-\\text{mean}_{prev_y})-\\\\\n&\\lambda\\times\\text{w}_{old}\\times (\\text{x}_{old}-\\text{mean}_{x})(\\text{y}_{old}-\\text{mean}_{prev_y})\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_cov(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_cov(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_cov(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_cov(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr     min       lq     mean   median       uq      max neval\n  125 948.401 1127.802 1356.469 1191.401 1304.651 6975.602   100\n  250 950.802 1092.601 1350.123 1145.751 1249.301 6184.301   100\n  500 929.602 1049.901 1234.448 1107.350 1249.151 6049.300   100\n 1000 854.101  945.951 1106.400 1000.801 1113.351 5940.200   100\n```\n\n\n:::\n:::\n\n\n# Rolling correlations\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_cor(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_cor(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_cor(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_cor(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr      min       lq     mean   median       uq       max neval\n  125 1195.601 1367.951 2010.797 1475.851 1743.601 15232.201   100\n  250 1154.701 1322.801 1528.393 1437.150 1558.300  4231.001   100\n  500 1072.701 1275.751 1505.307 1350.801 1419.501  6247.801   100\n 1000  984.200 1120.701 1426.649 1193.000 1345.051  6180.601   100\n```\n\n\n:::\n:::\n\n\n# Rolling crossproducts\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_crossprod(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_crossprod(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_crossprod(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_crossprod(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr     min        lq     mean    median       uq      max neval\n  125 748.300 1060.6010 1278.819 1129.0010 1221.351 7896.601   100\n  250 839.400 1019.5520 1232.001 1102.5010 1180.650 7490.401   100\n  500 805.002  974.0515 1115.400 1021.4515 1107.351 7776.001   100\n 1000 773.702  877.0000  967.747  916.8515 1022.201 1664.401   100\n```\n\n\n:::\n:::\n\n\n# Rolling linear models\n\n$$\n\\begin{aligned}\n&\\text{coef}=\\text{cov}_{xx}^{-1}\\times\\text{cov}_{xy}\\\\\n&\\text{intercept}=\\text{mean}_{y}-\\text{coef}\\times\\text{mean}_{x}\\\\\n&\\text{rsq}=\\frac{\\text{coef}^{T}\\times\\text{cov}_{xx}\\times\\text{coef}}{\\text{var}_{y}}\\\\\n&\\text{var}_{resid}=\\frac{(1-\\text{rsq})(\\text{var}_{y})(\\text{sum}_{w}-\\text{sumsq}_{w}/\\text{sum}_{w})}{\\text{n}_{rows}-\\text{n}_{cols}}\\\\\n&\\text{xx}=\\text{cov}_{xx}\\times(\\text{sum}_{w}-\\text{sumsq}_{w}/\\text{sum}_{w})\\\\\n&\\text{se}_{coef}=\\sqrt{\\text{var}_{resid}\\times\\text{diag}(\\text{xx}^{-1})}\\\\\n&\\text{se}_{intercept}=\\sqrt{\\text{var}_{resid}\\left(1/\\text{sum}_{w}+\\text{mean}_{x}^{T}\\text{xx}^{-1}\\text{mean}_{x}\\right)}\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_lm(x, y, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_lm(x, y, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_lm(x, y, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_lm(x, y, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr      min       lq     mean   median       uq     max neval\n  125 2611.802 3090.501 4998.171 3828.201 6597.951 12835.9   100\n  250 2430.001 3034.301 4880.506 3916.151 6039.851 12567.3   100\n  500 2370.701 2892.301 4804.828 3813.252 5776.551 13714.9   100\n 1000 2190.301 2866.651 4881.936 3422.251 6376.001 22212.7   100\n```\n\n\n:::\n:::\n\n\n# References\n\n-   <https://stackoverflow.com/a/9933794>\n-   <https://stackoverflow.com/a/11316626>\n-   <https://stackoverflow.com/a/34363187>\n-   <https://stackoverflow.com/a/243342>\n-   <https://stats.stackexchange.com/a/64217>\n-   <https://stackoverflow.com/a/51992954>\n-   <https://stackoverflow.com/a/25921772>\n-   <https://stackoverflow.com/a/40416506>\n-   <https://stackoverflow.com/a/5970314>\n-   <https://gist.github.com/ashelly/5665911>\n-   <https://stackoverflow.com/a/51992954>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}