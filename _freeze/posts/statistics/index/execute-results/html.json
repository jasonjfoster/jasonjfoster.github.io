{
  "hash": "50ebf5aec76cbfc84002b18809bca44f",
  "result": {
    "markdown": "---\ntitle: \"Statistics\"\nauthor: \"[Jason Foster](mailto:jason.j.foster@gmail.com)\"\ndate: last-modified\ncategories:\n  - algorithms\n  - r\ndefault-image-extension: \"\"\n---\n\n\n<!---# https://github.com/quarto-dev/quarto-cli/issues/6092 -->\n\n[![](https://github.com/jjf234/roll/workflows/R-CMD-check/badge.svg)](https://github.com/jjf234/roll/actions) [![](https://www.r-pkg.org/badges/version/roll)](https://cran.r-project.org/package=roll) [![](https://codecov.io/gh/jjf234/roll/graph/badge.svg)](https://codecov.io/github/jjf234/roll) [![](https://cranlogs.r-pkg.org/badges/last-day/roll?color=brightgreen)](https://cranlogs.r-pkg.org/badges/last-day/roll) [![](https://cranlogs.r-pkg.org/badges/last-week/roll?color=brightgreen)](https://cranlogs.r-pkg.org/badges/last-week/roll) [![](https://cranlogs.r-pkg.org/badges/roll?color=brightgreen)](https://cranlogs.r-pkg.org/badges/roll) [![](https://cranlogs.r-pkg.org/badges/grand-total/roll?color=brightgreen)](https://cranlogs.r-pkg.org/badges/grand-total/roll)\n\n# Usage\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(roll)\nlibrary(microbenchmark)\noptions(microbenchmark.unit = \"us\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn_vars <- 10\nn_obs <- 1000\nweights <- 0.9 ^ (n_obs:1)\n\nx <- matrix(rnorm(n_obs * n_vars), nrow = n_obs, ncol = n_vars)\ny <- matrix(rnorm(n_obs), nrow = n_obs, ncol = 1)\nx_lgl <- x < 0\n```\n:::\n\n\n# Rolling any\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_any(x_lgl, width = 125, min_obs = 1),\n                         \"250\" = roll_any(x_lgl, width = 250, min_obs = 1),\n                         \"500\" = roll_any(x_lgl, width = 500, min_obs = 1),\n                         \"1000\" = roll_any(x_lgl, width = 1000, min_obs = 1))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min     lq    mean median     uq    max neval\n  125 103.9 128.85 144.181  142.6 157.80  224.4   100\n  250 111.3 131.90 231.834  149.0 160.95 8548.0   100\n  500 113.1 130.95 146.818  143.2 160.60  194.3   100\n 1000 109.0 124.20 143.241  140.4 160.65  210.7   100\n```\n:::\n:::\n\n\n# Rolling all\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_all(x_lgl, width = 125, min_obs = 1),\n                         \"250\" = roll_all(x_lgl, width = 250, min_obs = 1),\n                         \"500\" = roll_all(x_lgl, width = 500, min_obs = 1),\n                         \"1000\" = roll_all(x_lgl, width = 1000, min_obs = 1))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 120.3 141.55 161.455 152.40 172.35 526.1   100\n  250 118.9 141.45 159.021 160.45 173.30 228.0   100\n  500 114.4 139.55 158.135 155.55 173.90 219.8   100\n 1000 112.0 137.05 155.731 152.95 166.15 245.6   100\n```\n:::\n:::\n\n\n# Rolling sums\n\n$$\n\\begin{aligned}\n&\\text{Expanding window} \\\\\n&\\bullet\\text{sum}_{x}\\leftarrow\\lambda\\times\\text{sum}_{x}+\\text{w}_{new}\\times\\text{x}_{new}\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{sum}_{x}\\leftarrow\\lambda\\times\\text{sum}_{x}+\\text{w}_{new}\\times\\text{x}_{new}-\\lambda\\times\\text{w}_{old}\\times\\text{x}_{old}\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_sum(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_sum(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_sum(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_sum(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr  min     lq    mean median     uq   max neval\n  125 93.7 111.40 124.095 119.95 134.65 190.5   100\n  250 94.7 110.85 124.654 117.95 132.60 192.4   100\n  500 95.4 109.50 122.803 116.70 131.10 308.1   100\n 1000 95.5 109.70 124.298 115.40 134.35 206.4   100\n```\n:::\n:::\n\n\n# Rolling products\n\n$$\n\\begin{aligned}\n&\\text{Expanding window}\\\\\n&\\bullet\\text{prod}_{w}\\leftarrow\\text{prod}_{w}\\times\\text{w}_{new}\\\\\n&\\bullet\\text{prod}_{x}\\leftarrow\\text{prod}_{x}\\times\\text{x}_{new}\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{prod}_{x}\\leftarrow\\text{prod}_{x}\\times\\text{x}_{new}/\\text{x}_{old}\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_prod(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_prod(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_prod(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_prod(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 222.6 234.30 256.250 244.00 269.90 378.4   100\n  250 217.8 234.70 249.864 243.00 254.05 352.8   100\n  500 147.8 168.70 184.928 178.75 198.30 253.0   100\n 1000 151.4 165.95 184.265 176.10 193.15 407.8   100\n```\n:::\n:::\n\n\n# Rolling means\n\n$$\n\\begin{aligned}\n&\\text{Expanding window}\\\\\n&\\bullet\\text{sum}_{w}\\leftarrow\\text{sum}_{w}+\\text{w}_{new}\\\\\n&\\bullet\\text{sum}_{x}\\leftarrow\\lambda\\times\\text{sum}_{x}+\\text{w}_{new}\\times\\text{x}_{new}\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{sum}_{x}\\leftarrow\\lambda\\times\\text{sum}_{x}+\\text{w}_{new}\\times\\text{x}_{new}-\\lambda\\times\\text{w}_{old}\\times \\text{x}_{old}\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_mean(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_mean(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_mean(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_mean(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125  99.5 119.75 133.644 126.55 145.70 193.1   100\n  250 102.6 117.80 131.421 125.65 145.45 171.6   100\n  500 100.6 114.35 133.149 128.75 144.20 386.2   100\n 1000 104.8 116.10 130.722 123.85 143.15 210.4   100\n```\n:::\n:::\n\n\n# Rolling minimums\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_min(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_min(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_min(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_min(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min     lq    mean median     uq    max neval\n  125 114.8 139.35 151.308 148.50 160.85  226.8   100\n  250 110.4 136.55 151.550 146.65 164.35  316.8   100\n  500 109.3 139.80 157.480 148.70 170.05  389.8   100\n 1000 113.9 143.30 187.273 152.55 171.15 3147.1   100\n```\n:::\n:::\n\n\n# Rolling maximums\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_max(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_max(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_max(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_max(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 110.7 128.35 138.595 135.35 144.50 283.0   100\n  250 108.8 127.50 139.425 136.75 146.85 205.3   100\n  500 105.8 132.10 143.038 141.55 153.90 187.4   100\n 1000 108.5 133.95 146.798 142.05 156.25 208.9   100\n```\n:::\n:::\n\n\n# Rolling index of minimums\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_idxmin(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_idxmin(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_idxmin(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_idxmin(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125  96.9 116.15 127.061 123.15 131.20 193.1   100\n  250 108.0 117.90 132.211 123.30 131.55 246.2   100\n  500  99.8 117.25 133.133 122.35 137.60 305.4   100\n 1000 102.4 120.50 137.555 127.80 140.80 228.8   100\n```\n:::\n:::\n\n\n# Rolling index of maximums\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_idxmax(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_idxmax(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_idxmax(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_idxmax(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 105.0 119.40 135.222 126.00 143.00 367.1   100\n  250 102.8 117.00 134.750 122.95 139.35 257.8   100\n  500 100.6 119.05 136.248 125.85 142.40 276.9   100\n 1000 105.8 123.30 145.538 133.95 158.85 236.9   100\n```\n:::\n:::\n\n\n# Rolling medians\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_median(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_median(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_median(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_median(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr     min       lq      mean   median       uq     max neval\n  125  5049.7  5677.45  8701.194  6796.90 11291.55 18998.6   100\n  250  9872.1 11961.60 16440.857 14402.90 20366.75 28773.2   100\n  500 18660.2 24411.85 29721.478 29960.75 35295.55 43186.0   100\n 1000 26709.3 36005.95 41646.918 43280.45 47841.55 53199.4   100\n```\n:::\n:::\n\n\n# Rolling quantiles\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_quantile(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_quantile(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_quantile(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_quantile(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr     min       lq      mean   median       uq     max neval\n  125  4450.6  5542.55  8483.886  7392.35  9786.55 19952.5   100\n  250  9229.2 11823.40 16449.410 14480.40 21311.75 29143.9   100\n  500 15916.3 20071.30 27060.605 27390.45 34057.05 40634.8   100\n 1000 22438.4 30954.70 38321.424 39968.25 44804.15 56898.6   100\n```\n:::\n:::\n\n\n# Rolling variances\n\n$$\n\\begin{aligned}\n&\\text{Expanding window}\\\\\n&\\bullet\\text{sum}_{w}\\leftarrow\\text{sum}_{w}+\\text{w}_{new}\\\\\n&\\bullet\\text{sumsq}_{w}\\leftarrow\\text{sumsq}_{w}+\\text{w}_{new}^{2}\\\\\n&\\bullet\\text{sumsq}_{x}\\leftarrow\\lambda\\times\\text{sumsq}_{x}+\\text{w}_{new}\\times (\\text{x}_{new}-\\text{mean}_{x})(\\text{x}_{new}-\\text{mean}_{prev_x})\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{sumsq}_{x}\\leftarrow\\lambda\\times\\text{sumsq}_{x}+\\text{w}_{new}\\times (\\text{x}_{new}-\\text{mean}_{x})(\\text{x}_{new}-\\text{mean}_{prev_x})-\\\\\n&\\lambda\\times\\text{w}_{old}\\times (\\text{x}_{old}-\\text{mean}_{x})(\\text{x}_{old}-\\text{mean}_{prev_x})\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_var(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_var(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_var(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_var(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 139.5 149.10 166.382 163.00 172.35 258.7   100\n  250 130.2 148.45 164.559 160.35 169.75 284.4   100\n  500 131.7 149.25 167.055 160.45 171.45 480.3   100\n 1000 115.0 139.10 154.313 151.25 160.30 252.4   100\n```\n:::\n:::\n\n\n# Rolling standard deviations\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_sd(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_sd(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_sd(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_sd(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 134.2 151.10 166.464 160.45 174.10 382.0   100\n  250 123.7 150.70 169.012 159.80 174.95 496.7   100\n  500 136.1 147.20 161.212 154.10 168.30 274.7   100\n 1000 128.9 140.45 150.573 146.50 156.75 214.4   100\n```\n:::\n:::\n\n\n# Rolling scaling and centering\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_scale(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_scale(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_scale(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_scale(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 147.8 157.65 171.824 166.35 175.75 265.9   100\n  250 144.6 157.20 168.209 164.10 174.25 249.9   100\n  500 143.9 154.10 165.708 162.85 172.15 268.1   100\n 1000 137.1 147.20 165.066 156.60 166.70 412.8   100\n```\n:::\n:::\n\n\n# Rolling covariances\n\n$$\n\\begin{aligned}\n&\\text{Expanding window}\\\\\n&\\bullet\\text{sum}_{w}\\leftarrow\\text{sum}_{w}+\\text{w}_{new}\\\\\n&\\bullet\\text{sumsq}_{w}\\leftarrow\\text{sumsq}_{w}+\\text{w}_{new}^{2}\\\\\n&\\bullet\\text{sumsq}_{xy}\\leftarrow\\lambda\\times\\text{sumsq}_{xy}+\\text{w}_{new}\\times (\\text{x}_{new}-\\text{mean}_{x})(\\text{y}_{new}-\\text{mean}_{prev_y})\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{sumsq}_{xy}\\leftarrow\\lambda\\times\\text{sumsq}_{xy}+\\text{w}_{new}\\times (\\text{x}_{new}-\\text{mean}_{x})(\\text{y}_{new}-\\text{mean}_{prev_y})-\\\\\n&\\lambda\\times\\text{w}_{old}\\times (\\text{x}_{old}-\\text{mean}_{x})(\\text{y}_{old}-\\text{mean}_{prev_y})\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_cov(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_cov(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_cov(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_cov(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min      lq     mean  median      uq    max neval\n  125 992.4 1087.60 1181.662 1147.05 1208.40 4539.5   100\n  250 966.9 1071.60 1228.098 1131.85 1185.25 6065.2   100\n  500 848.9 1020.65 1190.394 1082.70 1137.20 5936.6   100\n 1000 777.3  946.65 1052.764  971.25 1016.15 5841.1   100\n```\n:::\n:::\n\n\n# Rolling correlations\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_cor(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_cor(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_cor(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_cor(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr    min      lq     mean  median      uq     max neval\n  125 1167.7 1377.75 2143.177 1496.45 2452.30  8919.2   100\n  250 1114.8 1345.70 1971.568 1437.15 1865.40  6661.5   100\n  500 1130.4 1294.90 2055.076 1381.85 2598.75 15026.4   100\n 1000 1011.6 1130.25 1685.279 1208.20 1377.55  4670.2   100\n```\n:::\n:::\n\n\n# Rolling crossproducts\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_crossprod(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_crossprod(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_crossprod(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_crossprod(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min     lq     mean  median      uq    max neval\n  125 679.2 976.65 1112.208 1036.75 1078.10 8325.8   100\n  250 830.0 932.45 1047.441  996.00 1051.70 5885.7   100\n  500 793.8 913.05 1075.653  966.60 1018.30 6909.6   100\n 1000 646.4 813.25  918.169  845.00  937.75 5655.9   100\n```\n:::\n:::\n\n\n# Rolling linear models\n\n$$\n\\begin{aligned}\n&\\text{coef}=\\text{cov}_{xx}^{-1}\\times\\text{cov}_{xy}\\\\\n&\\text{intercept}=\\text{mean}_{y}-\\text{coef}\\times\\text{mean}_{x}\\\\\n&\\text{rsq}=\\frac{\\text{coef}^{T}\\times\\text{cov}_{xx}\\times\\text{coef}}{\\text{var}_{y}}\\\\\n&\\text{var}_{resid}=\\frac{(1-\\text{rsq})(\\text{var}_{y})(\\text{sum}_{w}-\\text{sumsq}_{w}/\\text{sum}_{w})}{\\text{n}_{rows}-\\text{n}_{cols}}\\\\\n&\\text{xx}=\\text{cov}_{xx}\\times(\\text{sum}_{w}-\\text{sumsq}_{w}/\\text{sum}_{w})\\\\\n&\\text{se}_{coef}=\\sqrt{\\text{var}_{resid}\\times\\text{diag}(\\text{xx}^{-1})}\\\\\n&\\text{se}_{intercept}=\\sqrt{\\text{var}_{resid}\\left(1/\\text{sum}_{w}+\\text{mean}_{x}^{T}\\text{xx}^{-1}\\text{mean}_{x}\\right)}\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_lm(x, y, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_lm(x, y, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_lm(x, y, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_lm(x, y, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr    min      lq     mean  median      uq     max neval\n  125 2250.6 3185.80 5073.430 3999.65 5857.75 23729.6   100\n  250 2386.5 2884.85 4569.928 3939.60 5859.95 11480.4   100\n  500 2161.5 3150.70 4549.807 3914.45 5589.60 10888.2   100\n 1000 2181.1 2772.20 4277.718 3660.90 5287.90 15622.6   100\n```\n:::\n:::\n\n\n# References\n\n-   <https://stackoverflow.com/a/9933794>\n-   <https://stackoverflow.com/a/11316626>\n-   <https://stackoverflow.com/a/34363187>\n-   <https://stackoverflow.com/a/243342>\n-   <https://stats.stackexchange.com/a/64217>\n-   <https://stackoverflow.com/a/51992954>\n-   <https://stackoverflow.com/a/25921772>\n-   <https://stackoverflow.com/a/40416506>\n-   <https://stackoverflow.com/a/5970314>\n-   <https://gist.github.com/ashelly/5665911>\n-   <https://stackoverflow.com/a/51992954>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}