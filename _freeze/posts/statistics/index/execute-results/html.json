{
  "hash": "0be66a0fbd59253cb216b0c242764cfb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Statistics\"\nauthor: \"[Jason Foster](mailto:jason.j.foster@gmail.com)\"\ndate: last-modified\ncategories:\n  - algorithms\n  - r\ndefault-image-extension: \"\"\n---\n\n\n<!---# https://github.com/quarto-dev/quarto-cli/issues/6092 -->\n\n[![](https://github.com/jasonjfoster/roll/workflows/R-CMD-check/badge.svg)](https://github.com/jasonjfoster/roll/actions) [![](https://www.r-pkg.org/badges/version/roll)](https://cran.r-project.org/package=roll) [![](https://codecov.io/gh/jasonjfoster/roll/graph/badge.svg)](https://codecov.io/github/jasonjfoster/roll) [![](https://cranlogs.r-pkg.org/badges/last-day/roll?color=brightgreen)](https://cranlogs.r-pkg.org/badges/last-day/roll) [![](https://cranlogs.r-pkg.org/badges/last-week/roll?color=brightgreen)](https://cranlogs.r-pkg.org/badges/last-week/roll) [![](https://cranlogs.r-pkg.org/badges/roll?color=brightgreen)](https://cranlogs.r-pkg.org/badges/roll) [![](https://cranlogs.r-pkg.org/badges/grand-total/roll?color=brightgreen)](https://cranlogs.r-pkg.org/badges/grand-total/roll)\n\n# Usage\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(roll)\nlibrary(microbenchmark)\noptions(microbenchmark.unit = \"us\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn_vars <- 10\nn_obs <- 1000\nweights <- 0.9 ^ (n_obs:1)\n\nx <- matrix(rnorm(n_obs * n_vars), nrow = n_obs, ncol = n_vars)\ny <- matrix(rnorm(n_obs), nrow = n_obs, ncol = 1)\nx_lgl <- x < 0\n```\n:::\n\n\n# Rolling any\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_any(x_lgl, width = 125, min_obs = 1),\n                         \"250\" = roll_any(x_lgl, width = 250, min_obs = 1),\n                         \"500\" = roll_any(x_lgl, width = 500, min_obs = 1),\n                         \"1000\" = roll_any(x_lgl, width = 1000, min_obs = 1))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr   min     lq    mean median     uq    max neval\n  125 140.0 160.10 189.673 172.95 190.25 1386.1   100\n  250 143.0 161.95 181.002 173.50 197.75  235.9   100\n  500 143.5 155.55 179.391 171.35 190.70  298.5   100\n 1000 142.4 154.05 176.432 164.00 187.65  322.3   100\n```\n\n\n:::\n:::\n\n\n# Rolling all\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_all(x_lgl, width = 125, min_obs = 1),\n                         \"250\" = roll_all(x_lgl, width = 250, min_obs = 1),\n                         \"500\" = roll_all(x_lgl, width = 500, min_obs = 1),\n                         \"1000\" = roll_all(x_lgl, width = 1000, min_obs = 1))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 101.4 117.25 168.671  163.9 186.25 436.6   100\n  250  99.5 119.05 170.049  165.2 196.80 531.0   100\n  500  95.3 112.30 166.682  160.3 178.60 355.7   100\n 1000  95.3 114.15 154.029  155.4 175.60 293.9   100\n```\n\n\n:::\n:::\n\n\n# Rolling sums\n\n$$\n\\begin{aligned}\n&\\text{Expanding window} \\\\\n&\\bullet\\text{sum}_{x}\\leftarrow\\lambda\\times\\text{sum}_{x}+\\text{w}_{new}\\times\\text{x}_{new}\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{sum}_{x}\\leftarrow\\lambda\\times\\text{sum}_{x}+\\text{w}_{new}\\times\\text{x}_{new}-\\lambda\\times\\text{w}_{old}\\times\\text{x}_{old}\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_sum(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_sum(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_sum(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_sum(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr   min     lq    mean median    uq   max neval\n  125 114.7 149.50 174.683 163.95 194.8 295.7   100\n  250 105.5 148.05 168.071 159.50 184.4 271.8   100\n  500 109.1 147.85 169.496 159.05 185.6 259.4   100\n 1000 118.3 142.75 168.254 153.75 174.9 555.6   100\n```\n\n\n:::\n:::\n\n\n# Rolling products\n\n$$\n\\begin{aligned}\n&\\text{Expanding window}\\\\\n&\\bullet\\text{prod}_{w}\\leftarrow\\text{prod}_{w}\\times\\text{w}_{new}\\\\\n&\\bullet\\text{prod}_{x}\\leftarrow\\text{prod}_{x}\\times\\text{x}_{new}\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{prod}_{x}\\leftarrow\\text{prod}_{x}\\times\\text{x}_{new}/\\text{x}_{old}\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_prod(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_prod(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_prod(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_prod(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 238.6 255.95 288.438 273.10 305.95 526.8   100\n  250 241.0 252.80 287.411 268.15 301.80 577.8   100\n  500 169.9 191.05 216.503 206.10 233.50 341.9   100\n 1000 174.2 188.50 216.642 199.25 231.80 387.1   100\n```\n\n\n:::\n:::\n\n\n# Rolling means\n\n$$\n\\begin{aligned}\n&\\text{Expanding window}\\\\\n&\\bullet\\text{sum}_{w}\\leftarrow\\text{sum}_{w}+\\text{w}_{new}\\\\\n&\\bullet\\text{sum}_{x}\\leftarrow\\lambda\\times\\text{sum}_{x}+\\text{w}_{new}\\times\\text{x}_{new}\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{sum}_{x}\\leftarrow\\lambda\\times\\text{sum}_{x}+\\text{w}_{new}\\times\\text{x}_{new}-\\lambda\\times\\text{w}_{old}\\times \\text{x}_{old}\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_mean(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_mean(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_mean(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_mean(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 115.6 158.50 197.981 174.20 207.95 522.8   100\n  250 122.2 161.85 182.061 175.40 185.95 433.3   100\n  500 109.4 153.75 183.995 171.20 199.95 396.4   100\n 1000 106.7 149.35 171.184 162.45 178.00 543.0   100\n```\n\n\n:::\n:::\n\n\n# Rolling minimums\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_min(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_min(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_min(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_min(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 113.9 147.65 175.156 169.90 196.20 294.3   100\n  250 111.9 147.10 172.930 166.35 194.60 286.4   100\n  500 113.5 141.10 164.183 159.80 185.10 319.5   100\n 1000 117.5 144.65 176.551 167.80 197.15 428.6   100\n```\n\n\n:::\n:::\n\n\n# Rolling maximums\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_max(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_max(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_max(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_max(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 111.9 154.75 187.195 185.20 217.35 365.5   100\n  250 113.5 144.20 175.962 171.35 202.05 338.8   100\n  500 110.6 138.25 182.218 182.75 206.55 358.8   100\n 1000 110.4 138.65 184.156 178.10 203.25 695.0   100\n```\n\n\n:::\n:::\n\n\n# Rolling index of minimums\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_idxmin(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_idxmin(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_idxmin(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_idxmin(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 106.6 151.75 185.313 171.70 189.30 690.0   100\n  250  95.8 157.25 189.845 180.30 203.80 543.4   100\n  500 101.4 150.75 183.737 170.20 192.55 723.2   100\n 1000  97.4 158.10 187.637 177.25 203.30 589.6   100\n```\n\n\n:::\n:::\n\n\n# Rolling index of maximums\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_idxmax(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_idxmax(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_idxmax(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_idxmax(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 113.9 136.60 161.903 146.00 172.30 301.6   100\n  250 110.6 134.20 156.274 144.40 163.55 481.4   100\n  500 113.5 138.95 162.540 151.40 177.20 286.4   100\n 1000 119.1 134.65 159.734 144.35 169.30 309.7   100\n```\n\n\n:::\n:::\n\n\n# Rolling medians\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# \"'online' is only supported for equal 'weights'\"\nresult <- microbenchmark(\"125\" = roll_median(x, width = 125, min_obs = 1),\n                         \"250\" = roll_median(x, width = 250, min_obs = 1),\n                         \"500\" = roll_median(x, width = 500, min_obs = 1),\n                         \"1000\" = roll_median(x, width = 1000, min_obs = 1))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr   min      lq     mean  median      uq     max neval\n  125 875.1 1213.45 2161.598 2403.60 2637.70  4560.5   100\n  250 870.1 1575.55 2268.181 2350.10 2567.75  9852.7   100\n  500 785.3 1270.55 1994.596 2219.95 2413.60  4329.7   100\n 1000 626.8 1347.65 1656.620 1684.75 1844.75 10041.4   100\n```\n\n\n:::\n:::\n\n\n# Rolling quantiles\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# \"'online' is only supported for equal 'weights'\"\nresult <- microbenchmark(\"125\" = roll_quantile(x, width = 125, min_obs = 1),\n                         \"250\" = roll_quantile(x, width = 250, min_obs = 1),\n                         \"500\" = roll_quantile(x, width = 500, min_obs = 1),\n                         \"1000\" = roll_quantile(x, width = 1000, min_obs = 1))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr    min      lq     mean  median      uq    max neval\n  125 1120.3 1484.85 1953.515 1568.55 2543.00 3629.2   100\n  250 1105.3 1465.70 1981.257 1546.00 2531.60 4835.2   100\n  500  932.1 1362.65 1784.421 1438.85 2327.75 3590.8   100\n 1000  695.5 1051.60 1462.541 1259.95 1794.65 4170.2   100\n```\n\n\n:::\n:::\n\n\n# Rolling variances\n\n$$\n\\begin{aligned}\n&\\text{Expanding window}\\\\\n&\\bullet\\text{sum}_{w}\\leftarrow\\text{sum}_{w}+\\text{w}_{new}\\\\\n&\\bullet\\text{sumsq}_{w}\\leftarrow\\text{sumsq}_{w}+\\text{w}_{new}^{2}\\\\\n&\\bullet\\text{sumsq}_{x}\\leftarrow\\lambda\\times\\text{sumsq}_{x}+\\text{w}_{new}\\times (\\text{x}_{new}-\\text{mean}_{x})(\\text{x}_{new}-\\text{mean}_{prev_x})\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{sumsq}_{x}\\leftarrow\\lambda\\times\\text{sumsq}_{x}+\\text{w}_{new}\\times (\\text{x}_{new}-\\text{mean}_{x})(\\text{x}_{new}-\\text{mean}_{prev_x})-\\\\\n&\\lambda\\times\\text{w}_{old}\\times (\\text{x}_{old}-\\text{mean}_{x})(\\text{x}_{old}-\\text{mean}_{prev_x})\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_var(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_var(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_var(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_var(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 150.0 178.10 210.039 201.25 233.95 489.2   100\n  250 150.1 174.65 207.947 200.70 228.10 360.1   100\n  500 149.1 169.35 199.944 192.55 218.80 315.3   100\n 1000 143.0 164.40 194.217 186.00 201.05 419.1   100\n```\n\n\n:::\n:::\n\n\n# Rolling standard deviations\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_sd(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_sd(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_sd(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_sd(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 147.7 173.60 196.911  184.5 207.25 348.9   100\n  250 153.3 171.00 193.395  179.3 195.60 337.2   100\n  500 152.1 167.75 196.382  180.4 206.15 576.1   100\n 1000 141.4 157.30 181.530  166.1 185.00 348.1   100\n```\n\n\n:::\n:::\n\n\n# Rolling scaling and centering\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_scale(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_scale(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_scale(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_scale(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 169.0 183.60 211.706 190.85 220.50 519.3   100\n  250 167.2 179.45 199.590 188.70 204.95 372.4   100\n  500 159.9 177.20 198.743 183.40 213.90 484.9   100\n 1000 153.4 166.70 187.521 175.00 192.55 480.3   100\n```\n\n\n:::\n:::\n\n\n# Rolling covariances\n\n$$\n\\begin{aligned}\n&\\text{Expanding window}\\\\\n&\\bullet\\text{sum}_{w}\\leftarrow\\text{sum}_{w}+\\text{w}_{new}\\\\\n&\\bullet\\text{sumsq}_{w}\\leftarrow\\text{sumsq}_{w}+\\text{w}_{new}^{2}\\\\\n&\\bullet\\text{sumsq}_{xy}\\leftarrow\\lambda\\times\\text{sumsq}_{xy}+\\text{w}_{new}\\times (\\text{x}_{new}-\\text{mean}_{x})(\\text{y}_{new}-\\text{mean}_{prev_y})\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{sumsq}_{xy}\\leftarrow\\lambda\\times\\text{sumsq}_{xy}+\\text{w}_{new}\\times (\\text{x}_{new}-\\text{mean}_{x})(\\text{y}_{new}-\\text{mean}_{prev_y})-\\\\\n&\\lambda\\times\\text{w}_{old}\\times (\\text{x}_{old}-\\text{mean}_{x})(\\text{y}_{old}-\\text{mean}_{prev_y})\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_cov(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_cov(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_cov(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_cov(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr   min      lq     mean  median      uq     max neval\n  125 997.0 1494.25 3410.870 3403.80 3842.20 24595.1   100\n  250 901.4 1407.15 2823.510 3211.85 3756.05  8780.5   100\n  500 918.4 1216.60 2857.867 3069.45 3574.95 24867.1   100\n 1000 845.8 1296.05 2762.877 3084.95 3432.55 14952.8   100\n```\n\n\n:::\n:::\n\n\n# Rolling correlations\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_cor(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_cor(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_cor(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_cor(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr    min      lq     mean  median      uq     max neval\n  125 1072.9 3506.15 3755.468 3915.05 4295.05 20701.9   100\n  250 1123.5 3319.80 3417.225 3814.40 4093.65  6803.2   100\n  500  981.0 3107.60 3241.415 3586.25 3951.30  5417.2   100\n 1000  846.7 2679.75 3375.554 3290.60 3615.55 18419.1   100\n```\n\n\n:::\n:::\n\n\n# Rolling crossproducts\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_crossprod(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_crossprod(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_crossprod(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_crossprod(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr   min     lq     mean median      uq     max neval\n  125 733.5 840.00 1522.260 905.55 1334.15 20515.7   100\n  250 710.5 826.90 1370.135 889.00 1147.90  6707.6   100\n  500 678.4 774.35 1322.069 850.15 1316.95  6115.2   100\n 1000 628.2 713.40 1215.308 789.35 1098.35  6974.1   100\n```\n\n\n:::\n:::\n\n\n# Rolling linear models\n\n$$\n\\begin{aligned}\n&\\text{coef}=\\text{cov}_{xx}^{-1}\\times\\text{cov}_{xy}\\\\\n&\\text{intercept}=\\text{mean}_{y}-\\text{coef}\\times\\text{mean}_{x}\\\\\n&\\text{rsq}=\\frac{\\text{coef}^{T}\\times\\text{cov}_{xx}\\times\\text{coef}}{\\text{var}_{y}}\\\\\n&\\text{var}_{resid}=\\frac{(1-\\text{rsq})(\\text{var}_{y})(\\text{sum}_{w}-\\text{sumsq}_{w}/\\text{sum}_{w})}{\\text{n}_{rows}-\\text{n}_{cols}}\\\\\n&\\text{xx}=\\text{cov}_{xx}\\times(\\text{sum}_{w}-\\text{sumsq}_{w}/\\text{sum}_{w})\\\\\n&\\text{se}_{coef}=\\sqrt{\\text{var}_{resid}\\times\\text{diag}(\\text{xx}^{-1})}\\\\\n&\\text{se}_{intercept}=\\sqrt{\\text{var}_{resid}\\left(1/\\text{sum}_{w}+\\text{mean}_{x}^{T}\\text{xx}^{-1}\\text{mean}_{x}\\right)}\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_lm(x, y, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_lm(x, y, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_lm(x, y, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_lm(x, y, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr    min      lq     mean  median      uq     max neval\n  125 2607.2 6506.55 7440.738 7705.85 8332.65 25370.8   100\n  250 2687.3 5259.75 7043.082 7395.90 8217.60 12383.7   100\n  500 2558.0 4782.30 6734.644 7031.35 8023.95 23291.2   100\n 1000 2432.9 5033.85 6604.076 7026.25 7709.00 14659.6   100\n```\n\n\n:::\n:::\n\n\n# References\n\n-   Weights: <https://stackoverflow.com/a/9933794>\n-   Index: <https://stackoverflow.com/a/11316626>\n-   Index: <https://stackoverflow.com/a/34363187>\n-   Index: <https://stackoverflow.com/a/243342>\n-   Quantile (comparator): <https://stackoverflow.com/a/51992954>\n-   Quantile (comparator): <https://stackoverflow.com/a/25921772>\n-   Quantile (comparator): <https://stackoverflow.com/a/40416506>\n-   Median: <https://stackoverflow.com/a/5970314>\n-   Median: <https://stackoverflow.com/a/5971248>\n-   Median: <https://gist.github.com/ashelly/5665911>\n-   Standard errors: <https://stats.stackexchange.com/a/64217>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}