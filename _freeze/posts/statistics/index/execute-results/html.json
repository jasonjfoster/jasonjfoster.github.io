{
  "hash": "e0499e126899c39467b47e4619992fca",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Statistics\"\nauthor: \"[Jason Foster](mailto:jason.j.foster@gmail.com)\"\ndate: last-modified\ncategories:\n  - algorithms\n  - r\ndefault-image-extension: \"\"\n---\n\n\n<!---# https://github.com/quarto-dev/quarto-cli/issues/6092 -->\n\n[![](https://github.com/jasonjfoster/roll/workflows/R-CMD-check/badge.svg)](https://github.com/jasonjfoster/roll/actions) [![](https://www.r-pkg.org/badges/version/roll)](https://cran.r-project.org/package=roll) [![](https://codecov.io/gh/jasonjfoster/roll/graph/badge.svg)](https://codecov.io/github/jasonjfoster/roll) [![](https://cranlogs.r-pkg.org/badges/last-day/roll?color=brightgreen)](https://cranlogs.r-pkg.org/badges/last-day/roll) [![](https://cranlogs.r-pkg.org/badges/last-week/roll?color=brightgreen)](https://cranlogs.r-pkg.org/badges/last-week/roll) [![](https://cranlogs.r-pkg.org/badges/roll?color=brightgreen)](https://cranlogs.r-pkg.org/badges/roll) [![](https://cranlogs.r-pkg.org/badges/grand-total/roll?color=brightgreen)](https://cranlogs.r-pkg.org/badges/grand-total/roll)\n\n# Usage\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(roll)\nlibrary(microbenchmark)\noptions(microbenchmark.unit = \"us\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn_vars <- 10\nn_obs <- 1000\nweights <- 0.9 ^ (n_obs:1)\n\nx <- matrix(rnorm(n_obs * n_vars), nrow = n_obs, ncol = n_vars)\ny <- matrix(rnorm(n_obs), nrow = n_obs, ncol = 1)\nx_lgl <- x < 0\n```\n:::\n\n\n# Rolling any\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_any(x_lgl, width = 125, min_obs = 1),\n                         \"250\" = roll_any(x_lgl, width = 250, min_obs = 1),\n                         \"500\" = roll_any(x_lgl, width = 500, min_obs = 1),\n                         \"1000\" = roll_any(x_lgl, width = 1000, min_obs = 1))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr     min       lq    mean   median       uq      max neval\n  125 109.901 128.6510 141.055 140.1510 149.7010  229.401   100\n  250 107.801 125.0510 134.943 134.9500 141.3515  196.401   100\n  500  97.501 123.0510 143.712 132.2015 142.4510 1149.200   100\n 1000  90.900 121.4005 133.394 130.7510 143.0015  208.400   100\n```\n\n\n:::\n:::\n\n\n# Rolling all\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_all(x_lgl, width = 125, min_obs = 1),\n                         \"250\" = roll_all(x_lgl, width = 250, min_obs = 1),\n                         \"500\" = roll_all(x_lgl, width = 500, min_obs = 1),\n                         \"1000\" = roll_all(x_lgl, width = 1000, min_obs = 1))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr    min      lq    mean   median       uq     max neval\n  125 88.501 122.351 137.136 133.2510 147.4010 232.701   100\n  250 93.400 125.851 137.723 136.4515 146.9005 220.202   100\n  500 84.901 124.151 136.521 134.2515 146.3500 292.901   100\n 1000 81.300 119.251 133.533 129.3010 143.6505 233.200   100\n```\n\n\n:::\n:::\n\n\n# Rolling sums\n\n$$\n\\begin{aligned}\n&\\text{Expanding window} \\\\\n&\\bullet\\text{sum}_{x}\\leftarrow\\lambda\\times\\text{sum}_{x}+\\text{w}_{new}\\times\\text{x}_{new}\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{sum}_{x}\\leftarrow\\lambda\\times\\text{sum}_{x}+\\text{w}_{new}\\times\\text{x}_{new}-\\lambda\\times\\text{w}_{old}\\times\\text{x}_{old}\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_sum(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_sum(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_sum(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_sum(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr     min       lq     mean   median      uq     max neval\n  125  96.001 107.6510 132.8509 120.5010 139.251 308.801   100\n  250  95.100 105.7010 120.0020 113.1010 126.651 213.801   100\n  500 100.401 106.7510 122.3680 113.4505 123.650 257.701   100\n 1000  97.801 105.3015 121.0870 112.2505 121.401 224.701   100\n```\n\n\n:::\n:::\n\n\n# Rolling products\n\n$$\n\\begin{aligned}\n&\\text{Expanding window}\\\\\n&\\bullet\\text{prod}_{w}\\leftarrow\\text{prod}_{w}\\times\\text{w}_{new}\\\\\n&\\bullet\\text{prod}_{x}\\leftarrow\\text{prod}_{x}\\times\\text{x}_{new}\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{prod}_{x}\\leftarrow\\text{prod}_{x}\\times\\text{x}_{new}/\\text{x}_{old}\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_prod(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_prod(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_prod(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_prod(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr     min      lq     mean   median       uq     max neval\n  125 214.401 228.201 270.2620 244.0510 293.7015 522.801   100\n  250 214.202 231.902 279.7090 253.9010 311.9015 627.001   100\n  500 151.400 166.201 198.6731 190.0515 218.8505 355.502   100\n 1000 145.400 165.051 198.4769 185.5005 224.6010 365.200   100\n```\n\n\n:::\n:::\n\n\n# Rolling means\n\n$$\n\\begin{aligned}\n&\\text{Expanding window}\\\\\n&\\bullet\\text{sum}_{w}\\leftarrow\\text{sum}_{w}+\\text{w}_{new}\\\\\n&\\bullet\\text{sum}_{x}\\leftarrow\\lambda\\times\\text{sum}_{x}+\\text{w}_{new}\\times\\text{x}_{new}\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{sum}_{x}\\leftarrow\\lambda\\times\\text{sum}_{x}+\\text{w}_{new}\\times\\text{x}_{new}-\\lambda\\times\\text{w}_{old}\\times \\text{x}_{old}\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_mean(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_mean(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_mean(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_mean(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr    min       lq     mean   median       uq     max neval\n  125 98.501 118.2510 141.8390 126.1015 154.0020 317.301   100\n  250 95.801 119.1010 139.6991 127.3510 154.3505 292.801   100\n  500 94.202 115.6015 141.0950 125.0010 156.7505 364.001   100\n 1000 92.502 109.8005 127.4881 116.9010 140.3005 216.502   100\n```\n\n\n:::\n:::\n\n\n# Rolling minimums\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_min(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_min(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_min(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_min(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr     min       lq     mean   median       uq     max neval\n  125 103.802 126.0505 150.4111 142.9515 161.8010 256.000   100\n  250 103.601 124.5505 152.4690 146.0005 161.6510 339.301   100\n  500 105.102 125.7505 151.3250 138.7515 165.9005 258.401   100\n 1000 110.301 134.1005 155.8210 144.4515 166.3010 275.302   100\n```\n\n\n:::\n:::\n\n\n# Rolling maximums\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_max(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_max(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_max(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_max(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr     min       lq     mean   median       uq     max neval\n  125 104.702 118.1510 143.4220 125.0510 148.1015 433.502   100\n  250 103.900 116.1015 135.3599 126.6505 145.5010 227.900   100\n  500 107.801 116.7505 136.6009 123.2010 140.4005 387.201   100\n 1000 107.800 119.9010 140.2570 129.7005 148.6005 355.601   100\n```\n\n\n:::\n:::\n\n\n# Rolling index of minimums\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_idxmin(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_idxmin(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_idxmin(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_idxmin(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr     min       lq     mean   median       uq     max neval\n  125  95.002 110.7010 122.4680 118.1510 125.6505 343.201   100\n  250  96.901 110.5010 120.5481 116.5515 120.8515 226.301   100\n  500  99.101 114.5510 122.9701 121.6510 126.8010 196.901   100\n 1000 103.201 116.2515 126.3810 122.5010 129.1515 221.101   100\n```\n\n\n:::\n:::\n\n\n# Rolling index of maximums\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_idxmax(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_idxmax(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_idxmax(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_idxmax(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr     min       lq     mean   median       uq     max neval\n  125  99.700 112.2015 129.4850 121.9515 134.1510 244.001   100\n  250 103.001 114.9510 133.3710 121.4010 131.6510 286.001   100\n  500  99.001 113.6010 133.3449 120.0015 144.7515 310.202   100\n 1000 101.402 120.4020 135.8210 124.7510 141.6010 288.402   100\n```\n\n\n:::\n:::\n\n\n# Rolling medians\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# \"'online' is only supported for equal 'weights'\"\nresult <- microbenchmark(\"125\" = roll_median(x, width = 125, min_obs = 1),\n                         \"250\" = roll_median(x, width = 250, min_obs = 1),\n                         \"500\" = roll_median(x, width = 500, min_obs = 1),\n                         \"1000\" = roll_median(x, width = 1000, min_obs = 1))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr      min       lq     mean   median       uq      max neval\n  125 1009.201 1265.501 1549.259 1275.901 1360.001 4642.701   100\n  250 1140.601 1249.501 1369.677 1258.151 1300.852 3457.901   100\n  500  988.800 1148.301 1302.454 1164.601 1213.952 4289.801   100\n 1000  799.301  863.901 1028.777  874.351  905.001 3093.301   100\n```\n\n\n:::\n:::\n\n\n# Rolling quantiles\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# \"'online' is only supported for equal 'weights'\"\nresult <- microbenchmark(\"125\" = roll_quantile(x, width = 125, min_obs = 1),\n                         \"250\" = roll_quantile(x, width = 250, min_obs = 1),\n                         \"500\" = roll_quantile(x, width = 500, min_obs = 1),\n                         \"1000\" = roll_quantile(x, width = 1000, min_obs = 1))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr      min       lq     mean   median       uq      max neval\n  125 1029.801 1552.251 2272.415 2318.451 3219.201 4506.201   100\n  250 1002.301 1520.900 2288.996 2280.301 3207.101 4415.802   100\n  500  915.900 1215.951 2097.748 2114.950 2930.602 4072.301   100\n 1000  685.401 1393.601 1746.082 1636.101 2232.401 3053.201   100\n```\n\n\n:::\n:::\n\n\n# Rolling variances\n\n$$\n\\begin{aligned}\n&\\text{Expanding window}\\\\\n&\\bullet\\text{sum}_{w}\\leftarrow\\text{sum}_{w}+\\text{w}_{new}\\\\\n&\\bullet\\text{sumsq}_{w}\\leftarrow\\text{sumsq}_{w}+\\text{w}_{new}^{2}\\\\\n&\\bullet\\text{sumsq}_{x}\\leftarrow\\lambda\\times\\text{sumsq}_{x}+\\text{w}_{new}\\times (\\text{x}_{new}-\\text{mean}_{x})(\\text{x}_{new}-\\text{mean}_{prev_x})\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{sumsq}_{x}\\leftarrow\\lambda\\times\\text{sumsq}_{x}+\\text{w}_{new}\\times (\\text{x}_{new}-\\text{mean}_{x})(\\text{x}_{new}-\\text{mean}_{prev_x})-\\\\\n&\\lambda\\times\\text{w}_{old}\\times (\\text{x}_{old}-\\text{mean}_{x})(\\text{x}_{old}-\\text{mean}_{prev_x})\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_var(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_var(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_var(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_var(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr     min       lq     mean   median       uq      max neval\n  125 143.602 156.0515 183.4720 165.9010 174.6510 1435.501   100\n  250 140.401 151.7510 172.8961 160.7005 171.8515  379.702   100\n  500 140.500 150.9515 179.4659 161.3020 173.8010  600.801   100\n 1000 131.001 140.5010 154.1260 149.1515 158.9005  376.402   100\n```\n\n\n:::\n:::\n\n\n# Rolling standard deviations\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_sd(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_sd(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_sd(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_sd(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr     min       lq     mean   median       uq     max neval\n  125 130.901 155.9510 171.4719 167.2010 178.9505 413.501   100\n  250 127.901 153.6510 174.5429 164.1500 178.6515 297.900   100\n  500 126.001 149.9505 170.5480 162.6510 177.7510 287.201   100\n 1000 126.101 142.5505 156.5379 152.9005 164.8005 204.901   100\n```\n\n\n:::\n:::\n\n\n# Rolling scaling and centering\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_scale(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_scale(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_scale(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_scale(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr     min       lq     mean   median       uq     max neval\n  125 152.301 167.8510 190.3910 181.4510 203.4015 385.201   100\n  250 152.101 163.9000 185.5619 180.7510 202.2010 264.901   100\n  500 145.600 158.8510 181.8010 173.2515 197.9505 384.901   100\n 1000 139.000 152.8505 170.6189 163.5000 184.6510 241.201   100\n```\n\n\n:::\n:::\n\n\n# Rolling covariances\n\n$$\n\\begin{aligned}\n&\\text{Expanding window}\\\\\n&\\bullet\\text{sum}_{w}\\leftarrow\\text{sum}_{w}+\\text{w}_{new}\\\\\n&\\bullet\\text{sumsq}_{w}\\leftarrow\\text{sumsq}_{w}+\\text{w}_{new}^{2}\\\\\n&\\bullet\\text{sumsq}_{xy}\\leftarrow\\lambda\\times\\text{sumsq}_{xy}+\\text{w}_{new}\\times (\\text{x}_{new}-\\text{mean}_{x})(\\text{y}_{new}-\\text{mean}_{prev_y})\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{sumsq}_{xy}\\leftarrow\\lambda\\times\\text{sumsq}_{xy}+\\text{w}_{new}\\times (\\text{x}_{new}-\\text{mean}_{x})(\\text{y}_{new}-\\text{mean}_{prev_y})-\\\\\n&\\lambda\\times\\text{w}_{old}\\times (\\text{x}_{old}-\\text{mean}_{x})(\\text{y}_{old}-\\text{mean}_{prev_y})\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_cov(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_cov(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_cov(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_cov(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr      min       lq     mean   median       uq      max neval\n  125 1012.901 1205.351 1334.298 1282.601 1449.851 1731.401   100\n  250  963.101 1183.401 1287.673 1253.201 1382.101 1652.601   100\n  500  940.301 1105.701 1241.780 1164.801 1275.702 5995.002   100\n 1000  794.601  976.851 1267.477 1064.251 1216.651 5782.801   100\n```\n\n\n:::\n:::\n\n\n# Rolling correlations\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_cor(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_cor(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_cor(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_cor(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr      min       lq     mean   median       uq      max neval\n  125 1058.002 1354.052 1681.791 1488.501 1683.101 7285.901   100\n  250 1007.801 1320.651 1604.857 1450.901 1617.701 6644.600   100\n  500  999.200 1263.802 1634.291 1355.200 1559.301 6092.001   100\n 1000  790.701 1095.700 1348.632 1173.400 1318.051 6457.301   100\n```\n\n\n:::\n:::\n\n\n# Rolling crossproducts\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_crossprod(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_crossprod(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_crossprod(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_crossprod(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr     min       lq      mean   median        uq      max neval\n  125 683.901 922.3510  973.6861 969.7020 1034.4510 1233.302   100\n  250 676.702 892.1020 1006.0430 969.2015 1009.2010 6531.401   100\n  500 660.301 885.0005 1025.8130 927.9015  971.8510 6103.200   100\n 1000 632.000 819.4005  971.6280 860.8020  900.5005 6584.601   100\n```\n\n\n:::\n:::\n\n\n# Rolling linear models\n\n$$\n\\begin{aligned}\n&\\text{coef}=\\text{cov}_{xx}^{-1}\\times\\text{cov}_{xy}\\\\\n&\\text{intercept}=\\text{mean}_{y}-\\text{coef}\\times\\text{mean}_{x}\\\\\n&\\text{rsq}=\\frac{\\text{coef}^{T}\\times\\text{cov}_{xx}\\times\\text{coef}}{\\text{var}_{y}}\\\\\n&\\text{var}_{resid}=\\frac{(1-\\text{rsq})(\\text{var}_{y})(\\text{sum}_{w}-\\text{sumsq}_{w}/\\text{sum}_{w})}{\\text{n}_{rows}-\\text{n}_{cols}}\\\\\n&\\text{xx}=\\text{cov}_{xx}\\times(\\text{sum}_{w}-\\text{sumsq}_{w}/\\text{sum}_{w})\\\\\n&\\text{se}_{coef}=\\sqrt{\\text{var}_{resid}\\times\\text{diag}(\\text{xx}^{-1})}\\\\\n&\\text{se}_{intercept}=\\sqrt{\\text{var}_{resid}\\left(1/\\text{sum}_{w}+\\text{mean}_{x}^{T}\\text{xx}^{-1}\\text{mean}_{x}\\right)}\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_lm(x, y, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_lm(x, y, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_lm(x, y, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_lm(x, y, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n expr      min       lq     mean   median       uq       max neval\n  125 2627.200 3486.901 4299.235 3773.301 4018.950 10090.701   100\n  250 2356.401 3383.451 4366.178 3717.751 4213.202 24441.901   100\n  500 2683.702 3489.251 4180.057 3614.950 3901.101 14384.100   100\n 1000 2254.601 3348.301 4160.581 3559.150 4019.601  9472.801   100\n```\n\n\n:::\n:::\n\n\n# References\n\n-   <https://stackoverflow.com/a/9933794>\n-   <https://stackoverflow.com/a/11316626>\n-   <https://stackoverflow.com/a/34363187>\n-   <https://stackoverflow.com/a/243342>\n-   <https://stats.stackexchange.com/a/64217>\n-   <https://stackoverflow.com/a/51992954>\n-   <https://stackoverflow.com/a/25921772>\n-   <https://stackoverflow.com/a/40416506>\n-   <https://stackoverflow.com/a/5970314>\n-   <https://gist.github.com/ashelly/5665911>\n-   <https://stackoverflow.com/a/51992954>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}