{
  "hash": "6b59dded69fc5a29ef509ad3e0c13bd4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Crowds\"\nauthor: \"[Jason Foster](mailto:jason.j.foster@gmail.com)\"\ndate: last-modified\ncategories:\n  - analysis\n  - finance\n  - r\ndraft: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nfactors_r <- c(\"SP500\") # \"SP500\" does not contain dividends\nfactors_d <- c(\"SOFR\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n# Parse web\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(xml2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_nth <- function(x, n, offset = 0) {\n  \n  result <- x[seq(offset + 1, length(x), by = n)]\n  \n  return(result)\n  \n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_mstar <- function() {\n  \n  i <- 0\n  status <- TRUE\n  names_ls <- list()\n  tickers_ls <- list()\n  types_ls <- list()\n  \n  while(status) {\n    \n    i <- i + 1\n    \n    url <- \"https://www.morningstar.com/asset-allocation-funds?page=\"\n    response <- read_html(paste0(url, i))\n    \n    table <- xml_find_all(response, \".//div[@class='topic__table-container']\")\n    \n    if (length(table) == 0) {\n      status <- FALSE\n    } else {\n      \n      names_tickers <- xml_text(xml_find_all(response, \".//a[@class='mdc-link mds-link mds-link--data-table mdc-link--no-visited']\"))\n      types <- xml_text(xml_find_all(response, \".//span[@class='mdc-data-point mdc-data-point--string mdc-string']\"))\n      \n      names_ls <- append(names_ls, list(get_nth(names_tickers, 2)))\n      tickers_ls <- append(tickers_ls, list(get_nth(names_tickers, 2, 1)))\n      types_ls <- append(types_ls, list(get_nth(types, 5, 2)))\n      \n    }\n    \n  }\n  \n  result <- data.frame(\"name\" = do.call(c, names_ls),\n                       \"ticker\" = do.call(c, tickers_ls),\n                       \"type\" = do.call(c, types_ls))\n  \n  return(result)\n  \n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmstar_df <- get_mstar()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntickers <- mstar_df[mstar_df$type == \"Tactical Allocation\", \"ticker\"]\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n# Optimization\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(CVXR)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmin_rss_optim <- function(x, y) {\n    \n    params <- Variable(ncol(x))\n    \n    obj <- Minimize(sum_squares(y - x %*% params))\n    \n    cons <- list(sum(params) == 1, params >= 0, params <= 1)\n    \n    prob <- Problem(obj, cons)\n        \n    result <- solve(prob)$getValue(params)\n    \n    return(result)\n\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# n_rows <- nrow(overlap_xts)\nresult_ls <- list()\n\n# for (i in width:n_rows) {\nfor (i in width) {\n    \n    idx <- max(i - width + 1, 1):i\n    x_subset <- overlap_x_xts[idx, ]\n    y_subset <- overlap_y_xts[idx, ]\n    params_ls <- list()\n    \n    for (j in tickers) {\n        \n        params <- t(min_rss_optim(coredata(x_subset), coredata(y_subset[ , j])))\n        params_ls <- append(params_ls, list(params))\n        \n    }\n    \n    result <- colMeans(do.call(rbind, params_ls))\n    result_ls <- append(result_ls, list(result))\n    \n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nposition <- do.call(rbind, result_ls)\n# position_xts <- xts(position, index(overlap_xts)[width:n_rows])\nposition_xts <- xts(position, tail(index(overlap_xts), 1))\ncolnames(position_xts) <- factors\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntail(position_xts)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               SP500      SOFR\n2024-02-15 0.6157411 0.3842589\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}