{
  "hash": "ed1dee868274f670a667307a5cba3eca",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Crowds\"\nauthor: \"[Jason Foster](mailto:jason.j.foster@gmail.com)\"\ndate: last-modified\ncategories:\n  - analysis\n  - finance\n  - r\ndraft: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nfactors_r <- c(\"SP500\") # \"SP500\" does not contain dividends\nfactors_d <- c(\"DTB3\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n# Parse web\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_crumb_and_cookie <- function() {\n  \n  handle <- curl::new_handle()\n  \n  headers <- c(\n    `Accept` = \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\n    `User-Agent` = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36\"\n  )\n  \n  curl::handle_setheaders(handle, .list = headers)\n  \n  response <- curl::curl_fetch_memory(\"https://query1.finance.yahoo.com/v1/test/getcrumb\", handle = handle)\n  \n  crumb <- rawToChar(response$content)\n  \n  cookies <- curl::handle_cookies(handle)\n  a1_cookie <- cookies[cookies$name == \"A1\", \"value\"]\n  \n  result <- list(\n    handle = handle,\n    crumb = crumb,\n    cookie = a1_cookie\n  )\n  \n  return(result)\n  \n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbuild_query_string <- function(params) {\n  paste0(\"?\", paste(names(params), params, sep = \"=\", collapse = \"&\"))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_yhoo <- function() {\n  \n  session <- get_crumb_and_cookie()\n  crumb <- session[[\"crumb\"]]\n  cookie <- session[[\"cookie\"]]\n  handle <- session[[\"handle\"]]\n  \n  params <- list(\n    crumb = crumb,\n    lang = \"en-US\",\n    region = \"US\",\n    formatted = \"true\",\n    corsDomain = \"finance.yahoo.com\"\n  )\n  \n  api_url <- paste0(\"https://query1.finance.yahoo.com/v1/finance/screener\", build_query_string(params))\n  \n  payload <- list(\n    size = 25,\n    offset = 0,\n    sortField = \"fundnetassets\",\n    sortType = \"DESC\",\n    quoteType = \"MUTUALFUND\",\n    topOperator = \"AND\",\n    query = list(\n      operator = \"AND\",\n      operands = list(\n        list(\n          operator = \"or\",\n          operands = list(\n            list(\n              operator = \"EQ\",\n              operands = c(\"categoryname\", \"Tactical Allocation\")\n            )\n          )\n        )\n      )\n    ),\n    userId = \"\",\n    userIdType = \"guid\"\n  )\n  \n  json_payload <- jsonlite::toJSON(payload, auto_unbox = TRUE)\n  \n  headers <- c(\n    `Content-Type` = \"application/json\",\n    `Cookie` = paste0(\"A1=\", cookie)\n  )\n  \n  curl::handle_setopt(handle, postfields = json_payload)\n  curl::handle_setheaders(handle, .list = headers)\n  \n  response <- curl::curl(api_url, handle = handle)\n  \n  result <- jsonlite::fromJSON(response)\n  \n  return(result)\n  \n}\n```\n:::\n\n\n# Optimization\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(CVXR)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmin_rss_optim <- function(x, y) {\n    \n    params <- Variable(ncol(x))\n    \n    obj <- Minimize(sum_squares(y - x %*% params))\n    \n    cons <- list(sum(params) == 1, params >= 0, params <= 1)\n    \n    prob <- Problem(obj, cons)\n        \n    result <- solve(prob)$getValue(params)\n    \n    return(result)\n\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nyhoo_ls <- get_yhoo()\nyhoo_df <- yhoo_ls[[\"finance\"]][[\"result\"]][[\"quotes\"]]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsorted_df <- yhoo_df[[1]][order(yhoo_df[[1]][[\"netAssets\"]][[\"raw\"]],\n                                yhoo_df[[1]][[\"firstTradeDateMilliseconds\"]]), ]\ntickers <- sorted_df[!duplicated(sorted_df[[\"netAssets\"]][[\"raw\"]]), \"symbol\"]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nallocations <- c(\"AOK\", \"AOM\", \"AOR\", \"AOA\")\ntickers <- c(tickers, allocations)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn_rows <- nrow(overlap_xts)\nresult_ls <- list()\nindex_ls <- list()\n\n# for (i in width:n_rows) {\nfor (i in n_rows) {\n    \n    idx <- max(i - width + 1, 1):i\n    x_subset <- coredata(overlap_x_xts[idx, ])\n    y_subset <- coredata(overlap_y_xts[idx, ])\n    params_ls <- list()\n    \n    for (j in tickers[!tickers %in% allocations]) {\n        \n        idx <- complete.cases(x_subset, y_subset[ , j])\n        x_complete <- x_subset[idx, , drop = FALSE]\n        y_complete <- y_subset[idx, j]\n        \n        if ((nrow(x_complete) > 0) && (length(y_complete) > 0)) {\n            \n            params <- t(min_rss_optim(x_complete, y_complete))\n            params_ls <- append(params_ls, list(params))\n            \n        }\n        \n    }\n    \n    if (length(params_ls) > 0) {\n        \n        result <- colMeans(do.call(rbind, params_ls), na.rm = TRUE)\n        result_ls <- append(result_ls, list(result))\n        index_ls <- append(index_ls, list(index(overlap_xts)[i]))\n        \n    }\n    \n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nposition <- do.call(rbind, result_ls)\n# position_xts <- xts(position, as.Date(do.call(rbind, index_ls)))\nposition_xts <- xts(position, tail(index(overlap_xts), 1))\ncolnames(position_xts) <- factors\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntail(position_xts)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               SP500      DTB3\n2024-11-22 0.5385463 0.4614537\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}