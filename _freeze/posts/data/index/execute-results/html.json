{
  "hash": "143b558a80cbeb5f5ee7b1cddc71da71",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Data\"\nauthor: \"[Jason Foster](mailto:jason.j.foster@gmail.com)\"\ndate: last-modified\ncategories:\n  - analysis\n  - finance\n  - python\ndraft: true\n---\n\n::: {#e276dc58 .cell execution_count=1}\n``` {.python .cell-code}\n# !pip install --index-url=https://blpapi.bloomberg.com/repository/releases/python/simple/ blpapi\nimport blpapi\nimport pandas as pd\n```\n:::\n\n\n# Static query\n\n-   <https://www.bloomberg.com/professional/support/api-library/>\n-   Page 80: <https://bloomberg.github.io/blpapi-docs/>\n\n::: {#ac1127e6 .cell execution_count=2}\n``` {.python .cell-code}\ndef create_session(host = \"localhost\", port = 8194):\n  \n  options = blpapi.SessionOptions()\n  options.setServerHost(host)\n  options.setServerPort(port)\n  \n  session = blpapi.Session(options)\n  session.start()\n  session.openService(\"//blp/refdata\")\n  \n  return session\n```\n:::\n\n\n::: {#150dc6d4 .cell execution_count=3}\n``` {.python .cell-code}\ndef process_response(event, fields, start_date = None, end_date = None):\n  \n  data_ls = []\n  \n  for msg in event:\n    \n    security_data = msg.getElement(\"securityData\")\n    \n    if (start_date):\n      \n      security = security_data.getElementAsString(\"security\")\n      field_data = security_data.getElement(\"fieldData\")\n      \n      for x in field_data:\n        \n        record = {\"security\": security, \"date\": x.getElementAsDatetime(\"date\")}\n        \n        for field in fields:\n          try:\n            record[field] = x.getElement(field).getValue()\n          except:\n            pass\n        \n        data_ls.append(record)\n        \n    else:\n      \n      for x in security_data.values():\n        \n        security = x.getElementAsString(\"security\")\n        field_data = x.getElement(\"fieldData\")\n        record = {\"security\": security}\n        \n        for field in fields:\n          try:\n            record[field] = field_data.getElement(field).getValue()\n          except:\n            pass\n        \n        data_ls.append(record)\n    \n  return pd.DataFrame(data_ls)\n```\n:::\n\n\n# Data point\n\n::: {#532eab0a .cell execution_count=4}\n``` {.python .cell-code}\ndef bdp(securities, fields):\n  \n  if isinstance(securities, str):\n    securities = [securities]\n  \n  if isinstance(fields, str):\n    fields = [fields]\n  \n  session = create_session()\n  service = session.getService(\"//blp/refdata\")\n  request = service.createRequest(\"ReferenceDataRequest\")\n  \n  for security in securities:\n    request.append(\"securities\", security)\n  \n  for field in fields:\n    request.append(\"fields\", field)\n    \n  session.sendRequest(request)\n  \n  status = True\n  result = pd.DataFrame()\n  \n  while status:\n    \n    event = session.nextEvent()\n    \n    if (event.eventType() in [blpapi.Event.RESPONSE, blpapi.Event.PARTIAL_RESPONSE]):\n      result = pd.concat([result, process_response(event, fields)], ignore_index = True)\n      \n    if (event.eventType() == blpapi.Event.RESPONSE):\n      status = False\n  \n  session.stop()\n  \n  return result\n```\n:::\n\n\n::: {#882e2a71 .cell execution_count=5}\n``` {.python .cell-code}\nsecurities = [\"IBM US Equity\", \"GOOG US Equity\", \"MSFT US Equity\", \"BA US Equity\"]\nfields = [\"MARKET_SECTOR_DES\", \"GICS_SECTOR_NAME\", \"ID_CUSIP\", \"PX_LAST\"]\n```\n:::\n\n\n::: {#079e81d6 .cell execution_count=6}\n``` {.python .cell-code}\nbdp_df = bdp(securities, fields)\nprint(bdp_df)\n```\n:::\n\n\n# Data history\n\n::: {#7b419bfb .cell execution_count=7}\n``` {.python .cell-code}\ndef bdh(securities, fields, start_date, end_date = None):\n  \n  if isinstance(securities, str):\n    securities = [securities]\n  \n  if isinstance(fields, str):\n    fields = [fields]\n  \n  session = create_session()\n  service = session.getService(\"//blp/refdata\")\n  request = service.createRequest(\"HistoricalDataRequest\")\n  \n  for security in securities:\n    request.append(\"securities\", security)\n    \n  for field in fields:\n    request.append(\"fields\", field)\n\n  request.set(\"startDate\", start_date)\n  \n  if (end_date):\n    request.set(\"endDate\", end_date)\n    \n  request.set(\"nonTradingDayFillOption\", \"ALL_CALENDAR_DAYS\") # \"NON_TRADING_WEEKDAYS\", \"ALL_CALENDAR_DAYS\", \"ACTIVE_DAYS_ONLY\"\n  request.set(\"nonTradingDayFillMethod\", \"NIL_VALUE\") # \"PREVIOUS_VALUE\", \"NIL_VALUE\" \n  \n  session.sendRequest(request)\n  \n  status = True\n  result = pd.DataFrame()\n  \n  while status:\n    \n    event = session.nextEvent()\n    \n    if (event.eventType() in [blpapi.Event.RESPONSE, blpapi.Event.PARTIAL_RESPONSE]):\n      result = pd.concat([result, process_response(event, fields, start_date, end_date)], ignore_index = True)\n    \n    if (event.eventType() == blpapi.Event.RESPONSE):\n      status = False\n      \n  session.stop()\n  \n  return result\n```\n:::\n\n\n::: {#e37be028 .cell execution_count=8}\n``` {.python .cell-code}\nfields = [\"PX_LAST\", \"PX_BID\", \"PX_ASK\"]\nstart_date = \"20231201\"\nend_date = \"20231205\"\n```\n:::\n\n\n::: {#28f5ed10 .cell execution_count=9}\n``` {.python .cell-code}\nbdh_df = bdh(securities, fields, start_date, end_date)\nprint(bdh_df)\n```\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}