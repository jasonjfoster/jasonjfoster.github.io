{
  "hash": "655d27c5644ad74048d719ae29688694",
  "result": {
    "markdown": "---\ntitle: \"Statistics\"\nauthor: \"[Jason Foster](mailto:jason.j.foster@gmail.com)\"\ndate: today\ncategories:\n  - statistics\n  - analysis\n  - r\n---\n\n\n[![](https://github.com/jjf234/roll/workflows/R-CMD-check/badge.svg)](https://github.com/jjf234/roll/actions) [![](http://www.r-pkg.org/badges/version/roll)](https://cran.r-project.org/package=roll) [![](https://codecov.io/gh/jjf234/roll/graph/badge.svg)](https://codecov.io/github/jjf234/roll) [![](http://cranlogs.r-pkg.org/badges/last-day/roll?color=brightgreen)](http://cranlogs.r-pkg.org/badges/last-day/roll) [![](http://cranlogs.r-pkg.org/badges/last-week/roll?color=brightgreen)](http://cranlogs.r-pkg.org/badges/last-week/roll) [![](http://cranlogs.r-pkg.org/badges/roll?color=brightgreen)](http://cranlogs.r-pkg.org/badges/roll) [![](http://cranlogs.r-pkg.org/badges/grand-total/roll?color=brightgreen)](http://cranlogs.r-pkg.org/badges/grand-total/roll)\n\n# Usage\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(roll)\nlibrary(microbenchmark)\noptions(microbenchmark.unit = \"us\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn_vars <- 10\nn_obs <- 1000\nweights <- 0.9 ^ (n_obs:1)\n\nx <- matrix(rnorm(n_obs * n_vars), nrow = n_obs, ncol = n_vars)\ny <- matrix(rnorm(n_obs), nrow = n_obs, ncol = 1)\nx_lgl <- x < 0\n```\n:::\n\n\n# Rolling any\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_any(x_lgl, width = 125, min_obs = 1),\n                         \"250\" = roll_any(x_lgl, width = 250, min_obs = 1),\n                         \"500\" = roll_any(x_lgl, width = 500, min_obs = 1),\n                         \"1000\" = roll_any(x_lgl, width = 1000, min_obs = 1))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 109.4 149.30 177.094 170.45 195.15 411.7   100\n  250 123.9 153.80 177.767 169.10 191.60 325.1   100\n  500 112.1 147.75 175.105 165.05 195.80 329.9   100\n 1000 122.2 151.75 194.340 176.75 207.80 823.9   100\n```\n:::\n:::\n\n\n# Rolling all\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_all(x_lgl, width = 125, min_obs = 1),\n                         \"250\" = roll_all(x_lgl, width = 250, min_obs = 1),\n                         \"500\" = roll_all(x_lgl, width = 500, min_obs = 1),\n                         \"1000\" = roll_all(x_lgl, width = 1000, min_obs = 1))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr  min     lq    mean median     uq   max neval\n  125 89.0 122.80 137.074 135.55 144.80 218.5   100\n  250 85.8 124.80 141.895 133.30 146.75 342.9   100\n  500 92.0 124.35 140.008 135.75 144.95 234.3   100\n 1000 89.4 124.70 137.962 134.10 140.75 220.1   100\n```\n:::\n:::\n\n\n# Rolling sums\n\n$$\n\\begin{aligned}\n&\\text{Expanding window} \\\\\n&\\bullet\\text{sum}_{x}\\leftarrow\\lambda\\times\\text{sum}_{x}+\\text{w}_{new}\\times\\text{x}_{new}\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{sum}_{x}\\leftarrow\\lambda\\times\\text{sum}_{x}+\\text{w}_{new}\\times\\text{x}_{new}-\\lambda\\times\\text{w}_{old}\\times\\text{x}_{old}\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_sum(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_sum(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_sum(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_sum(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr  min     lq    mean median     uq   max neval\n  125 98.8 119.95 136.555 127.95 142.25 261.7   100\n  250 91.1 117.85 135.405 124.75 145.15 328.0   100\n  500 99.7 118.20 136.366 128.35 149.20 295.0   100\n 1000 89.1 116.65 131.293 122.75 138.70 215.7   100\n```\n:::\n:::\n\n\n# Rolling products\n\n$$\n\\begin{aligned}\n&\\text{Expanding window}\\\\\n&\\bullet\\text{prod}_{w}\\leftarrow\\text{prod}_{w}\\times\\text{w}_{new}\\\\\n&\\bullet\\text{prod}_{x}\\leftarrow\\text{prod}_{x}\\times\\text{x}_{new}\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{prod}_{x}\\leftarrow\\text{prod}_{x}\\times\\text{x}_{new}/\\text{x}_{old}\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_prod(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_prod(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_prod(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_prod(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 224.3 243.25 268.897 258.20 278.00 548.9   100\n  250 223.0 240.65 260.640 257.05 272.35 386.4   100\n  500 158.1 173.75 190.158 182.55 197.20 294.4   100\n 1000 152.6 165.55 183.500 177.95 195.55 272.3   100\n```\n:::\n:::\n\n\n# Rolling means\n\n$$\n\\begin{aligned}\n&\\text{Expanding window}\\\\\n&\\bullet\\text{sum}_{w}\\leftarrow\\text{sum}_{w}+\\text{w}_{new}\\\\\n&\\bullet\\text{sum}_{x}\\leftarrow\\lambda\\times\\text{sum}_{x}+\\text{w}_{new}\\times\\text{x}_{new}\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{sum}_{x}\\leftarrow\\lambda\\times\\text{sum}_{x}+\\text{w}_{new}\\times\\text{x}_{new}-\\lambda\\times\\text{w}_{old}\\times \\text{x}_{old}\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_mean(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_mean(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_mean(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_mean(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min     lq    mean median    uq   max neval\n  125 101.7 121.45 135.053  131.9 145.1 192.2   100\n  250 100.6 122.45 137.783  131.3 141.1 409.5   100\n  500  99.1 124.00 135.235  129.9 140.0 210.2   100\n 1000  97.9 120.05 131.587  128.9 134.7 366.0   100\n```\n:::\n:::\n\n\n# Rolling minimums\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_min(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_min(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_min(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_min(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min    lq    mean median     uq   max neval\n  125 106.2 125.2 137.650 136.45 144.40 226.2   100\n  250 103.3 125.8 140.044 135.75 143.20 389.8   100\n  500 107.2 126.4 140.519 134.70 144.20 237.0   100\n 1000 117.0 130.2 143.505 140.05 147.75 236.4   100\n```\n:::\n:::\n\n\n# Rolling maximums\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_max(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_max(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_max(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_max(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 109.9 143.10 167.924 157.25 184.25 339.3   100\n  250 115.5 150.60 171.372 167.70 186.05 286.2   100\n  500 109.6 138.75 160.233 155.80 169.60 286.0   100\n 1000 107.6 141.70 167.000 154.80 181.50 376.1   100\n```\n:::\n:::\n\n\n# Rolling index of minimums\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_idxmin(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_idxmin(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_idxmin(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_idxmin(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min    lq    mean median     uq   max neval\n  125 107.5 116.9 136.652 123.05 140.00 256.0   100\n  250 103.3 115.9 133.104 120.10 130.50 325.1   100\n  500 104.0 116.8 137.644 121.90 134.20 400.2   100\n 1000 108.4 119.3 138.534 126.55 142.65 269.0   100\n```\n:::\n:::\n\n\n# Rolling index of maximums\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_idxmax(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_idxmax(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_idxmax(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_idxmax(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 102.4 116.00 137.632 123.50 136.95 321.4   100\n  250 103.8 125.95 143.361 135.15 152.30 262.4   100\n  500  99.5 113.90 131.679 120.85 133.60 265.3   100\n 1000 100.3 115.90 133.138 122.40 137.80 323.0   100\n```\n:::\n:::\n\n\n# Rolling medians\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_median(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_median(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_median(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_median(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr     min       lq      mean   median       uq     max neval\n  125  4761.9  5224.85  7398.516  5607.95  8128.40 17679.6   100\n  250  9031.8 10162.55 13871.204 10614.35 15502.50 27164.7   100\n  500 17301.2 18006.35 23287.607 19404.70 27288.45 42737.5   100\n 1000 23223.6 25107.05 32203.130 28160.65 39523.40 57024.5   100\n```\n:::\n:::\n\n\n# Rolling quantiles\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_quantile(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_quantile(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_quantile(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_quantile(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr     min       lq      mean   median       uq     max neval\n  125  4740.0  5036.65  6993.641  5408.00  7834.75 17076.2   100\n  250  8780.5  9836.30 13384.089 10613.65 15304.80 27246.3   100\n  500 16305.3 17872.80 23975.998 20459.65 29551.40 41000.9   100\n 1000 24395.9 24841.05 32893.480 29825.15 41765.40 46752.2   100\n```\n:::\n:::\n\n\n# Rolling variances\n\n$$\n\\begin{aligned}\n&\\text{Expanding window}\\\\\n&\\bullet\\text{sum}_{w}\\leftarrow\\text{sum}_{w}+\\text{w}_{new}\\\\\n&\\bullet\\text{sumsq}_{w}\\leftarrow\\text{sumsq}_{w}+\\text{w}_{new}^{2}\\\\\n&\\bullet\\text{sumsq}_{x}\\leftarrow\\lambda\\times\\text{sumsq}_{x}+\\text{w}_{new}\\times (\\text{x}_{new}-\\text{mean}_{x})(\\text{x}_{new}-\\text{mean}_{prev_x})\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{sumsq}_{x}\\leftarrow\\lambda\\times\\text{sumsq}_{x}+\\text{w}_{new}\\times (\\text{x}_{new}-\\text{mean}_{x})(\\text{x}_{new}-\\text{mean}_{prev_x})-\\\\\n&\\lambda\\times\\text{w}_{old}\\times (\\text{x}_{old}-\\text{mean}_{x})(\\text{x}_{old}-\\text{mean}_{prev_x})\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_var(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_var(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_var(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_var(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 122.1 147.95 158.831 155.35 162.20 307.2   100\n  250 118.8 144.00 157.300 151.40 161.40 410.9   100\n  500 115.2 141.05 153.360 151.30 158.20 248.8   100\n 1000 115.6 136.30 148.578 144.95 151.65 239.2   100\n```\n:::\n:::\n\n\n# Rolling standard deviations\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_sd(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_sd(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_sd(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_sd(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 113.3 145.60 160.591 157.40 169.45 252.3   100\n  250 122.4 148.65 160.883 156.80 166.65 262.6   100\n  500 115.0 144.95 158.967 155.75 164.80 384.6   100\n 1000 113.8 140.15 151.355 148.75 157.10 233.6   100\n```\n:::\n:::\n\n\n# Rolling scaling and centering\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_scale(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_scale(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_scale(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_scale(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 144.6 162.35 181.872 176.10 186.60 295.9   100\n  250 148.6 158.70 176.836 172.65 183.80 268.8   100\n  500 147.0 158.55 183.520 172.85 189.75 427.0   100\n 1000 144.0 150.20 169.861 161.00 179.70 265.9   100\n```\n:::\n:::\n\n\n# Rolling covariances\n\n$$\n\\begin{aligned}\n&\\text{Expanding window}\\\\\n&\\bullet\\text{sum}_{w}\\leftarrow\\text{sum}_{w}+\\text{w}_{new}\\\\\n&\\bullet\\text{sumsq}_{w}\\leftarrow\\text{sumsq}_{w}+\\text{w}_{new}^{2}\\\\\n&\\bullet\\text{sumsq}_{xy}\\leftarrow\\lambda\\times\\text{sumsq}_{xy}+\\text{w}_{new}\\times (\\text{x}_{new}-\\text{mean}_{x})(\\text{y}_{new}-\\text{mean}_{prev_y})\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{sumsq}_{xy}\\leftarrow\\lambda\\times\\text{sumsq}_{xy}+\\text{w}_{new}\\times (\\text{x}_{new}-\\text{mean}_{x})(\\text{y}_{new}-\\text{mean}_{prev_y})-\\\\\n&\\lambda\\times\\text{w}_{old}\\times (\\text{x}_{old}-\\text{mean}_{x})(\\text{y}_{old}-\\text{mean}_{prev_y})\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_cov(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_cov(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_cov(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_cov(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min      lq     mean  median      uq    max neval\n  125 832.4 1065.85 1216.415 1117.20 1183.65 5998.5   100\n  250 938.2 1050.30 1123.221 1104.30 1183.90 1394.3   100\n  500 918.4 1039.55 1096.597 1088.25 1160.50 1302.7   100\n 1000 847.0  987.45 1198.954 1034.25 1082.45 6408.1   100\n```\n:::\n:::\n\n\n# Rolling correlations\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_cor(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_cor(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_cor(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_cor(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr    min      lq     mean  median     uq    max neval\n  125 1073.6 1216.60 1494.950 1301.50 1371.0 6146.6   100\n  250 1059.2 1204.75 1515.300 1275.30 1347.4 6016.6   100\n  500  993.1 1194.35 1394.831 1245.15 1324.3 5789.4   100\n 1000  972.7 1134.25 1269.765 1186.10 1228.2 4834.3   100\n```\n:::\n:::\n\n\n# Rolling linear models\n\n$$\n\\begin{aligned}\n&\\text{coef}=\\text{cov}_{xx}^{-1}\\times\\text{cov}_{xy}\\\\\n&\\text{intercept}=\\text{mean}_{y}-\\text{coef}\\times\\text{mean}_{x}\\\\\n&\\text{rsq}=\\frac{\\text{coef}^{T}\\times\\text{cov}_{xx}\\times\\text{coef}}{\\text{var}_{y}}\\\\\n&\\text{var}_{resid}=\\frac{(1-\\text{rsq})(\\text{var}_{y})(\\text{sum}_{w}-\\text{sumsq}_{w}/\\text{sum}_{w})}{\\text{n}_{rows}-\\text{n}_{cols}}\\\\\n&\\text{xx}=\\text{cov}_{xx}\\times(\\text{sum}_{w}-\\text{sumsq}_{w}/\\text{sum}_{w})\\\\\n&\\text{se}_{coef}=\\sqrt{\\text{var}_{resid}\\times\\text{diag}(\\text{xx}^{-1})}\\\\\n&\\text{se}_{intercept}=\\sqrt{\\text{var}_{resid}\\left(1/\\text{sum}_{w}+\\text{mean}_{x}^{T}\\text{xx}^{-1}\\text{mean}_{x}\\right)}\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_lm(x, y, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_lm(x, y, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_lm(x, y, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_lm(x, y, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr    min      lq     mean  median      uq     max neval\n  125 3984.1 4581.95 7343.179 7848.90 9632.95 24557.8   100\n  250 3767.6 4489.20 6844.886 5320.25 9256.05 13027.8   100\n  500 3702.5 4386.10 6499.245 5396.55 8906.40 11296.9   100\n 1000 3533.2 3978.50 5996.301 4878.90 8164.40 12258.6   100\n```\n:::\n:::\n\n\n# References\n\n- <https://stackoverflow.com/a/9933794>\n- <https://stackoverflow.com/a/11316626>\n- <https://stackoverflow.com/a/34363187>\n- <https://stackoverflow.com/a/243342>\n- <https://stats.stackexchange.com/a/64217>\n- <https://stackoverflow.com/a/51992954>\n- <https://stackoverflow.com/a/25921772>\n- <https://stackoverflow.com/a/40416506>\n- <https://stackoverflow.com/a/5970314>\n- <https://gist.github.com/ashelly/5665911>\n- <https://stackoverflow.com/a/51992954>",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}