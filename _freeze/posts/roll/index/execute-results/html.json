{
  "hash": "0862dd02befdc35e7a8d684891958fe7",
  "result": {
    "markdown": "---\ntitle: \"Statistics\"\nauthor: \"[Jason Foster](mailto:jason.j.foster@gmail.com)\"\ndate: today\ncategories:\n  - statistics\n  - analysis\n  - r\n---\n\n\n[![](https://github.com/jjf234/roll/workflows/R-CMD-check/badge.svg)](https://github.com/jjf234/roll/actions) [![](http://www.r-pkg.org/badges/version/roll)](https://cran.r-project.org/package=roll) [![](https://codecov.io/gh/jjf234/roll/graph/badge.svg)](https://codecov.io/github/jjf234/roll) [![](http://cranlogs.r-pkg.org/badges/last-day/roll?color=brightgreen)](http://cranlogs.r-pkg.org/badges/last-day/roll) [![](http://cranlogs.r-pkg.org/badges/last-week/roll?color=brightgreen)](http://cranlogs.r-pkg.org/badges/last-week/roll) [![](http://cranlogs.r-pkg.org/badges/roll?color=brightgreen)](http://cranlogs.r-pkg.org/badges/roll) [![](http://cranlogs.r-pkg.org/badges/grand-total/roll?color=brightgreen)](http://cranlogs.r-pkg.org/badges/grand-total/roll)\n\n# Usage\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(roll)\nlibrary(microbenchmark)\noptions(microbenchmark.unit = \"us\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn_vars <- 10\nn_obs <- 1000\nweights <- 0.9 ^ (n_obs:1)\n\nx <- matrix(rnorm(n_obs * n_vars), nrow = n_obs, ncol = n_vars)\ny <- matrix(rnorm(n_obs), nrow = n_obs, ncol = 1)\nx_lgl <- x < 0\n```\n:::\n\n\n# Rolling any\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_any(x_lgl, width = 125, min_obs = 1),\n                         \"250\" = roll_any(x_lgl, width = 250, min_obs = 1),\n                         \"500\" = roll_any(x_lgl, width = 500, min_obs = 1),\n                         \"1000\" = roll_any(x_lgl, width = 1000, min_obs = 1))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 115.9 135.40 154.959 149.75 173.10 231.8   100\n  250 112.3 137.45 162.303 159.50 171.45 797.6   100\n  500 108.4 137.05 154.277 152.45 165.00 249.8   100\n 1000  92.4 129.45 147.559 144.15 167.70 224.3   100\n```\n:::\n:::\n\n\n# Rolling all\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_all(x_lgl, width = 125, min_obs = 1),\n                         \"250\" = roll_all(x_lgl, width = 250, min_obs = 1),\n                         \"500\" = roll_all(x_lgl, width = 500, min_obs = 1),\n                         \"1000\" = roll_all(x_lgl, width = 1000, min_obs = 1))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min    lq    mean median     uq   max neval\n  125 121.4 145.2 165.172 164.80 179.85 303.1   100\n  250 123.0 145.2 163.905 163.55 178.00 233.8   100\n  500 113.6 138.7 163.590 163.00 182.00 398.5   100\n 1000 117.3 138.5 156.606 154.25 171.30 208.0   100\n```\n:::\n:::\n\n\n# Rolling sums\n\n$$\n\\begin{aligned}\n&\\text{Expanding window} \\\\\n&\\bullet\\text{sum}_{x}\\leftarrow\\lambda\\times\\text{sum}_{x}+\\text{w}_{new}\\times\\text{x}_{new}\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{sum}_{x}\\leftarrow\\lambda\\times\\text{sum}_{x}+\\text{w}_{new}\\times\\text{x}_{new}-\\lambda\\times\\text{w}_{old}\\times\\text{x}_{old}\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_sum(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_sum(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_sum(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_sum(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125  99.2 115.85 127.267 122.80 134.80 200.7   100\n  250 100.6 113.25 125.246 118.45 130.80 251.1   100\n  500  90.2 113.45 123.926 119.40 130.75 206.5   100\n 1000  91.1 111.05 122.297 116.25 128.25 318.3   100\n```\n:::\n:::\n\n\n# Rolling products\n\n$$\n\\begin{aligned}\n&\\text{Expanding window}\\\\\n&\\bullet\\text{prod}_{w}\\leftarrow\\text{prod}_{w}\\times\\text{w}_{new}\\\\\n&\\bullet\\text{prod}_{x}\\leftarrow\\text{prod}_{x}\\times\\text{x}_{new}\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{prod}_{x}\\leftarrow\\text{prod}_{x}\\times\\text{x}_{new}/\\text{x}_{old}\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_prod(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_prod(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_prod(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_prod(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 219.0 247.95 268.572 260.65 284.50 375.6   100\n  250 221.2 246.35 274.705 257.45 279.45 593.3   100\n  500 167.8 177.25 201.781 190.25 209.15 437.3   100\n 1000 148.1 170.15 187.870 179.80 202.25 271.9   100\n```\n:::\n:::\n\n\n# Rolling means\n\n$$\n\\begin{aligned}\n&\\text{Expanding window}\\\\\n&\\bullet\\text{sum}_{w}\\leftarrow\\text{sum}_{w}+\\text{w}_{new}\\\\\n&\\bullet\\text{sum}_{x}\\leftarrow\\lambda\\times\\text{sum}_{x}+\\text{w}_{new}\\times\\text{x}_{new}\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{sum}_{x}\\leftarrow\\lambda\\times\\text{sum}_{x}+\\text{w}_{new}\\times\\text{x}_{new}-\\lambda\\times\\text{w}_{old}\\times \\text{x}_{old}\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_mean(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_mean(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_mean(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_mean(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 112.5 123.35 139.701 131.45 144.55 269.1   100\n  250 107.5 122.65 146.559 129.15 159.90 335.0   100\n  500 112.1 122.50 138.988 129.10 149.05 242.0   100\n 1000 101.5 116.65 134.377 122.15 141.30 258.2   100\n```\n:::\n:::\n\n\n# Rolling minimums\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_min(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_min(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_min(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_min(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 108.6 141.95 163.239 151.10 179.55 339.3   100\n  250  93.9 140.15 156.887 152.80 166.20 282.7   100\n  500 108.6 141.25 160.178 154.75 168.65 285.3   100\n 1000 114.5 140.65 167.044 157.35 180.10 436.1   100\n```\n:::\n:::\n\n\n# Rolling maximums\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_max(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_max(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_max(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_max(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 107.8 124.95 142.167 134.65 148.05 471.4   100\n  250 110.0 126.55 140.650 138.25 149.50 200.1   100\n  500  99.8 126.50 144.583 139.55 156.70 316.9   100\n 1000 106.9 129.65 144.226 142.90 154.95 211.3   100\n```\n:::\n:::\n\n\n# Rolling index of minimums\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_idxmin(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_idxmin(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_idxmin(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_idxmin(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 101.4 116.85 137.319 126.65 139.20 297.7   100\n  250 101.7 117.50 131.449 122.80 130.40 364.5   100\n  500 104.5 118.60 140.364 126.65 148.00 410.9   100\n 1000 105.1 122.45 139.048 130.75 144.95 269.9   100\n```\n:::\n:::\n\n\n# Rolling index of maximums\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_idxmax(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_idxmax(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_idxmax(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_idxmax(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr  min     lq    mean median     uq   max neval\n  125 98.6 115.25 139.598 122.10 134.70 295.7   100\n  250 95.2 115.60 135.641 122.95 139.45 347.6   100\n  500 94.5 115.55 141.160 127.10 150.80 326.1   100\n 1000 93.3 117.40 139.866 123.95 144.95 304.3   100\n```\n:::\n:::\n\n\n# Rolling medians\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_median(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_median(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_median(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_median(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr     min       lq      mean  median       uq     max neval\n  125  5150.8  6186.55  9590.901  8158.8 11555.20 21904.0   100\n  250  9575.1 12801.10 17507.619 15964.3 22563.05 32051.7   100\n  500 18805.7 25644.75 31608.130 32638.2 37725.75 46514.8   100\n 1000 24095.7 35539.65 43471.627 45041.2 50207.05 60347.9   100\n```\n:::\n:::\n\n\n# Rolling quantiles\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_quantile(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_quantile(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_quantile(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_quantile(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr     min       lq      mean   median       uq     max neval\n  125  4755.5  6039.35  9361.454  7867.55 11459.10 22137.4   100\n  250  9364.7 12753.30 18613.935 17492.10 25031.55 35136.4   100\n  500 18003.4 26979.00 32917.533 32386.55 38485.70 63617.2   100\n 1000 28402.1 36385.60 44732.429 46574.50 49840.60 81582.4   100\n```\n:::\n:::\n\n\n# Rolling variances\n\n$$\n\\begin{aligned}\n&\\text{Expanding window}\\\\\n&\\bullet\\text{sum}_{w}\\leftarrow\\text{sum}_{w}+\\text{w}_{new}\\\\\n&\\bullet\\text{sumsq}_{w}\\leftarrow\\text{sumsq}_{w}+\\text{w}_{new}^{2}\\\\\n&\\bullet\\text{sumsq}_{x}\\leftarrow\\lambda\\times\\text{sumsq}_{x}+\\text{w}_{new}\\times (\\text{x}_{new}-\\text{mean}_{x})(\\text{x}_{new}-\\text{mean}_{prev_x})\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{sumsq}_{x}\\leftarrow\\lambda\\times\\text{sumsq}_{x}+\\text{w}_{new}\\times (\\text{x}_{new}-\\text{mean}_{x})(\\text{x}_{new}-\\text{mean}_{prev_x})-\\\\\n&\\lambda\\times\\text{w}_{old}\\times (\\text{x}_{old}-\\text{mean}_{x})(\\text{x}_{old}-\\text{mean}_{prev_x})\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_var(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_var(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_var(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_var(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 128.4 155.75 182.052 180.05 195.30 419.0   100\n  250 129.2 154.70 181.915 175.15 202.80 285.5   100\n  500 115.6 153.30 178.855 173.55 194.85 316.9   100\n 1000 103.3 148.45 173.415 168.45 191.90 279.2   100\n```\n:::\n:::\n\n\n# Rolling standard deviations\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_sd(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_sd(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_sd(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_sd(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min     lq    mean median    uq   max neval\n  125 134.7 167.65 188.983  179.3 205.8 336.8   100\n  250 142.6 160.55 188.298  175.0 197.5 424.4   100\n  500 142.0 163.40 185.809  175.9 200.5 358.0   100\n 1000 113.3 158.60 187.717  174.6 212.8 302.0   100\n```\n:::\n:::\n\n\n# Rolling scaling and centering\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_scale(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_scale(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_scale(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_scale(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr   min     lq    mean median     uq    max neval\n  125 181.9 218.60 251.402 245.25 275.95  390.4   100\n  250 160.1 218.10 252.482 237.80 271.10  533.5   100\n  500 164.3 211.65 249.751 240.05 266.55 1054.5   100\n 1000 165.1 209.45 235.390 228.20 253.15  495.1   100\n```\n:::\n:::\n\n\n# Rolling covariances\n\n$$\n\\begin{aligned}\n&\\text{Expanding window}\\\\\n&\\bullet\\text{sum}_{w}\\leftarrow\\text{sum}_{w}+\\text{w}_{new}\\\\\n&\\bullet\\text{sumsq}_{w}\\leftarrow\\text{sumsq}_{w}+\\text{w}_{new}^{2}\\\\\n&\\bullet\\text{sumsq}_{xy}\\leftarrow\\lambda\\times\\text{sumsq}_{xy}+\\text{w}_{new}\\times (\\text{x}_{new}-\\text{mean}_{x})(\\text{y}_{new}-\\text{mean}_{prev_y})\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{sumsq}_{xy}\\leftarrow\\lambda\\times\\text{sumsq}_{xy}+\\text{w}_{new}\\times (\\text{x}_{new}-\\text{mean}_{x})(\\text{y}_{new}-\\text{mean}_{prev_y})-\\\\\n&\\lambda\\times\\text{w}_{old}\\times (\\text{x}_{old}-\\text{mean}_{x})(\\text{y}_{old}-\\text{mean}_{prev_y})\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_cov(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_cov(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_cov(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_cov(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr    min      lq     mean  median      uq    max neval\n  125  987.6 1198.85 1900.643 1282.65 1469.50 9750.1   100\n  250 1015.7 1189.00 1615.321 1290.50 1451.55 9055.2   100\n  500  987.7 1158.70 1475.664 1230.20 1347.90 7613.0   100\n 1000  962.7 1102.15 1421.479 1176.40 1284.90 4656.9   100\n```\n:::\n:::\n\n\n# Rolling correlations\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_cor(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_cor(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_cor(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_cor(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr    min      lq     mean  median     uq     max neval\n  125  977.9 1222.55 1417.275 1294.35 1383.8  5953.1   100\n  250 1027.8 1186.25 1442.641 1260.20 1362.2  6681.8   100\n  500 1032.6 1178.90 1423.558 1249.70 1330.0 11414.2   100\n 1000  976.9 1145.30 1324.186 1200.05 1259.6  7715.9   100\n```\n:::\n:::\n\n\n# Rolling linear models\n\n$$\n\\begin{aligned}\n&\\text{coef}=\\text{cov}_{xx}^{-1}\\times\\text{cov}_{xy}\\\\\n&\\text{intercept}=\\text{mean}_{y}-\\text{coef}\\times\\text{mean}_{x}\\\\\n&\\text{rsq}=\\frac{\\text{coef}^{T}\\times\\text{cov}_{xx}\\times\\text{coef}}{\\text{var}_{y}}\\\\\n&\\text{var}_{resid}=\\frac{(1-\\text{rsq})(\\text{var}_{y})(\\text{sum}_{w}-\\text{sumsq}_{w}/\\text{sum}_{w})}{\\text{n}_{rows}-\\text{n}_{cols}}\\\\\n&\\text{xx}=\\text{cov}_{xx}\\times(\\text{sum}_{w}-\\text{sumsq}_{w}/\\text{sum}_{w})\\\\\n&\\text{se}_{coef}=\\sqrt{\\text{var}_{resid}\\times\\text{diag}(\\text{xx}^{-1})}\\\\\n&\\text{se}_{intercept}=\\sqrt{\\text{var}_{resid}\\left(1/\\text{sum}_{w}+\\text{mean}_{x}^{T}\\text{xx}^{-1}\\text{mean}_{x}\\right)}\n\\end{aligned}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- microbenchmark(\"125\" = roll_lm(x, y, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_lm(x, y, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_lm(x, y, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_lm(x, y, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: microseconds\n expr    min      lq     mean  median      uq     max neval\n  125 3235.9 5508.00 7297.390 6138.90 9031.55 23427.4   100\n  250 3487.0 5464.80 6866.324 6005.35 7508.45 16909.4   100\n  500 3216.0 5029.50 6465.669 5662.10 7295.70 12724.0   100\n 1000 3050.9 4700.25 6298.018 5364.55 6823.20 16044.2   100\n```\n:::\n:::\n\n\n# References\n\n- https://stackoverflow.com/a/9933794\n- https://stackoverflow.com/a/11316626\n- https://stackoverflow.com/a/34363187\n- https://stackoverflow.com/a/243342\n- https://stats.stackexchange.com/a/64217\n- https://stackoverflow.com/a/51992954\n- https://stackoverflow.com/a/25921772\n- https://stackoverflow.com/a/40416506\n- https://stackoverflow.com/a/5970314\n- https://gist.github.com/ashelly/5665911\n- https://stackoverflow.com/a/51992954",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}