{
  "hash": "6b432ffe783da3017efc41ee1f1361f9",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Crowds\"\nauthor: \"[Jason Foster](mailto:jason.j.foster@gmail.com)\"\ndate: last-modified\ncategories:\n  - analysis\n  - finance\n  - python\ndraft: true\neditor: \n  mode: source\n---\n\n::: {#082f9367 .cell execution_count=1}\n``` {.python .cell-code}\nfactors_r = [\"SP500\"] # \"SP500\" does not contain dividends\nfactors_d = [\"DTB3\"]\n```\n:::\n\n\n\n\n\n\n# Parse web\n\n::: {#08d7ac92 .cell execution_count=4}\n``` {.python .cell-code}\nimport yfscreen as yfs\n```\n:::\n\n\n::: {#f97af7dd .cell execution_count=5}\n``` {.python .cell-code}\nfilters = [\"eq\", [\"categoryname\", \"Tactical Allocation\"]]\nquery = yfs.create_query(filters)\npayload = yfs.create_payload(\"mutualfund\", query, 250)\ndata = yfs.get_data(payload)\n```\n:::\n\n\n::: {#5e089432 .cell execution_count=6}\n``` {.python .cell-code}\nsorted_df = data.sort_values(by = [\"netAssets.raw\", \"firstTradeDateMilliseconds\"])\ntickers = sorted_df.loc[~data[\"netAssets.raw\"].duplicated(), \"symbol\"].tolist()\n```\n:::\n\n\n::: {#63e26b25 .cell execution_count=7}\n``` {.python .cell-code}\n# allocations = [\"AOK\", \"AOM\", \"AOR\", \"AOA\"]\n# tickers = tickers + allocations\n```\n:::\n\n\n# Optimization\n\n::: {#c1908294 .cell execution_count=8}\n``` {.python .cell-code}\nimport json\nimport cvxpy as cp\n```\n:::\n\n\n::: {#6d39a0e6 .cell execution_count=9}\n``` {.python .cell-code}\ndef min_rss_optim(x, y):\n    \n  w = cp.Variable(x.shape[1])\n    \n  objective = cp.Minimize(cp.sum_squares(y - x @ w))\n    \n  constraints = [cp.sum(w) == 1, w >= 0, w <= 1]\n    \n  problem = cp.Problem(objective, constraints)\n  problem.solve()\n    \n  return w.value\n```\n:::\n\n\n\n\n::: {#bbbd5cab .cell execution_count=11}\n``` {.python .cell-code}\ndef pnl(x):\n  return np.nanprod(1 + x) - 1\n```\n:::\n\n\n::: {#30b770d7 .cell execution_count=12}\n``` {.python .cell-code}\nperformance_df = returns_df.rolling(width, min_periods = 1).apply(pnl, raw = False)\n```\n:::\n\n\n::: {#7a3f6ecf .cell execution_count=13}\n``` {.python .cell-code}\nn_rows = overlap_df.shape[0]\nresult_ls = []\nindex_ls = []\n\n# for i in range(width - 1, n_rows):\nfor i in range(n_rows - 1, n_rows):\n  \n  idx = range(max(i - width + 1, 0), i + 1)\n  x_subset = overlap_x_df.iloc[idx]\n  y_subset = overlap_y_df.iloc[idx]\n  params_ls = []\n  tickers_ls = []\n  performance_ls = []\n  \n  # for j in [ticker for ticker in tickers if ticker not in allocations]:\n  for j in tickers:\n    \n    idx = ~x_subset.isna().any(axis = 1) & ~y_subset[j].isna()\n    x_complete = x_subset.loc[idx]\n    y_complete = y_subset.loc[idx, j]\n    \n    if (x_complete.shape[0] > 0) and (y_complete.size > 0):\n        \n      params = min_rss_optim(x_complete.values, y_complete.values)\n      params_ls.append(params)\n      \n      tickers_ls.append(j)\n      \n      performance_ls.append(performance_df[j].iloc[i])\n\n  if params_ls:\n    \n    result = pd.DataFrame(params_ls, index = tickers_ls)\n    result[\"performance\"] = performance_ls\n    \n    result_ls.append(result)\n    index_ls.append(overlap_x_df.index[i])\n```\n:::\n\n\n::: {#fe83dddf .cell execution_count=14}\n``` {.python .cell-code}\n# json.dump([x.to_dict() for x in result_ls], open(\"result_ls.json\", \"w\"))\n# json.dump([x.isoformat() for x in index_ls], open(\"index_ls.json\", \"w\"))\n```\n:::\n\n\n# Performance\n\n::: {#02ad669a .cell execution_count=15}\n``` {.python .cell-code}\n# result_ls = [pd.DataFrame(x) for x in json.load(open(\"result_ls.json\", \"r\"))]\n# index_ls = [pd.Timestamp(x) for x in json.load(open(\"index_ls.json\", \"r\"))]\n```\n:::\n\n\n::: {#46166933 .cell execution_count=16}\n``` {.python .cell-code}\ndef quantile_cut(x):\n  \n  result = pd.qcut(\n    -x,\n    q = [0, 0.25, 0.5, 0.75, 1],\n    labels = [\"Q1\", \"Q2\", \"Q3\", \"Q4\"]\n  )\n  \n  return result\n```\n:::\n\n\n::: {#30ae3d21 .cell execution_count=17}\n``` {.python .cell-code}\nn_rows = len(result_ls)\nscore_ls = []\n\nfor i in range(n_rows):\n  \n  score_df = pd.DataFrame(result_ls[i])\n  score_df.columns = factors + [\"performance\"]\n  \n  score_df[\"date\"] = index_ls[i]\n  score_df[\"quantile\"] = quantile_cut(score_df[\"performance\"])\n  \n  score = score_df.groupby([\"date\", \"quantile\"], observed = True).agg(\n    weight = (factors[0], \"mean\"),\n    performance = (\"performance\", \"mean\")\n  ).reset_index()\n  \n  overall = pd.DataFrame({\n    \"date\": [index_ls[i]],\n    \"quantile\": [\"Overall\"],\n    \"weight\": [score_df[factors[0]].mean()],\n    \"performance\": [score_df[\"performance\"].mean()]\n  })\n  \n  score = pd.concat([score, overall], ignore_index = True)\n  \n  score_ls.append(score)\n```\n:::\n\n\n::: {#77d247f5 .cell execution_count=18}\n``` {.python .cell-code}\nscore_df = pd.concat(score_ls, ignore_index = True)\nprint(score_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        date quantile    weight  performance\n0 2025-09-19       Q1  0.961389     0.105395\n1 2025-09-19       Q2  0.762925     0.074934\n2 2025-09-19       Q3  0.549677     0.057135\n3 2025-09-19       Q4  0.288999     0.028890\n4 2025-09-19  Overall  0.640747     0.066589\n```\n:::\n:::\n\n\n::: {#f66616b9 .cell execution_count=19}\n``` {.python .cell-code}\n# score_df.to_json(\"score_df.json\", date_format = \"iso\")\n```\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}