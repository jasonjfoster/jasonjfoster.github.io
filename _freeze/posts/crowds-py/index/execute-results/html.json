{
  "hash": "ed9627174658a408caf351c0fc6f87bc",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Crowds\"\nauthor: \"[Jason Foster](mailto:jason.j.foster@gmail.com)\"\ndate: last-modified\ncategories:\n  - analysis\n  - finance\n  - python\ndraft: true\n---\n\n::: {#b9333cfe .cell execution_count=1}\n``` {.python .cell-code}\nfactors_r = [\"SP500\"] # \"SP500\" does not contain dividends\nfactors_d = [\"DTB3\"]\n```\n:::\n\n\n::: {#b0785837 .cell execution_count=2}\n``` {.python .cell-code}\nexec(open(\"../helper-levels.py\").read())\n```\n:::\n\n\n::: {#0fa5254c .cell execution_count=3}\n``` {.python .cell-code}\nwidth = 20 * 3\n```\n:::\n\n\n# Parse web\n\n::: {#1b4b976e .cell execution_count=4}\n``` {.python .cell-code}\nimport requests\n```\n:::\n\n\n::: {#29e6894e .cell execution_count=5}\n``` {.python .cell-code}\nclass Filter:\n  \n  @staticmethod\n  def process(filter):\n  \n    operator, operands = filter\n    \n    result = {\n      \"operator\": operator,\n      \"operands\": [\n          {\"operator\": operand[0], \"operands\": operand[1]} for operand in operands\n      ],\n    }\n    \n    return result\n```\n:::\n\n\n::: {#cbc972f3 .cell execution_count=6}\n``` {.python .cell-code}\nclass Query:\n  \n  @staticmethod\n  def create(filters = [(\"or\", [(\"eq\", [\"region\", \"us\"])])],\n             top_operator = \"and\"):\n    \n    result = {\n      \"operator\": top_operator,\n      \"operands\": [Filter.process(filter) for filter in filters],\n    }\n\n    return result\n```\n:::\n\n\n::: {#4ff80480 .cell execution_count=7}\n``` {.python .cell-code}\nclass Payload:\n  \n  @staticmethod\n  def create(quote_type = \"equity\", query = Query.create(),\n             size = 25, offset = 0,\n             sort_field = None, sort_type = None,\n             top_operator = \"and\"):\n    \n    result = {\n      \"includeFields\": None,  # unable to modify the result\n      \"offset\": offset,\n      \"query\": query,\n      \"quoteType\": quote_type,\n      \"size\": size,\n      \"sortField\": sort_field,\n      \"sortType\": sort_type,\n      \"topOperator\": top_operator,\n    }\n    \n    return result\n```\n:::\n\n\n::: {#3de2a301 .cell execution_count=8}\n``` {.python .cell-code}\nclass Session:\n  \n  @staticmethod\n  def get():\n    \n    session = requests.Session()\n    \n    api_url = \"https://query1.finance.yahoo.com/v1/test/getcrumb\"\n    \n    headers = {\n      \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\n      \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36\",\n    }\n    \n    session.headers.update(headers)\n  \n    response = session.get(api_url)\n    \n    crumb = response.text.strip()\n    cookies = session.cookies.get_dict()\n  \n    result = {\n      \"handle\": session,\n      \"crumb\": crumb,\n      \"cookies\": cookies\n    }\n    \n    return result\n```\n:::\n\n\n::: {#c5999e56 .cell execution_count=9}\n``` {.python .cell-code}\nclass Screen:\n  \n  # @staticmethod\n  # def encode(params):\n  #   \n  #   result = \"?\" + \"&\".join(f\"{key}={value}\" for key, value in params.items())\n  #   \n  #   return result\n  \n  @staticmethod\n  def get(payload = Payload.create()):\n  \n    session = Session.get()\n    crumb = session[\"crumb\"]\n    cookies = session[\"cookies\"]\n    handle = session[\"handle\"]\n  \n    params = {\n      \"crumb\": crumb,\n      \"lang\": \"en-US\",\n      \"region\": \"US\",\n      \"formatted\": \"true\",\n      \"corsDomain\": \"finance.yahoo.com\",\n    }\n  \n    api_url = \"https://query1.finance.yahoo.com/v1/finance/screener\" # + Screen.encode(params)\n  \n    headers = {\n      # \"Content-Type\": \"application/json\",\n      \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36\",\n    }\n  \n    max_size = 250\n    size = payload[\"size\"]\n    offset = payload[\"offset\"]\n    \n    result_cols = set()\n    result_ls = []\n\n    while size > 0:\n  \n      chunk_size = min(size, max_size)\n      payload[\"size\"] = chunk_size\n      payload[\"offst\"] = offset\n  \n      for key, value in cookies.items():\n        handle.cookies.set(key, value)\n  \n      response = handle.post(api_url, params = params, json = payload, headers = headers)\n  \n      result = response.json()\n      result_df = result[\"finance\"][\"result\"][0][\"quotes\"]\n  \n      if (result_df is not None):\n        \n        result_df = pd.json_normalize(result_df)\n        \n        result_ls.append(result_df)\n        result_cols.update(result_df.columns)\n  \n        size -= chunk_size\n        offset += chunk_size\n  \n      else:\n        size = 0\n        \n    result_cols = list(result_cols)\n    \n    for i in range(len(result_ls)):\n      \n      x = result_ls[i]\n      cols_na = set(result_cols) - set(x.columns)\n      \n      for j in cols_na:\n        x[j] = None\n        \n      result_ls[i] = x[result_cols]\n    \n    result = pd.concat(result_ls, ignore_index = True)\n    \n    return result\n```\n:::\n\n\n# Optimization\n\n::: {#8d9ff1fe .cell execution_count=10}\n``` {.python .cell-code}\nimport json\nimport cvxpy as cp\n```\n:::\n\n\n::: {#f3f04f78 .cell execution_count=11}\n``` {.python .cell-code}\ndef min_rss_optim(x, y):\n    \n    w = cp.Variable(x.shape[1])\n    \n    objective = cp.Minimize(cp.sum_squares(y - x @ w))\n    \n    constraints = [cp.sum(w) == 1, w >= 0, w <= 1]\n    \n    problem = cp.Problem(objective, constraints)\n    problem.solve()\n    \n    return w.value\n```\n:::\n\n\n::: {#83dd94dc .cell execution_count=12}\n``` {.python .cell-code}\nfilters = [(\"or\", [(\"eq\", [\"categoryname\", \"Tactical Allocation\"])])]\nquery = Query.create(filters)\npayload = Payload.create(quote_type = \"mutualfund\", query = query, size = 250,\n                         sort_field = \"fundnetassets\")\nscreen = Screen.get(payload)\n```\n:::\n\n\n::: {#2cbbf7de .cell execution_count=13}\n``` {.python .cell-code}\nsorted_df = screen.sort_values(by = [\"netAssets.raw\", \"firstTradeDateMilliseconds\"])\ntickers = sorted_df.loc[~sorted_df[\"netAssets.raw\"].duplicated(), \"symbol\"].tolist()\n```\n:::\n\n\n::: {#7e74d1fd .cell execution_count=14}\n``` {.python .cell-code}\n# allocations = [\"AOK\", \"AOM\", \"AOR\", \"AOA\"]\n# tickers = tickers + allocations\n```\n:::\n\n\n::: {#2fcfd7ed .cell execution_count=15}\n``` {.python .cell-code}\nexec(open(\"../helper-prices.py\").read())\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\n2 Failed downloads:\n['MQRIX']: JSONDecodeError('Expecting value: line 1 column 1 (char 0)')\n['COTZX']: ReadTimeout(ReadTimeoutError(\"HTTPSConnectionPool(host='query2.finance.yahoo.com', port=443): Read timed out. (read timeout=10)\"))\n```\n:::\n:::\n\n\n::: {#1d6e9a84 .cell execution_count=16}\n``` {.python .cell-code}\noverlap_df = returns_df.rolling(scale[\"overlap\"],min_periods = 1).mean()\n\n# overlap_df = overlap_df.dropna()\noverlap_x_df = overlap_df[factors]\noverlap_y_df = overlap_df[tickers]\n# overlap_z_df = overlap_df[allocations]\n```\n:::\n\n\n::: {#05bad55a .cell execution_count=17}\n``` {.python .cell-code}\ndef pnl(x):\n    return np.nanprod(1 + x) - 1\n```\n:::\n\n\n::: {#a4b66081 .cell execution_count=18}\n``` {.python .cell-code}\nperformance_df = returns_df.rolling(width, min_periods = 1).apply(pnl, raw = False)\n```\n:::\n\n\n::: {#d367ba0c .cell execution_count=19}\n``` {.python .cell-code}\nn_rows = overlap_df.shape[0]\nresult_ls = []\nindex_ls = []\n\n# for i in range(width - 1, n_rows):\nfor i in range(n_rows - 1, n_rows):\n  \n  idx = range(max(i - width + 1, 0), i + 1)\n  x_subset = overlap_x_df.iloc[idx]\n  y_subset = overlap_y_df.iloc[idx]\n  params_ls = []\n  tickers_ls = []\n  performance_ls = []\n  \n  # for j in [ticker for ticker in tickers if ticker not in allocations]:\n  for j in tickers:\n    \n    idx = ~x_subset.isna().any(axis = 1) & ~y_subset[j].isna()\n    x_complete = x_subset.loc[idx]\n    y_complete = y_subset.loc[idx, j]\n    \n    if (x_complete.shape[0] > 0) and (y_complete.size > 0):\n        \n      params = min_rss_optim(x_complete.values, y_complete.values)\n      params_ls.append(params)\n      \n      tickers_ls.append(j)\n      \n      performance_ls.append(performance_df[j].iloc[i])\n\n  if params_ls:\n    \n    result = pd.DataFrame(params_ls, index = tickers_ls)\n    result[\"performance\"] = performance_ls\n    \n    result_ls.append(result)\n    index_ls.append(overlap_x_df.index[i])\n```\n:::\n\n\n::: {#ecad7b7a .cell execution_count=20}\n``` {.python .cell-code}\n# json.dump([x.to_dict() for x in result_ls], open(\"result_ls.json\", \"w\"))\n# json.dump([x.isoformat() for x in index_ls], open(\"index_ls.json\", \"w\"))\n```\n:::\n\n\n# Performance\n\n::: {#de537fb4 .cell execution_count=21}\n``` {.python .cell-code}\n# result_ls = [pd.DataFrame(x) for x in json.load(open(\"result_ls.json\", \"r\"))]\n# index_ls = [pd.Timestamp(x) for x in json.load(open(\"index_ls.json\", \"r\"))]\n```\n:::\n\n\n::: {#5d503749 .cell execution_count=22}\n``` {.python .cell-code}\ndef quantile_cut(x):\n  \n  result = pd.qcut(\n    -x,\n    q = [0, 0.25, 0.5, 0.75, 1],\n    labels = [\"Q1\", \"Q2\", \"Q3\", \"Q4\"]\n  )\n  \n  return result\n```\n:::\n\n\n::: {#1e3ce2c8 .cell execution_count=23}\n``` {.python .cell-code}\nn_rows = len(result_ls)\nscore_ls = []\n\nfor i in range(n_rows):\n  \n  score_df = pd.DataFrame(result_ls[i])\n  score_df.columns = factors + [\"performance\"]\n  \n  score_df[\"date\"] = index_ls[i]\n  score_df[\"quantile\"] = quantile_cut(score_df[\"performance\"])\n  \n  score = score_df.groupby([\"date\", \"quantile\"]).agg(\n    weight = (factors[0], \"mean\"),\n    performance = (\"performance\", \"mean\")\n  ).reset_index()\n  \n  overall = pd.DataFrame({\n    \"date\": [index_ls[i]],\n    \"quantile\": [\"Overall\"],\n    \"weight\": [score_df[factors[0]].mean()],\n    \"performance\": [score_df[\"performance\"].mean()]\n  })\n  \n  score = pd.concat([score, overall], ignore_index = True)\n  \n  score_ls.append(score)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\jason\\AppData\\Local\\Temp\\ipykernel_25240\\382256377.py:12: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  score = score_df.groupby([\"date\", \"quantile\"]).agg(\n```\n:::\n:::\n\n\n::: {#b6aa2d96 .cell execution_count=24}\n``` {.python .cell-code}\npd.concat(score_ls, ignore_index = True)\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>quantile</th>\n      <th>weight</th>\n      <th>performance</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2025-02-06</td>\n      <td>Q1</td>\n      <td>0.608921</td>\n      <td>0.046580</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2025-02-06</td>\n      <td>Q2</td>\n      <td>0.617932</td>\n      <td>0.021064</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2025-02-06</td>\n      <td>Q3</td>\n      <td>0.575941</td>\n      <td>0.013268</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2025-02-06</td>\n      <td>Q4</td>\n      <td>0.648212</td>\n      <td>-0.002578</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2025-02-06</td>\n      <td>Overall</td>\n      <td>0.612704</td>\n      <td>0.019917</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}