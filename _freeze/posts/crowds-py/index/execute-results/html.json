{
  "hash": "924121d6cad2fe5b81c90d46d59ad591",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Crowds\"\nauthor: \"[Jason Foster](mailto:jason.j.foster@gmail.com)\"\ndate: last-modified\ncategories:\n  - analysis\n  - finance\n  - python\ndraft: true\n---\n\n::: {#3514bbc9 .cell execution_count=1}\n``` {.python .cell-code}\nimport requests\nfrom lxml import html\nimport numpy as np\nimport pandas as pd\nimport pandas_datareader as pdr\n```\n:::\n\n\n::: {#a86710b9 .cell execution_count=2}\n``` {.python .cell-code}\nfactors_r = [\"SP500\"] # \"SP500\" does not contain dividends\nfactors_d = [\"SOFR\"]\nfactors = factors_r + factors_d\nwidth = 20 * 3\nscale = {\"periods\": 252, \"overlap\": 5}\n```\n:::\n\n\n::: {#0bc272a4 .cell execution_count=3}\n``` {.python .cell-code}\nlevels_df = pdr.get_data_fred(factors, start = \"1900-01-01\")\n```\n:::\n\n\n::: {#9cb1e591 .cell execution_count=4}\n``` {.python .cell-code}\nreturns_df = levels_df.apply(lambda x: np.log(x).diff() if x.name in factors_r else -x.diff() / 100)\noverlap_df = returns_df.rolling(scale[\"overlap\"], min_periods = 1).mean()\nreturns_df = pd.concat([returns_df, overlap_df], keys = [\"returns\", \"overlap\"], axis = 1)\n```\n:::\n\n\n::: {#bae69afa .cell execution_count=5}\n``` {.python .cell-code}\nimport os\nimport cvxpy as cp\n```\n:::\n\n\n::: {#55edcdbf .cell execution_count=6}\n``` {.python .cell-code}\ndef get_nth(x, n, offset = 0):\n    \n    result = x[offset::n]\n    \n    return result\n```\n:::\n\n\n::: {#3aa05232 .cell execution_count=7}\n``` {.python .cell-code}\ndef get_text(x, n = 0):\n    \n    result_ls = []\n    \n    for i in x:\n      \n        if (len(i) == 0):\n            result_ls.append(i.text_content()) # types\n        else:\n            result_ls.append(i[n].text_content()) # names and tickers\n    \n    return result_ls\n```\n:::\n\n\n::: {#9c68ae2c .cell execution_count=8}\n``` {.python .cell-code}\ndef get_mstar():\n    \n    i = 0\n    status = True\n    names_ls = []\n    tickers_ls = []\n    types_ls = []\n\n    while status:\n\n        i += 1\n\n        url = \"https://www.morningstar.com/asset-allocation-funds?page=\" + str(i)\n        response = requests.get(url)\n        \n        tree = html.fromstring(response.content)\n        table = tree.xpath(\"//div[@class='topic__table-container']\")\n\n        if (len(table) == 0):\n            status = False\n        else:\n\n            names_tickers = tree.xpath(\"//a[@class='mdc-link mds-link mds-link--data-table mdc-link--no-visited']\")\n            types = tree.xpath(\"//span[@class='mdc-data-point mdc-data-point--string mdc-string']\")\n            \n        names_ls.extend(get_text(get_nth(names_tickers, 2)))\n        tickers_ls.extend(get_text(get_nth(names_tickers, 2, 1)))\n        types_ls.extend(get_text(get_nth(types, 5, 2)))\n\n    result = pd.DataFrame({\n      \"name\": names_ls,\n      \"ticker\": tickers_ls,\n      \"type\": types_ls\n    })\n    \n    return result\n```\n:::\n\n\n::: {#af886904 .cell execution_count=9}\n``` {.python .cell-code}\nmstar_df = get_mstar()\n```\n:::\n\n\n::: {#e8d50863 .cell execution_count=10}\n``` {.python .cell-code}\ntickers = mstar_df.loc[mstar_df[\"type\"] == \"Tactical Allocation\", \"ticker\"].tolist()\nprices_df = pdr.get_data_tiingo(tickers, start = \"1900-01-01\", api_key = os.getenv(\"TIINGO_API_KEY\"))\nprices_df = prices_df.pivot_table(index = \"date\", columns = \"symbol\", values = \"adjClose\") \\\n    .tz_localize(None)\nprices_df.sort_index(axis = 0, inplace = True)\ntickers = prices_df.columns\n```\n:::\n\n\n::: {#c628f62b .cell execution_count=11}\n``` {.python .cell-code}\nreturns_cols = [(\"returns\", i) for i in tickers]\noverlap_cols = [(\"overlap\", i) for i in tickers]\nreturns_df[returns_cols] = np.log(prices_df).diff()\nreturns_df[overlap_cols] = returns_df[returns_cols].rolling(scale[\"overlap\"], min_periods = 1).mean()\nreturns_df.sort_index(axis = 1, inplace = True)\n```\n:::\n\n\n::: {#d312ce19 .cell execution_count=12}\n``` {.python .cell-code}\noverlap_df = returns_df.dropna()[\"overlap\"]\noverlap_x_df = returns_df.dropna()[\"overlap\"][factors][-width:]\noverlap_y_df = returns_df.dropna()[\"overlap\"][tickers][-width:]\n```\n:::\n\n\n::: {#244b26a6 .cell execution_count=13}\n``` {.python .cell-code}\ndef pnl(x):\n    return np.nanprod(1 + x) - 1\n```\n:::\n\n\n# Optimization\n\n::: {#93e49b57 .cell execution_count=14}\n``` {.python .cell-code}\ndef min_rss_optim(x, y):\n    \n    w = cp.Variable(x.shape[1])\n    \n    objective = cp.Minimize(cp.sum_squares(y - x @ w))\n    \n    constraints = [cp.sum(w) == 1, w >= 0, w <= 1]\n    \n    problem = cp.Problem(objective, constraints)\n    problem.solve()\n    \n    return w.value\n```\n:::\n\n\n::: {#153474ce .cell execution_count=15}\n``` {.python .cell-code}\n# n_rows = overlap_df.shape[0]\nresult_ls = []\n\n# for i in range(width - 1, n_rows):\nfor i in range(width - 1, width):\n  \n  idx = range(max(i - width + 1, 0), i + 1)\n  x_subset = overlap_x_df.iloc[idx]\n  y_subset = overlap_y_df.iloc[idx]\n  params_ls = []\n  \n  for j in tickers:\n  \n    params = min_rss_optim(x_subset.values, y_subset.loc[:, j].values)\n    params_ls.append(params)\n  \n  result_ls.append(np.mean(params_ls, axis = 0))\n```\n:::\n\n\n::: {#bdfd6a5d .cell execution_count=16}\n``` {.python .cell-code}\n# position_df = pd.DataFrame(result_ls, index = overlap_df.index[(width - 1):],\n#                            columns = factors)\nposition_df = pd.DataFrame(result_ls, index = [overlap_df.index[-1]],\n                           columns = factors)\n```\n:::\n\n\n::: {#cf67b157 .cell execution_count=17}\n``` {.python .cell-code}\nposition_df.tail()\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>SP500</th>\n      <th>SOFR</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2024-02-13</th>\n      <td>0.672291</td>\n      <td>0.327709</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}