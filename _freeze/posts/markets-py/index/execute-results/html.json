{
  "hash": "6c81860189f53631a32a92effd950004",
  "result": {
    "markdown": "---\ntitle: \"Markets\"\nauthor: \"[Jason Foster](mailto:jason.j.foster@gmail.com)\"\ndate: last-modified\ncategories:\n  - analysis\n  - finance\n  - python\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\nimport pandas_datareader as pdr\nfrom scipy.stats import norm, chi2\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nfactors_r = [\"SP500\", \"DTWEXAFEGS\"] # \"SP500\" does not contain dividends; note: \"DTWEXM\" discontinued as of Jan 2020\nfactors_d = [\"DGS10\", \"BAMLH0A0HYM2\"]\nfactors = factors_r + factors_d\nwidth = 252\nscale = {\"periods\": 252, \"overlap\": 5}\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n-   <https://pandas-datareader.readthedocs.io/en/latest/remote_data.html>\n\n\n::: {.cell}\n\n```{.python .cell-code}\nlevels_df = pdr.get_data_fred(factors, start = \"1900-01-01\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nreturns_df = levels_df.apply(lambda x: np.log(x).diff() if x.name in factors_r else -x.diff() / 100)\noverlap_df = returns_df.rolling(scale[\"overlap\"], min_periods = 1).mean()\nreturns_df = pd.concat([returns_df, overlap_df], keys = [\"returns\", \"overlap\"], axis = 1)\n```\n:::\n\n\n# Price momentum\n\nOne month reversal and 2-12 month momentum are two ends of the spectrum. The general trend indicates that positive acceleration leads to reversals or negative acceleration leads to rebounds. An unsustainable acceleration leading to reversal can reconcile the one-month reversal and 2-12 month momentum. The key is that it implies that acceleration is not sustainable.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# \"Momentum, Acceleration, and Reversal\"\ndef pnl(x):\n    return np.nanprod(1 + x) - 1\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\norder = 20\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nmomentum_df = returns_df[\"returns\"].shift(order).rolling(width - order, min_periods = 1).apply(pnl, raw = False).dropna()\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=768}\n:::\n:::\n\n\n# Time-series score\n\nSuppose we are looking at $n$ independent and identically distributed random variables, $X_{1},X_{2},\\ldots,X_{n}$. Since they are iid, each random variable $X_{i}$ has to have the same mean, which we will call $\\mu$, and variance, which we will call $\\sigma^{2}$:\n\n$$\n\\begin{aligned}\n\\mathrm{E}\\left(X_{i}\\right)&=\\mu\\\\\n\\mathrm{Var}\\left(X_{i}\\right)&=\\sigma^{2}\n\\end{aligned}\n$$\n\nLet's suppose we want to look at the average value of our $n$ random variables:\n\n$$\n\\begin{aligned}\n\\bar{X}=\\frac{X_{1}+X_{2}+\\cdots+X_{n}}{n}=\\left(\\frac{1}{n}\\right)\\left(X_{1}+X_{2}+\\cdots+X_{n}\\right)\n\\end{aligned}\n$$\n\nWe want to find the expected value and variance of the average, $\\mathrm{E}\\left(\\bar{X}\\right)$ and $\\mathrm{Var}\\left(\\bar{X}\\right)$.\n\n## Expected value\n\n$$\n\\begin{aligned}\n\\mathrm{E}\\left(\\bar{X}\\right)&=\\mathrm{E}\\left[\\left(\\frac{1}{n}\\right)\\left(X_{1}+X_{2}+\\cdots+X_{n}\\right)\\right]\\\\\n&=\\left(\\frac{1}{n}\\right)\\mathrm{E}\\left(X_{1}+X_{2}+\\cdots+X_{n}\\right)\\\\\n&=\\left(\\frac{1}{n}\\right)\\left(n\\mu\\right)\\\\\n&=\\mu\n\\end{aligned}\n$$\n\n## Variance\n\n$$\n\\begin{aligned}\n\\mathrm{Var}\\left(\\bar{X}\\right)&=\\mathrm{Var}\\left[\\left(\\frac{1}{n}\\right)\\left(X_{1}+X_{2}+\\cdots+X_{n}\\right)\\right]\\\\\n&=\\left(\\frac{1}{n}\\right)^{2}\\mathrm{Var}\\left(X_{1}+X_{2}+\\cdots+X_{n}\\right)\\\\\n&=\\left(\\frac{1}{n}\\right)^{2}\\left(n\\sigma^{2}\\right)\\\\\n&=\\frac{\\sigma^{2}}{n}\n\\end{aligned}\n$$\n\n-   <http://scipp.ucsc.edu/~haber/ph116C/iid.pdf>\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef risk(x):\n    \n    n_rows = sum(~np.isnan(x))\n        \n    if n_rows > 1:\n        result = np.sqrt(np.nansum(x ** 2) / (n_rows - 1))\n    else:\n        result = np.nan\n        \n    return result\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# volatility scale only\nscore_df = (momentum_df / momentum_df.rolling(width, min_periods = 1).apply(risk, raw = False)).dropna()\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# overall_df = score_df.mean(axis = 1)\n# overall_df = overall_df / overall_df.rolling(width, min_periods = 1).apply(risk, raw = False)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# score_df.insert(loc = 0, column = \"Overall\", value = overall_df)\n# score_df = score_df.dropna()\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=768}\n:::\n:::\n\n\n# Outlier detection\n\nOutliers are defined the regression residuals that fall below $Q_{1}âˆ’1.5\\times IQR$ or above $Q_{3}+1.5\\times IQR$:\n\n-   <https://stats.stackexchange.com/a/1153>\n-   <https://stats.stackexchange.com/a/108951>\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef outliers(z):\n  \n    n_cols = z.shape[1]\n    result_ls = []\n\n    for j in range(n_cols):\n      \n        y = z.iloc[:, j]\n\n        if (n_cols == 0):\n            x = sm.add_constant(range(len(y)))\n        else:\n            x = sm.add_constant(z.drop(z.columns[j], axis = 1))\n\n        coef = sm.WLS(y, x).fit().params\n        x = x.iloc[:, 1:]\n\n        predict = coef[0] + np.dot(x, coef[1:])\n        resid = y - predict\n\n        lower = resid.quantile(0.25)\n        upper = resid.quantile(0.75)\n        iqr = upper - lower\n\n        total = y[(resid < lower - 1.5 * iqr) | (resid > upper + 1.5 * iqr)]\n        \n        total = pd.DataFrame({\"date\": total.index, \"symbol\": total.name, \"values\": total})\n        result_ls.append(total)\n\n    result = pd.concat(result_ls, ignore_index = True)\n    result = result.pivot_table(index = \"date\", columns = \"symbol\", values = \"values\")\n\n    return result\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\noutliers_df = outliers(score_df)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=768}\n:::\n:::\n\n\n# Granger causality\n\n$$\n\\begin{aligned}\n\\left(R\\hat{\\beta}-r\\right)^\\mathrm{T}\\left(R\\hat{V}R^\\mathrm{T}\\right)^{-1}\\left(R\\hat{\\beta}-r\\right)\\xrightarrow\\quad\\chi_{Q}^{2}\n\\end{aligned}\n$$\n\n-   <https://github.com/cran/lmtest/blob/master/R/waldtest.R>\n-   <https://en.wikipedia.org/wiki/Wald_test#Test(s)_on_multiple_parameters>\n-   <https://math.stackexchange.com/a/1591946>\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef granger_test(x, y, order):\n    \n    # compute lagged observations\n    lag_x = x.shift(order)\n    lag_y = y.shift(order)\n    \n    # collect series\n    df = pd.DataFrame({\"x\": x, \"y\": y, \"lag_x\": lag_x, \"lag_y\": lag_y})\n    x_mat = sm.add_constant(df[[\"lag_y\", \"lag_x\"]])\n    y_mat = df[\"y\"]\n    \n    # fit full model\n    fit = sm.WLS(y_mat, x_mat, missing = \"drop\").fit()\n    \n    R = np.array([0, 0, 1])\n    coef = fit.params\n    r = 0 # technically a matrix (see Stack Exchange)\n    \n    matmul = np.dot(R, coef) - r\n    matmul_mid = np.linalg.inv(np.atleast_2d(np.dot(R, np.dot(fit.cov_params(), R.T))))\n    wald = np.dot(matmul.T, np.dot(matmul_mid, matmul))\n    \n    result = 1 - chi2.cdf(wald, 1)\n    \n    return float(result)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndef roll_lead_lag(x, y, width, order, p_value):\n  \n    n_rows = len(x)\n    x_name = x.name\n    y_name = y.name\n    result_ls = []\n\n    for i in range(width - 1, n_rows):\n      \n        idx = range(max(i - width + 1, 0), i + 1)\n\n        x_y = granger_test(x.iloc[idx], y.iloc[idx], order)\n        y_x = granger_test(y.iloc[idx], x.iloc[idx], order)\n\n        x_y_status = (x_y < p_value) and (y_x > p_value)\n        y_x_status = (x_y > p_value) and (y_x < p_value)\n\n        result_ls.append({x_name: x_y_status, y_name: y_x_status})\n\n    result = pd.DataFrame(result_ls, index = x.index[(width - 1):])\n\n    return result\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\np_value = 0.05\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nscore_x_df = score_df.loc[:, \"SP500\"]\nscore_y_df = score_df.loc[:, \"DGS10\"]\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nlead_lag_df = roll_lead_lag(score_x_df, score_y_df, width, order, p_value)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-1.png){width=576}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}