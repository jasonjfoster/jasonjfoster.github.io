[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "jjf234.github.io",
    "section": "",
    "text": "Cloud\n\n\n\ncomputing\n\n\npython\n\n\nr\n\n\n\n\n\n\n\nJason Foster\n\n\nNov 6, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nSoftware\n\n\n\ndevelopment\n\n\nr\n\n\n\n\n\n\n\nJason Foster\n\n\nNov 6, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nOptimization\n\n\n\nalgorithms\n\n\nr\n\n\n\n\n\n\n\nJason Foster\n\n\nNov 6, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nStatistics\n\n\n\nalgorithms\n\n\nr\n\n\n\n\n\n\n\nJason Foster\n\n\nNov 6, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Software development",
    "section": "",
    "text": "System setup\n\nhttps://r-pkgs.org/setup.html\n\n# environment variable: PATH=c:\\rtools40\\usr\\bin\n\n\nDevelopment workflow\n\nhttps://r-pkgs.org/workflows101.html\n\n\nRcppArmadillo::RcppArmadillo.package.skeleton(name = \"anRpackage\",\n                                              path = \".\",\n                                              example_code = FALSE)\n\n\n\nObject documentation\n\nhttps://r-pkgs.org/man.html\n\n\nroxygen2::roxygenize()\n\n\n\nCompiled code\n\nhttps://r-pkgs.org/src.html\n\n\nRcpp::compileAttributes(verbose = TRUE)\ntools::package_native_routine_registration_skeleton(\".\", character_only = FALSE)\n\n\n\nGit and GitHub\n\nhttps://r-pkgs.org/git.html\n\nTell Git your name and email address:\ngit config --global user.name \"YOUR FULL NAME\"\ngit config --global user.email \"YOUR EMAIL ADDRESS\"\nIf needed, generate an SSH key: RStudio &gt; Tools &gt; Git/SVN &gt; Create RSA Key…\nThen give GitHub your SSH public key: GitHub &gt; SSH and GPG Keys &gt; New SSH key\ngit remote add origin git@github.com:hadley/r-pkgs.git\ngit push -u origin master\nAlso, if needed, change the URL of remote ‘origin’:\ngit remote set-url origin git@github.com:hadley/r-foo.git\n\n\nAutomated checking\n\nhttps://r-pkgs.org/r-cmd-check.html\n\n\nusethis::use_github_action(\"check-standard\")\nusethis::use_github_action(\"test-coverage\")"
  },
  {
    "objectID": "posts/dev/dev.html",
    "href": "posts/dev/dev.html",
    "title": "Software development",
    "section": "",
    "text": "System setup\n\nhttps://r-pkgs.org/setup.html\n\n# environment variable: PATH=c:\\rtools40\\usr\\bin\n\n\nDevelopment workflow\n\nhttps://r-pkgs.org/workflows101.html\n\n\nRcppArmadillo::RcppArmadillo.package.skeleton(name = \"anRpackage\",\n                                              path = \".\",\n                                              example_code = FALSE)\n\n\n\nObject documentation\n\nhttps://r-pkgs.org/man.html\n\n\nroxygen2::roxygenize()\n\n\n\nCompiled code\n\nhttps://r-pkgs.org/src.html\n\n\nRcpp::compileAttributes(verbose = TRUE)\ntools::package_native_routine_registration_skeleton(\".\", character_only = FALSE)\n\n\n\nGit and GitHub\n\nhttps://r-pkgs.org/git.html\n\nTell Git your name and email address:\ngit config --global user.name \"YOUR FULL NAME\"\ngit config --global user.email \"YOUR EMAIL ADDRESS\"\nIf needed, generate an SSH key: RStudio &gt; Tools &gt; Git/SVN &gt; Create RSA Key…\nThen give GitHub your SSH public key: GitHub &gt; SSH and GPG Keys &gt; New SSH key\ngit remote add origin git@github.com:hadley/r-pkgs.git\ngit push -u origin master\nAlso, if needed, change the URL of remote ‘origin’:\ngit remote set-url origin git@github.com:hadley/r-foo.git\n\n\nAutomated checking\n\nhttps://r-pkgs.org/r-cmd-check.html\n\n\nusethis::use_github_action(\"check-standard\")\nusethis::use_github_action(\"test-coverage\")"
  },
  {
    "objectID": "posts/cloud/index.html",
    "href": "posts/cloud/index.html",
    "title": "Cloud",
    "section": "",
    "text": "# EC2 &gt; Network & Security &gt; Key Pairs &gt; Create Key Pair &gt; *.pem\n# PuTTYgen &gt; Load an existing private key file &gt; Save private key &gt; *.ppk\n# Host Name: ec2-user@ec2-1-23-456-789.us-east-2.compute.amazonaws.com \n# Connection &gt; SSH &gt; Auth & WinSCP &gt; Auth &gt; Private key file for authentication\n    \nsudo yum update\n\n\n\n# Amazon Linux 2\nwget https://repo.anaconda.com/archive/Anaconda3-2023.03-Linux-x86_64.sh\n\nbash Anaconda3-2023.03-Linux-x86_64.sh\n# then close and re-open current shell\n# https://pypi.org/project/ipython/#history\n# https://stackoverflow.com/a/76521018\n# https://stackoverflow.com/a/77117477\npip install 'ipython==7.34.0' --force-reinstall\nipython\nfrom IPython.lib import passwd\npasswd(\"12345\")\n# sha1:asdfasdf:asfasdfasdf\nexit()\njupyter notebook --generate-config \nvi ~/.jupyter/jupyter_notebook_config.py\n\n# [i]\nc = get_config()  # Get the config object.\n# c.NotebookApp.certfile = u'/home/ubuntu/ssl/cert.pem' # path to the certificate we generated\n# c.NotebookApp.keyfile = u'/home/ubuntu/ssl/cert.key' # path to the certificate key we generated\nc.NotebookApp.ip = '0.0.0.0' # serve notebooks locally\nc.NotebookApp.open_browser = False # do not open a browser window by default when using notebooks.\nc.NotebookApp.password = 'sha1:asdfasdf:asfasdfasdf'\n# [ESC][:wq][ENTER]\n# nohup jupyter notebook\nnohup jupyter lab\n# then close and re-open current shell\njupyter nbconvert --to python &lt;notebook&gt;.ipynb\nsudo service crond start\ncrontab -e\n# [i]\n# https://crontab.guru/\n# * * * * * /home/ec2-user/anaconda3/bin/python /home/ec2-user/&lt;notebook&gt;.py\n# [ESC][:wq][ENTER]\n# http://1.23.456.789:8888\n\n\n\n\nSetup: https://aws.amazon.com/blogs/big-data/running-r-on-aws/\n\n# install R\nsudo su\n# yum install -y R # Amazon Linux\n# amazon-linux-extras list\nsudo amazon-linux-extras install R3.4 # Amazon Linux 2\n# https://posit.co/download/rstudio-server/\n# install RStudio Server 1.2.5019 (2019-11-01)\nwget https://download2.rstudio.org/server/centos6/x86_64/rstudio-server-rhel-1.2.5019-x86_64.rpm\nyum install rstudio-server-rhel-1.2.5019-x86_64.rpm\nrm rstudio-server-rhel-1.2.5019-x86_64.rpm\n\n# https://posit.co/download/shiny-server/\n# install Shiny Server (2019-09-09)\nR -e \"install.packages('shiny', repos = 'http://cran.rstudio.com/')\"\nwget https://download3.rstudio.org/centos6.3/x86_64/shiny-server-1.5.12.933-x86_64.rpm\nyum install --nogpgcheck shiny-server-1.5.12.933-x86_64.rpm\nrm shiny-server-1.5.12.933-x86_64.rpm\n# add user(s)\nuseradd -m jjf234\nsudo passwd jjf234 # prompt to enter password\n# sudo /opt/shiny-server/bin/deploy-example user-dirs\n# mkdir ~/ShinyApps\n# sudo cp -R /opt/shiny-server/samples/sample-apps/hello ~/ShinyApps\n\n# need to create '/ShinyApps' under '/ec2-user' and then subfolders with code\n# e.g.: /home/ec2-user/ShinyApps/hello\n# install devtools\nsudo yum install libcurl-devel\nsudo yum install openssl-devel\nsudo yum install libxml2-devel\nR -e \"install.packages('devtools', repos = 'http://cran.rstudio.com/')\"\n\n# install RcppParallel\nR -e \"install.packages('RcppParallel', repos = 'http://cran.rstudio.com/')\"\n\n# install RcppArmadillo\nR -e \"install.packages('RcppArmadillo', repos = 'http://cran.rstudio.com/')\"\n\n# install other packages\nR -e \"install.packages(c('data.table', 'xts', 'testthat', 'microbenchmark'),\nrepos = 'http://cran.rstudio.com/')\"\n\n# install roll\nR -e \"devtools::install_github('jjf234/roll')\"\n# http://1.23.456.789:8787/\n# http://1.23.456.789:3838/ec2-user/hello/"
  },
  {
    "objectID": "posts/cloud/index.html#secure-shell",
    "href": "posts/cloud/index.html#secure-shell",
    "title": "Cloud",
    "section": "",
    "text": "# EC2 &gt; Network & Security &gt; Key Pairs &gt; Create Key Pair &gt; *.pem\n# PuTTYgen &gt; Load an existing private key file &gt; Save private key &gt; *.ppk\n# Host Name: ec2-user@ec2-1-23-456-789.us-east-2.compute.amazonaws.com \n# Connection &gt; SSH &gt; Auth & WinSCP &gt; Auth &gt; Private key file for authentication\n    \nsudo yum update"
  },
  {
    "objectID": "posts/cloud/index.html#jupyter-server",
    "href": "posts/cloud/index.html#jupyter-server",
    "title": "Cloud",
    "section": "",
    "text": "# Amazon Linux 2\nwget https://repo.anaconda.com/archive/Anaconda3-2023.03-Linux-x86_64.sh\n\nbash Anaconda3-2023.03-Linux-x86_64.sh\n# then close and re-open current shell\n# https://pypi.org/project/ipython/#history\n# https://stackoverflow.com/a/76521018\n# https://stackoverflow.com/a/77117477\npip install 'ipython==7.34.0' --force-reinstall\nipython\nfrom IPython.lib import passwd\npasswd(\"12345\")\n# sha1:asdfasdf:asfasdfasdf\nexit()\njupyter notebook --generate-config \nvi ~/.jupyter/jupyter_notebook_config.py\n\n# [i]\nc = get_config()  # Get the config object.\n# c.NotebookApp.certfile = u'/home/ubuntu/ssl/cert.pem' # path to the certificate we generated\n# c.NotebookApp.keyfile = u'/home/ubuntu/ssl/cert.key' # path to the certificate key we generated\nc.NotebookApp.ip = '0.0.0.0' # serve notebooks locally\nc.NotebookApp.open_browser = False # do not open a browser window by default when using notebooks.\nc.NotebookApp.password = 'sha1:asdfasdf:asfasdfasdf'\n# [ESC][:wq][ENTER]\n# nohup jupyter notebook\nnohup jupyter lab\n# then close and re-open current shell\njupyter nbconvert --to python &lt;notebook&gt;.ipynb\nsudo service crond start\ncrontab -e\n# [i]\n# https://crontab.guru/\n# * * * * * /home/ec2-user/anaconda3/bin/python /home/ec2-user/&lt;notebook&gt;.py\n# [ESC][:wq][ENTER]\n# http://1.23.456.789:8888"
  },
  {
    "objectID": "posts/cloud/index.html#rstudio-server",
    "href": "posts/cloud/index.html#rstudio-server",
    "title": "Cloud",
    "section": "",
    "text": "Setup: https://aws.amazon.com/blogs/big-data/running-r-on-aws/\n\n# install R\nsudo su\n# yum install -y R # Amazon Linux\n# amazon-linux-extras list\nsudo amazon-linux-extras install R3.4 # Amazon Linux 2\n# https://posit.co/download/rstudio-server/\n# install RStudio Server 1.2.5019 (2019-11-01)\nwget https://download2.rstudio.org/server/centos6/x86_64/rstudio-server-rhel-1.2.5019-x86_64.rpm\nyum install rstudio-server-rhel-1.2.5019-x86_64.rpm\nrm rstudio-server-rhel-1.2.5019-x86_64.rpm\n\n# https://posit.co/download/shiny-server/\n# install Shiny Server (2019-09-09)\nR -e \"install.packages('shiny', repos = 'http://cran.rstudio.com/')\"\nwget https://download3.rstudio.org/centos6.3/x86_64/shiny-server-1.5.12.933-x86_64.rpm\nyum install --nogpgcheck shiny-server-1.5.12.933-x86_64.rpm\nrm shiny-server-1.5.12.933-x86_64.rpm\n# add user(s)\nuseradd -m jjf234\nsudo passwd jjf234 # prompt to enter password\n# sudo /opt/shiny-server/bin/deploy-example user-dirs\n# mkdir ~/ShinyApps\n# sudo cp -R /opt/shiny-server/samples/sample-apps/hello ~/ShinyApps\n\n# need to create '/ShinyApps' under '/ec2-user' and then subfolders with code\n# e.g.: /home/ec2-user/ShinyApps/hello\n# install devtools\nsudo yum install libcurl-devel\nsudo yum install openssl-devel\nsudo yum install libxml2-devel\nR -e \"install.packages('devtools', repos = 'http://cran.rstudio.com/')\"\n\n# install RcppParallel\nR -e \"install.packages('RcppParallel', repos = 'http://cran.rstudio.com/')\"\n\n# install RcppArmadillo\nR -e \"install.packages('RcppArmadillo', repos = 'http://cran.rstudio.com/')\"\n\n# install other packages\nR -e \"install.packages(c('data.table', 'xts', 'testthat', 'microbenchmark'),\nrepos = 'http://cran.rstudio.com/')\"\n\n# install roll\nR -e \"devtools::install_github('jjf234/roll')\"\n# http://1.23.456.789:8787/\n# http://1.23.456.789:3838/ec2-user/hello/"
  },
  {
    "objectID": "posts/dev/index.html",
    "href": "posts/dev/index.html",
    "title": "Software",
    "section": "",
    "text": "System setup\n# environment variable: PATH=c:\\rtools&lt;123&gt;\\usr\\bin\n\n\nGit and GitHub\ngit config --global user.name \"&lt;NAME&gt;\"\ngit config --global user.email \"&lt;EMAIL&gt;\"\nIf needed, generate an SSH key: RStudio &gt; Tools &gt; Git/SVN &gt; Create RSA Key…\nThen give GitHub your SSH public key: GitHub &gt; SSH and GPG Keys &gt; New SSH key\n# ...or create a new repository on the command line\necho \"# &lt;REPO&gt;\" &gt;&gt; README.md\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin git@github.com:&lt;OWNER&gt;/&lt;REPO&gt;.git\ngit push -u origin main\n# ...or push an existing repository from the command line\ngit remote add origin git@github.com:&lt;OWNER&gt;/&lt;REPO&gt;.git\ngit branch -M main\ngit push -u origin main\n# git remote set-url origin git@github.com:&lt;OWNER&gt;/&lt;REPO&gt;.git\n\n\nDevelopment workflow\n\nRcppArmadillo::RcppArmadillo.package.skeleton(name = \"anRpackage\",\n                                              path = \".\",\n                                              example_code = FALSE)\n\n\n\nCompiled code\n\nRcpp::compileAttributes(verbose = TRUE)\ntools::package_native_routine_registration_skeleton(\".\", character_only = FALSE)\n\n\n\nObject documentation\n\nroxygen2::roxygenize()\n\n\n\nAutomated checking\n\nusethis::use_github_action(\"check-standard\")\nusethis::use_github_action(\"test-coverage\")"
  },
  {
    "objectID": "posts/roll/index.html",
    "href": "posts/roll/index.html",
    "title": "Statistics",
    "section": "",
    "text": "Usage\n\nlibrary(roll)\nlibrary(microbenchmark)\noptions(microbenchmark.unit = \"us\")\n\n\nn_vars &lt;- 10\nn_obs &lt;- 1000\nweights &lt;- 0.9 ^ (n_obs:1)\n\nx &lt;- matrix(rnorm(n_obs * n_vars), nrow = n_obs, ncol = n_vars)\ny &lt;- matrix(rnorm(n_obs), nrow = n_obs, ncol = 1)\nx_lgl &lt;- x &lt; 0\n\n\n\nRolling any\n\nresult &lt;- microbenchmark(\"125\" = roll_any(x_lgl, width = 125, min_obs = 1),\n                         \"250\" = roll_any(x_lgl, width = 250, min_obs = 1),\n                         \"500\" = roll_any(x_lgl, width = 500, min_obs = 1),\n                         \"1000\" = roll_any(x_lgl, width = 1000, min_obs = 1))\nprint(result)\n\nUnit: microseconds\n expr   min     lq    mean median     uq    max neval\n  125 100.9 131.50 147.534 141.50 155.35  282.1   100\n  250 116.9 132.75 156.166 141.95 154.95 1119.2   100\n  500  93.2 127.35 143.660 138.70 152.95  217.2   100\n 1000 102.6 126.10 139.524 135.45 147.30  227.3   100\n\n\n\n\nRolling all\n\nresult &lt;- microbenchmark(\"125\" = roll_all(x_lgl, width = 125, min_obs = 1),\n                         \"250\" = roll_all(x_lgl, width = 250, min_obs = 1),\n                         \"500\" = roll_all(x_lgl, width = 500, min_obs = 1),\n                         \"1000\" = roll_all(x_lgl, width = 1000, min_obs = 1))\nprint(result)\n\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 102.6 129.15 144.509 139.25 149.20 374.0   100\n  250  98.3 130.90 146.548 139.65 150.65 282.4   100\n  500  97.1 128.70 142.922 137.25 149.90 257.9   100\n 1000 108.4 129.65 142.897 136.30 152.70 236.6   100\n\n\n\n\nRolling sums\n\\[\n\\begin{aligned}\n&\\text{Expanding window} \\\\\n&\\bullet\\text{sum}_{x}\\leftarrow\\lambda\\times\\text{sum}_{x}+\\text{w}_{new}\\times\\text{x}_{new}\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{sum}_{x}\\leftarrow\\lambda\\times\\text{sum}_{x}+\\text{w}_{new}\\times\\text{x}_{new}-\\lambda\\times\\text{w}_{old}\\times\\text{x}_{old}\n\\end{aligned}\n\\]\n\nresult &lt;- microbenchmark(\"125\" = roll_sum(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_sum(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_sum(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_sum(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125  97.3 116.45 131.576 127.45 140.80 200.8   100\n  250 100.1 115.95 129.606 123.90 132.90 382.3   100\n  500  97.3 114.85 126.365 121.65 131.85 241.8   100\n 1000  93.4 114.50 123.485 120.95 129.85 177.9   100\n\n\n\n\nRolling products\n\\[\n\\begin{aligned}\n&\\text{Expanding window}\\\\\n&\\bullet\\text{prod}_{w}\\leftarrow\\text{prod}_{w}\\times\\text{w}_{new}\\\\\n&\\bullet\\text{prod}_{x}\\leftarrow\\text{prod}_{x}\\times\\text{x}_{new}\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{prod}_{x}\\leftarrow\\text{prod}_{x}\\times\\text{x}_{new}/\\text{x}_{old}\n\\end{aligned}\n\\]\n\nresult &lt;- microbenchmark(\"125\" = roll_prod(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_prod(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_prod(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_prod(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 220.9 236.35 271.061  257.5 284.10 526.5   100\n  250 222.6 245.10 278.764  259.4 281.00 620.1   100\n  500 151.8 177.50 201.508  187.4 213.60 545.5   100\n 1000 147.3 172.00 197.124  184.3 206.15 575.2   100\n\n\n\n\nRolling means\n\\[\n\\begin{aligned}\n&\\text{Expanding window}\\\\\n&\\bullet\\text{sum}_{w}\\leftarrow\\text{sum}_{w}+\\text{w}_{new}\\\\\n&\\bullet\\text{sum}_{x}\\leftarrow\\lambda\\times\\text{sum}_{x}+\\text{w}_{new}\\times\\text{x}_{new}\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{sum}_{x}\\leftarrow\\lambda\\times\\text{sum}_{x}+\\text{w}_{new}\\times\\text{x}_{new}-\\lambda\\times\\text{w}_{old}\\times \\text{x}_{old}\n\\end{aligned}\n\\]\n\nresult &lt;- microbenchmark(\"125\" = roll_mean(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_mean(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_mean(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_mean(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125  96.2 118.45 130.005 126.20 136.00 194.1   100\n  250  95.5 117.95 132.266 127.50 140.05 187.7   100\n  500 100.8 116.95 125.618 121.80 130.45 177.5   100\n 1000  98.2 113.55 126.878 118.35 130.75 408.7   100\n\n\n\n\nRolling minimums\n\nresult &lt;- microbenchmark(\"125\" = roll_min(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_min(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_min(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_min(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 107.9 131.30 156.383 143.05 171.30 315.1   100\n  250 114.1 133.45 148.953 142.00 155.15 289.9   100\n  500 113.0 132.90 150.993 141.95 160.75 362.4   100\n 1000 119.7 137.85 154.477 147.20 155.30 454.0   100\n\n\n\n\nRolling maximums\n\nresult &lt;- microbenchmark(\"125\" = roll_max(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_max(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_max(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_max(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 113.7 131.25 146.899 139.05 153.05 401.7   100\n  250 109.4 134.65 147.073 142.25 152.25 229.7   100\n  500 108.1 136.30 149.703 143.50 156.55 239.5   100\n 1000 110.0 133.55 145.957 146.05 156.30 207.1   100\n\n\n\n\nRolling index of minimums\n\nresult &lt;- microbenchmark(\"125\" = roll_idxmin(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_idxmin(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_idxmin(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_idxmin(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 104.1 115.25 130.789 121.25 130.50 225.4   100\n  250 103.6 115.60 133.341 120.65 136.75 343.1   100\n  500 103.1 117.25 132.180 123.10 136.20 302.0   100\n 1000 100.9 120.10 137.035 126.15 144.05 261.2   100\n\n\n\n\nRolling index of maximums\n\nresult &lt;- microbenchmark(\"125\" = roll_idxmax(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_idxmax(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_idxmax(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_idxmax(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 100.3 115.45 140.336 121.70 141.55 373.8   100\n  250 103.4 114.45 130.265 119.05 132.30 348.6   100\n  500 103.5 114.10 131.351 119.55 130.65 256.3   100\n 1000 105.4 118.30 134.958 124.25 135.80 263.4   100\n\n\n\n\nRolling medians\n\nresult &lt;- microbenchmark(\"125\" = roll_median(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_median(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_median(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_median(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n\nUnit: microseconds\n expr     min       lq      mean   median       uq     max neval\n  125  4599.7  5482.75  7698.712  6229.65  8027.80 18081.3   100\n  250  8730.7 10744.00 14895.029 13272.45 18087.30 27164.4   100\n  500 16728.6 20769.00 27494.023 26526.60 34311.20 40460.8   100\n 1000 22308.3 35583.90 40242.298 41314.70 46052.25 50372.8   100\n\n\n\n\nRolling quantiles\n\nresult &lt;- microbenchmark(\"125\" = roll_quantile(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_quantile(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_quantile(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_quantile(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n\nUnit: microseconds\n expr     min       lq     mean  median      uq     max neval\n  125  4729.8  5240.35  7676.22  6085.0  8855.2 17907.3   100\n  250  8941.7 11134.45 15170.24 13553.9 17722.8 27089.2   100\n  500 16328.3 20147.60 27557.76 26549.0 34689.3 40910.2   100\n 1000 23694.9 30086.55 37129.21 38408.9 43262.2 48889.0   100\n\n\n\n\nRolling variances\n\\[\n\\begin{aligned}\n&\\text{Expanding window}\\\\\n&\\bullet\\text{sum}_{w}\\leftarrow\\text{sum}_{w}+\\text{w}_{new}\\\\\n&\\bullet\\text{sumsq}_{w}\\leftarrow\\text{sumsq}_{w}+\\text{w}_{new}^{2}\\\\\n&\\bullet\\text{sumsq}_{x}\\leftarrow\\lambda\\times\\text{sumsq}_{x}+\\text{w}_{new}\\times (\\text{x}_{new}-\\text{mean}_{x})(\\text{x}_{new}-\\text{mean}_{prev_x})\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{sumsq}_{x}\\leftarrow\\lambda\\times\\text{sumsq}_{x}+\\text{w}_{new}\\times (\\text{x}_{new}-\\text{mean}_{x})(\\text{x}_{new}-\\text{mean}_{prev_x})-\\\\\n&\\lambda\\times\\text{w}_{old}\\times (\\text{x}_{old}-\\text{mean}_{x})(\\text{x}_{old}-\\text{mean}_{prev_x})\n\\end{aligned}\n\\]\n\nresult &lt;- microbenchmark(\"125\" = roll_var(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_var(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_var(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_var(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 124.9 152.65 168.985 162.35 177.45 238.6   100\n  250 141.4 152.65 167.993 162.25 175.35 306.0   100\n  500 113.1 144.90 163.236 156.50 168.50 402.3   100\n 1000 105.6 145.35 162.694 155.35 171.95 350.3   100\n\n\n\n\nRolling standard deviations\n\nresult &lt;- microbenchmark(\"125\" = roll_sd(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_sd(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_sd(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_sd(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 143.7 152.55 165.386 162.45 171.80 272.8   100\n  250 138.9 148.75 164.558 159.15 169.25 264.9   100\n  500 140.5 146.40 165.517 157.70 167.50 481.8   100\n 1000 131.7 140.45 154.087 150.05 158.35 239.6   100\n\n\n\n\nRolling scaling and centering\n\nresult &lt;- microbenchmark(\"125\" = roll_scale(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_scale(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_scale(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_scale(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 152.4 173.05 222.879 184.65 207.40 994.0   100\n  250 156.0 172.00 205.115 180.35 203.75 880.2   100\n  500 156.1 170.85 211.344 179.05 199.05 881.0   100\n 1000 147.0 164.35 208.481 176.40 206.55 848.1   100\n\n\n\n\nRolling covariances\n\\[\n\\begin{aligned}\n&\\text{Expanding window}\\\\\n&\\bullet\\text{sum}_{w}\\leftarrow\\text{sum}_{w}+\\text{w}_{new}\\\\\n&\\bullet\\text{sumsq}_{w}\\leftarrow\\text{sumsq}_{w}+\\text{w}_{new}^{2}\\\\\n&\\bullet\\text{sumsq}_{xy}\\leftarrow\\lambda\\times\\text{sumsq}_{xy}+\\text{w}_{new}\\times (\\text{x}_{new}-\\text{mean}_{x})(\\text{y}_{new}-\\text{mean}_{prev_y})\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{sumsq}_{xy}\\leftarrow\\lambda\\times\\text{sumsq}_{xy}+\\text{w}_{new}\\times (\\text{x}_{new}-\\text{mean}_{x})(\\text{y}_{new}-\\text{mean}_{prev_y})-\\\\\n&\\lambda\\times\\text{w}_{old}\\times (\\text{x}_{old}-\\text{mean}_{x})(\\text{y}_{old}-\\text{mean}_{prev_y})\n\\end{aligned}\n\\]\n\nresult &lt;- microbenchmark(\"125\" = roll_cov(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_cov(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_cov(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_cov(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n\nUnit: microseconds\n expr    min      lq     mean  median      uq    max neval\n  125 1032.5 1154.95 1274.447 1211.05 1290.40 6003.6   100\n  250 1024.0 1122.05 1257.095 1198.65 1279.90 5818.0   100\n  500  876.5 1084.45 1152.625 1132.30 1232.20 1641.3   100\n 1000  888.0  997.80 1211.518 1056.75 1113.05 6448.1   100\n\n\n\n\nRolling correlations\n\nresult &lt;- microbenchmark(\"125\" = roll_cor(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_cor(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_cor(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_cor(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n\nUnit: microseconds\n expr    min      lq     mean  median      uq     max neval\n  125 1156.7 1348.55 1873.940 1477.85 1611.25 13501.6   100\n  250 1136.6 1332.00 2051.621 1449.40 1735.15  6172.6   100\n  500 1005.2 1270.15 1681.855 1351.00 1477.85  6514.3   100\n 1000 1009.5 1121.15 1466.576 1183.50 1275.70  5742.3   100\n\n\n\n\nRolling crossproducts\n\nresult &lt;- microbenchmark(\"125\" = roll_crossprod(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_crossprod(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_crossprod(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_crossprod(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n\nUnit: microseconds\n expr   min     lq     mean  median      uq    max neval\n  125 760.7 959.80 1208.778 1017.75 1073.40 5887.9   100\n  250 770.0 943.25 1010.253 1004.75 1061.05 1491.5   100\n  500 828.2 912.65  972.969  971.45 1015.10 1506.5   100\n 1000 614.1 827.05  927.984  868.80  925.90 5604.2   100\n\n\n\n\nRolling linear models\n\\[\n\\begin{aligned}\n&\\text{coef}=\\text{cov}_{xx}^{-1}\\times\\text{cov}_{xy}\\\\\n&\\text{intercept}=\\text{mean}_{y}-\\text{coef}\\times\\text{mean}_{x}\\\\\n&\\text{rsq}=\\frac{\\text{coef}^{T}\\times\\text{cov}_{xx}\\times\\text{coef}}{\\text{var}_{y}}\\\\\n&\\text{var}_{resid}=\\frac{(1-\\text{rsq})(\\text{var}_{y})(\\text{sum}_{w}-\\text{sumsq}_{w}/\\text{sum}_{w})}{\\text{n}_{rows}-\\text{n}_{cols}}\\\\\n&\\text{xx}=\\text{cov}_{xx}\\times(\\text{sum}_{w}-\\text{sumsq}_{w}/\\text{sum}_{w})\\\\\n&\\text{se}_{coef}=\\sqrt{\\text{var}_{resid}\\times\\text{diag}(\\text{xx}^{-1})}\\\\\n&\\text{se}_{intercept}=\\sqrt{\\text{var}_{resid}\\left(1/\\text{sum}_{w}+\\text{mean}_{x}^{T}\\text{xx}^{-1}\\text{mean}_{x}\\right)}\n\\end{aligned}\n\\]\n\nresult &lt;- microbenchmark(\"125\" = roll_lm(x, y, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_lm(x, y, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_lm(x, y, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_lm(x, y, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n\nUnit: microseconds\n expr    min      lq     mean  median     uq     max neval\n  125 2260.5 7207.10 7421.314 7551.45 7930.3 10909.0   100\n  250 2295.2 7098.45 7722.951 7454.40 7888.1 23681.8   100\n  500 2251.6 6967.50 7331.274 7233.75 7778.8 10878.0   100\n 1000 2098.4 6372.60 6629.760 6664.15 7062.0 23237.5   100\n\n\n\n\nReferences\n\nhttps://stackoverflow.com/a/9933794\nhttps://stackoverflow.com/a/11316626\nhttps://stackoverflow.com/a/34363187\nhttps://stackoverflow.com/a/243342\nhttps://stats.stackexchange.com/a/64217\nhttps://stackoverflow.com/a/51992954\nhttps://stackoverflow.com/a/25921772\nhttps://stackoverflow.com/a/40416506\nhttps://stackoverflow.com/a/5970314\nhttps://gist.github.com/ashelly/5665911\nhttps://stackoverflow.com/a/51992954"
  },
  {
    "objectID": "posts/optim/index.html",
    "href": "posts/optim/index.html",
    "title": "Optimization",
    "section": "",
    "text": "Usage\n\nlibrary(rolloptim)\n\n\nn_vars &lt;- 3\nn_obs &lt;- 15\nx &lt;- matrix(rnorm(n_obs * n_vars), nrow = n_obs, ncol = n_vars)\n\nmu &lt;- roll::roll_mean(x, 5)\nsigma &lt;- roll::roll_cov(x, width = 5)\n\n\n\nMinimize variance\n\\[\n\\begin{aligned}\n\\begin{array}{rrcl}\n\\displaystyle\\min&\\frac{1}{2}\\mathbf{w}^T\\Sigma\\mathbf{w}\\\\\n\\textrm{s.t.}&\\mathbf{w}^{T}e&=&1\n\\end{array}\n\\end{aligned}\n\\]\nTo incorporate these conditions into one equation, introduce new variables \\(\\lambda_{i}\\) that are the Lagrange multipliers and define a new function \\(\\mathcal{L}\\) as follows:\n\\[\n\\begin{aligned}\n\\mathcal{L}(\\mathbf{w},\\lambda)&=\\frac{1}{2}\\mathbf{w}^{T}\\Sigma\\mathbf{w}-\\lambda_{1}(\\mathbf{w}^{T}e-1)\n\\end{aligned}\n\\]\nThen, to minimize this function, take derivatives with respect to \\(w\\) and Lagrange multipliers \\(\\lambda_{i}\\):\n\\[\n\\begin{aligned}\n\\frac{\\partial\\mathcal{L}(\\mathbf{w},\\lambda)}{\\partial w}&=\\mathbf{w}\\Sigma-\\lambda_{1}e=0\\\\\n\\frac{\\partial\\mathcal{L}(\\mathbf{w},\\lambda)}{\\partial \\lambda_{1}}&=\\mathbf{w}e^T-1=0\n\\end{aligned}\n\\]\nSimplify the equations above in matrix form and solve for the Lagrange multipliers \\(\\lambda_{i}\\):\n\\[\n\\begin{aligned}\n\\begin{bmatrix}\n\\Sigma & e \\\\\ne^{T} & 0\n\\end{bmatrix}\n\\begin{bmatrix}\n\\mathbf{w} \\\\\n-\\lambda_{1}\n\\end{bmatrix}\n&=\n\\begin{bmatrix}\n0 \\\\\n1\n\\end{bmatrix}\n\\\\\n\\begin{bmatrix}\n\\mathbf{w} \\\\\n-\\lambda_{1}\n\\end{bmatrix}\n&=\n\\begin{bmatrix}\n\\Sigma & e \\\\\ne^{T} & 0\n\\end{bmatrix}^{-1}\n\\begin{bmatrix}\n0 \\\\\n1\n\\end{bmatrix}\n\\end{aligned}\n\\]\n\nroll_min_var(sigma)\n\n\n\nMaximize mean\n\\[\n\\begin{aligned}\n\\begin{array}{rrcl}\n\\displaystyle\\min&-\\mathbf{w}^{T}\\mu\\\\\n\\textrm{s.t.}&\\mathbf{w}^{T}e&=&1\n\\end{array}\n\\end{aligned}\n\\]\nTo incorporate these conditions into one equation, introduce new variables \\(\\lambda_{i}\\) that are the Lagrange multipliers and define a new function \\(\\mathcal{L}\\) as follows:\n\\[\n\\begin{aligned}\n\\mathcal{L}(\\mathbf{w},\\lambda)&=-\\mathbf{w}^{T}\\mu-\\lambda_{1}(\\mathbf{w}^{T}e-1)\n\\end{aligned}\n\\]\nThen, to minimize this function, take derivatives with respect to \\(w\\) and Lagrange multipliers \\(\\lambda_{i}\\):\n\\[\n\\begin{aligned}\n\\frac{\\partial\\mathcal{L}(\\mathbf{w},\\lambda)}{\\partial w}&=-\\mu-\\lambda_{1}e=0\\\\\n\\frac{\\partial\\mathcal{L}(\\mathbf{w},\\lambda)}{\\partial \\lambda_{1}}&=\\mathbf{w}e^T-1=0\n\\end{aligned}\n\\]\nSimplify the equations above in matrix form and solve for the Lagrange multipliers \\(\\lambda_{i}\\):\n\\[\n\\begin{aligned}\n\\begin{bmatrix}\n-\\mu & e \\\\\ne^{T} & 0\n\\end{bmatrix}\n\\begin{bmatrix}\n\\mathbf{w} \\\\\n-\\lambda_{1}\n\\end{bmatrix}\n&=\n\\begin{bmatrix}\n0 \\\\\n1\n\\end{bmatrix}\n\\\\\n\\begin{bmatrix}\n\\mathbf{w} \\\\\n-\\lambda_{1}\n\\end{bmatrix}\n&=\n\\begin{bmatrix}\n-\\mu & e \\\\\ne^{T} & 0\n\\end{bmatrix}^{-1}\n\\begin{bmatrix}\n0 \\\\\n1\n\\end{bmatrix}\n\\end{aligned}\n\\]\n\nroll_max_mean(mu)\n\n\n\nMaximize utility\n\\[\n\\begin{aligned}\n\\begin{array}{rrcl}\n\\displaystyle\\min&\\frac{1}{2}\\delta(\\mathbf{w}^{T}\\Sigma\\mathbf{w})-\\mu^{T}\\mathbf{w}\\\\\n\\textrm{s.t.}&e^T\\mathbf{w}&=&1\n\\end{array}\n\\end{aligned}\n\\]\nTo incorporate these conditions into one equation, introduce new variables \\(\\lambda_{i}\\) that are the Lagrange multipliers and define a new function \\(\\mathcal{L}\\) as follows:\n\\[\n\\begin{aligned}\n\\mathcal{L}(\\mathbf{w},\\lambda)&=\\frac{1}{2}\\mathbf{w}^{T}\\Sigma\\mathbf{w}-\\mu^{T}\\mathbf{w}-\\lambda_{1}(\\mathbf{w}^{T}e-1)\n\\end{aligned}\n\\]\nThen, to minimize this function, take derivatives with respect to \\(w\\) and Lagrange multipliers \\(\\lambda_{i}\\):\n\\[\n\\begin{aligned}\n\\frac{\\partial\\mathcal{L}(\\mathbf{w},\\lambda)}{\\partial w}&=\\mathbf{w}\\Sigma-\\mu^{T}-\\lambda_{1}e=0\\\\\n\\frac{\\partial\\mathcal{L}(\\mathbf{w},\\lambda)}{\\partial \\lambda_{1}}&=\\mathbf{w}e^T-1=0\n\\end{aligned}\n\\]\nSimplify the equations above in matrix form and solve for the Lagrange multipliers \\(\\lambda_{i}\\):\n\\[\n\\begin{aligned}\n\\begin{bmatrix}\n\\Sigma & e \\\\\ne^{T} & 0\n\\end{bmatrix}\n\\begin{bmatrix}\n\\mathbf{w} \\\\\n-\\lambda_{1}\n\\end{bmatrix}\n&=\n\\begin{bmatrix}\n\\mu^{T} \\\\\n1\n\\end{bmatrix}\n\\\\\n\\begin{bmatrix}\n\\mathbf{w} \\\\\n-\\lambda_{1}\n\\end{bmatrix}\n&=\n\\begin{bmatrix}\n\\Sigma & e \\\\\ne^{T} & 0\n\\end{bmatrix}^{-1}\n\\begin{bmatrix}\n\\mu^{T} \\\\\n1\n\\end{bmatrix}\n\\end{aligned}\n\\]\n\nroll_max_utility(mu, sigma)\n\n\n\nMinimize residual sum of squares\n\\[\n\\begin{aligned}\n\\begin{array}{rrcl}\n\\displaystyle\\min&\\frac{1}{2}\\delta(\\mathbf{w}^{T}X^{T}X\\mathbf{w})-X^{T}y\\mathbf{w}\\\\\n\\textrm{s.t.}&e^T\\mathbf{w}&=&1\n\\end{array}\n\\end{aligned}\n\\]\nTo incorporate these conditions into one equation, introduce new variables \\(\\lambda_{i}\\) that are the Lagrange multipliers and define a new function \\(\\mathcal{L}\\) as follows:\n\\[\n\\begin{aligned}\n\\mathcal{L}(\\mathbf{w},\\lambda)&=\\frac{1}{2}\\mathbf{w}^{T}X^{T}X\\mathbf{w}-X^{T}y\\mathbf{w}-\\lambda_{1}(\\mathbf{w}^{T}e-1)\n\\end{aligned}\n\\]\nThen, to minimize this function, take derivatives with respect to \\(w\\) and Lagrange multipliers \\(\\lambda_{i}\\):\n\\[\n\\begin{aligned}\n\\frac{\\partial\\mathcal{L}(\\mathbf{w},\\lambda)}{\\partial w}&=\\mathbf{w}X^{T}X-X^{T}y-\\lambda_{1}e=0\\\\\n\\frac{\\partial\\mathcal{L}(\\mathbf{w},\\lambda)}{\\partial \\lambda_{1}}&=\\mathbf{w}e^T-1=0\n\\end{aligned}\n\\]\nSimplify the equations above in matrix form and solve for the Lagrange multipliers \\(\\lambda_{i}\\):\n\\[\n\\begin{aligned}\n\\begin{bmatrix}\nX^{T}X & e \\\\\ne^{T} & 0\n\\end{bmatrix}\n\\begin{bmatrix}\n\\mathbf{w} \\\\\n-\\lambda_{1}\n\\end{bmatrix}\n&=\n\\begin{bmatrix}\nX^{T}y \\\\\n1\n\\end{bmatrix}\n\\\\\n\\begin{bmatrix}\n\\mathbf{w} \\\\\n-\\lambda_{1}\n\\end{bmatrix}\n&=\n\\begin{bmatrix}\nX^{T}X & e \\\\\ne^{T} & 0\n\\end{bmatrix}^{-1}\n\\begin{bmatrix}\nX^{T}y \\\\\n1\n\\end{bmatrix}\n\\end{aligned}\n\\]\n\nroll_min_rss(xx, xy)\n\n\n\nReferences\n\nhttps://www.adrian.idv.hk/2021-06-22-kkt/\nhttps://or.stackexchange.com/a/3738\nhttps://bookdown.org/compfinezbook/introFinRbook/Portfolio-Theory-with-Matrix-Algebra.html#algorithm-for-computing-efficient-frontier"
  }
]