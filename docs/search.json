[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "jjf234.github.io",
    "section": "",
    "text": "Cloud computing\n\n\n\n\n\n\n\ncloud\n\n\ncomputing\n\n\npython\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\nOct 26, 2023\n\n\nJason Foster\n\n\n\n\n\n\n  \n\n\n\n\nSoftware development\n\n\n\n\n\n\n\nsoftware\n\n\ndevelopment\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\nOct 26, 2023\n\n\nJason Foster\n\n\n\n\n\n\n  \n\n\n\n\nStatistics\n\n\n\n\n\n\n\nstatistics\n\n\nanalysis\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\nOct 26, 2023\n\n\nJason Foster\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Software development",
    "section": "",
    "text": "System setup\n\nhttps://r-pkgs.org/setup.html\n\n# environment variable: PATH=c:\\rtools40\\usr\\bin\n\n\nDevelopment workflow\n\nhttps://r-pkgs.org/workflows101.html\n\n\nRcppArmadillo::RcppArmadillo.package.skeleton(name = \"anRpackage\",\n                                              path = \".\",\n                                              example_code = FALSE)\n\n\n\nObject documentation\n\nhttps://r-pkgs.org/man.html\n\n\nroxygen2::roxygenize()\n\n\n\nCompiled code\n\nhttps://r-pkgs.org/src.html\n\n\nRcpp::compileAttributes(verbose = TRUE)\ntools::package_native_routine_registration_skeleton(\".\", character_only = FALSE)\n\n\n\nGit and GitHub\n\nhttps://r-pkgs.org/git.html\n\nTell Git your name and email address:\ngit config --global user.name \"YOUR FULL NAME\"\ngit config --global user.email \"YOUR EMAIL ADDRESS\"\nIf needed, generate an SSH key: RStudio &gt; Tools &gt; Git/SVN &gt; Create RSA Key…\nThen give GitHub your SSH public key: GitHub &gt; SSH and GPG Keys &gt; New SSH key\ngit remote add origin git@github.com:hadley/r-pkgs.git\ngit push -u origin master\nAlso, if needed, change the URL of remote ‘origin’:\ngit remote set-url origin git@github.com:hadley/r-foo.git\n\n\nAutomated checking\n\nhttps://r-pkgs.org/r-cmd-check.html\n\n\nusethis::use_github_action(\"check-standard\")\nusethis::use_github_action(\"test-coverage\")"
  },
  {
    "objectID": "posts/dev/dev.html",
    "href": "posts/dev/dev.html",
    "title": "Software development",
    "section": "",
    "text": "System setup\n\nhttps://r-pkgs.org/setup.html\n\n# environment variable: PATH=c:\\rtools40\\usr\\bin\n\n\nDevelopment workflow\n\nhttps://r-pkgs.org/workflows101.html\n\n\nRcppArmadillo::RcppArmadillo.package.skeleton(name = \"anRpackage\",\n                                              path = \".\",\n                                              example_code = FALSE)\n\n\n\nObject documentation\n\nhttps://r-pkgs.org/man.html\n\n\nroxygen2::roxygenize()\n\n\n\nCompiled code\n\nhttps://r-pkgs.org/src.html\n\n\nRcpp::compileAttributes(verbose = TRUE)\ntools::package_native_routine_registration_skeleton(\".\", character_only = FALSE)\n\n\n\nGit and GitHub\n\nhttps://r-pkgs.org/git.html\n\nTell Git your name and email address:\ngit config --global user.name \"YOUR FULL NAME\"\ngit config --global user.email \"YOUR EMAIL ADDRESS\"\nIf needed, generate an SSH key: RStudio &gt; Tools &gt; Git/SVN &gt; Create RSA Key…\nThen give GitHub your SSH public key: GitHub &gt; SSH and GPG Keys &gt; New SSH key\ngit remote add origin git@github.com:hadley/r-pkgs.git\ngit push -u origin master\nAlso, if needed, change the URL of remote ‘origin’:\ngit remote set-url origin git@github.com:hadley/r-foo.git\n\n\nAutomated checking\n\nhttps://r-pkgs.org/r-cmd-check.html\n\n\nusethis::use_github_action(\"check-standard\")\nusethis::use_github_action(\"test-coverage\")"
  },
  {
    "objectID": "posts/cloud/index.html",
    "href": "posts/cloud/index.html",
    "title": "Cloud computing",
    "section": "",
    "text": "# EC2 &gt; Network & Security &gt; Key Pairs &gt; Create Key Pair &gt; *.pem\n# PuTTYgen &gt; Load an existing private key file &gt; Save private key &gt; *.ppk\n# Host Name: ec2-user@ec2-1-23-456-789.us-east-2.compute.amazonaws.com \n# Connection &gt; SSH &gt; Auth & WinSCP &gt; Auth &gt; Private key file for authentication\n    \nsudo yum update\n\n\n\n# Amazon Linux 2\nwget https://repo.anaconda.com/archive/Anaconda3-2023.03-Linux-x86_64.sh\n\nbash Anaconda3-2023.03-Linux-x86_64.sh\n# then close and re-open current shell\n# https://pypi.org/project/ipython/#history\n# https://stackoverflow.com/a/76521018\n# https://stackoverflow.com/a/77117477\npip install 'ipython==7.34.0' --force-reinstall\nipython\nfrom IPython.lib import passwd\npasswd(\"12345\")\n# sha1:asdfasdf:asfasdfasdf\nexit()\njupyter notebook --generate-config \nvi ~/.jupyter/jupyter_notebook_config.py\n\n# [i]\nc = get_config()  # Get the config object.\n# c.NotebookApp.certfile = u'/home/ubuntu/ssl/cert.pem' # path to the certificate we generated\n# c.NotebookApp.keyfile = u'/home/ubuntu/ssl/cert.key' # path to the certificate key we generated\nc.NotebookApp.ip = '0.0.0.0' # serve notebooks locally\nc.NotebookApp.open_browser = False # do not open a browser window by default when using notebooks.\nc.NotebookApp.password = 'sha1:asdfasdf:asfasdfasdf'\n# [ESC][:wq][ENTER]\n# nohup jupyter notebook\nnohup jupyter lab\n# then close and re-open current shell\njupyter nbconvert --to python &lt;notebook&gt;.ipynb\nsudo service crond start\ncrontab -e\n# [i]\n# https://crontab.guru/\n# * * * * * /home/ec2-user/anaconda3/bin/python /home/ec2-user/&lt;notebook&gt;.py\n# [ESC][:wq][ENTER]\n# http://1.23.456.789:8888\n\n\n\n\nSetup: https://aws.amazon.com/blogs/big-data/running-r-on-aws/\n\n# install R\nsudo su\n# yum install -y R # Amazon Linux\n# amazon-linux-extras list\nsudo amazon-linux-extras install R3.4 # Amazon Linux 2\n# https://posit.co/download/rstudio-server/\n# install RStudio Server 1.2.5019 (2019-11-01)\nwget https://download2.rstudio.org/server/centos6/x86_64/rstudio-server-rhel-1.2.5019-x86_64.rpm\nyum install rstudio-server-rhel-1.2.5019-x86_64.rpm\nrm rstudio-server-rhel-1.2.5019-x86_64.rpm\n\n# https://posit.co/download/shiny-server/\n# install Shiny Server (2019-09-09)\nR -e \"install.packages('shiny', repos = 'http://cran.rstudio.com/')\"\nwget https://download3.rstudio.org/centos6.3/x86_64/shiny-server-1.5.12.933-x86_64.rpm\nyum install --nogpgcheck shiny-server-1.5.12.933-x86_64.rpm\nrm shiny-server-1.5.12.933-x86_64.rpm\n# add user(s)\nuseradd -m jjf234\nsudo passwd jjf234 # prompt to enter password\n# sudo /opt/shiny-server/bin/deploy-example user-dirs\n# mkdir ~/ShinyApps\n# sudo cp -R /opt/shiny-server/samples/sample-apps/hello ~/ShinyApps\n\n# need to create '/ShinyApps' under '/ec2-user' and then subfolders with code\n# e.g.: /home/ec2-user/ShinyApps/hello\n# install devtools\nsudo yum install libcurl-devel\nsudo yum install openssl-devel\nsudo yum install libxml2-devel\nR -e \"install.packages('devtools', repos = 'http://cran.rstudio.com/')\"\n\n# install RcppParallel\nR -e \"install.packages('RcppParallel', repos = 'http://cran.rstudio.com/')\"\n\n# install RcppArmadillo\nR -e \"install.packages('RcppArmadillo', repos = 'http://cran.rstudio.com/')\"\n\n# install other packages\nR -e \"install.packages(c('data.table', 'xts', 'testthat', 'microbenchmark'),\nrepos = 'http://cran.rstudio.com/')\"\n\n# install roll\nR -e \"devtools::install_github('jjf234/roll')\"\n# http://1.23.456.789:8787/\n# http://1.23.456.789:3838/ec2-user/hello/"
  },
  {
    "objectID": "posts/cloud/index.html#secure-shell",
    "href": "posts/cloud/index.html#secure-shell",
    "title": "Cloud computing",
    "section": "",
    "text": "# EC2 &gt; Network & Security &gt; Key Pairs &gt; Create Key Pair &gt; *.pem\n# PuTTYgen &gt; Load an existing private key file &gt; Save private key &gt; *.ppk\n# Host Name: ec2-user@ec2-1-23-456-789.us-east-2.compute.amazonaws.com \n# Connection &gt; SSH &gt; Auth & WinSCP &gt; Auth &gt; Private key file for authentication\n    \nsudo yum update"
  },
  {
    "objectID": "posts/cloud/index.html#jupyter-server",
    "href": "posts/cloud/index.html#jupyter-server",
    "title": "Cloud computing",
    "section": "",
    "text": "# Amazon Linux 2\nwget https://repo.anaconda.com/archive/Anaconda3-2023.03-Linux-x86_64.sh\n\nbash Anaconda3-2023.03-Linux-x86_64.sh\n# then close and re-open current shell\n# https://pypi.org/project/ipython/#history\n# https://stackoverflow.com/a/76521018\n# https://stackoverflow.com/a/77117477\npip install 'ipython==7.34.0' --force-reinstall\nipython\nfrom IPython.lib import passwd\npasswd(\"12345\")\n# sha1:asdfasdf:asfasdfasdf\nexit()\njupyter notebook --generate-config \nvi ~/.jupyter/jupyter_notebook_config.py\n\n# [i]\nc = get_config()  # Get the config object.\n# c.NotebookApp.certfile = u'/home/ubuntu/ssl/cert.pem' # path to the certificate we generated\n# c.NotebookApp.keyfile = u'/home/ubuntu/ssl/cert.key' # path to the certificate key we generated\nc.NotebookApp.ip = '0.0.0.0' # serve notebooks locally\nc.NotebookApp.open_browser = False # do not open a browser window by default when using notebooks.\nc.NotebookApp.password = 'sha1:asdfasdf:asfasdfasdf'\n# [ESC][:wq][ENTER]\n# nohup jupyter notebook\nnohup jupyter lab\n# then close and re-open current shell\njupyter nbconvert --to python &lt;notebook&gt;.ipynb\nsudo service crond start\ncrontab -e\n# [i]\n# https://crontab.guru/\n# * * * * * /home/ec2-user/anaconda3/bin/python /home/ec2-user/&lt;notebook&gt;.py\n# [ESC][:wq][ENTER]\n# http://1.23.456.789:8888"
  },
  {
    "objectID": "posts/cloud/index.html#rstudio-server",
    "href": "posts/cloud/index.html#rstudio-server",
    "title": "Cloud computing",
    "section": "",
    "text": "Setup: https://aws.amazon.com/blogs/big-data/running-r-on-aws/\n\n# install R\nsudo su\n# yum install -y R # Amazon Linux\n# amazon-linux-extras list\nsudo amazon-linux-extras install R3.4 # Amazon Linux 2\n# https://posit.co/download/rstudio-server/\n# install RStudio Server 1.2.5019 (2019-11-01)\nwget https://download2.rstudio.org/server/centos6/x86_64/rstudio-server-rhel-1.2.5019-x86_64.rpm\nyum install rstudio-server-rhel-1.2.5019-x86_64.rpm\nrm rstudio-server-rhel-1.2.5019-x86_64.rpm\n\n# https://posit.co/download/shiny-server/\n# install Shiny Server (2019-09-09)\nR -e \"install.packages('shiny', repos = 'http://cran.rstudio.com/')\"\nwget https://download3.rstudio.org/centos6.3/x86_64/shiny-server-1.5.12.933-x86_64.rpm\nyum install --nogpgcheck shiny-server-1.5.12.933-x86_64.rpm\nrm shiny-server-1.5.12.933-x86_64.rpm\n# add user(s)\nuseradd -m jjf234\nsudo passwd jjf234 # prompt to enter password\n# sudo /opt/shiny-server/bin/deploy-example user-dirs\n# mkdir ~/ShinyApps\n# sudo cp -R /opt/shiny-server/samples/sample-apps/hello ~/ShinyApps\n\n# need to create '/ShinyApps' under '/ec2-user' and then subfolders with code\n# e.g.: /home/ec2-user/ShinyApps/hello\n# install devtools\nsudo yum install libcurl-devel\nsudo yum install openssl-devel\nsudo yum install libxml2-devel\nR -e \"install.packages('devtools', repos = 'http://cran.rstudio.com/')\"\n\n# install RcppParallel\nR -e \"install.packages('RcppParallel', repos = 'http://cran.rstudio.com/')\"\n\n# install RcppArmadillo\nR -e \"install.packages('RcppArmadillo', repos = 'http://cran.rstudio.com/')\"\n\n# install other packages\nR -e \"install.packages(c('data.table', 'xts', 'testthat', 'microbenchmark'),\nrepos = 'http://cran.rstudio.com/')\"\n\n# install roll\nR -e \"devtools::install_github('jjf234/roll')\"\n# http://1.23.456.789:8787/\n# http://1.23.456.789:3838/ec2-user/hello/"
  },
  {
    "objectID": "posts/dev/index.html",
    "href": "posts/dev/index.html",
    "title": "Software development",
    "section": "",
    "text": "System setup\n# environment variable: PATH=c:\\rtools&lt;123&gt;\\usr\\bin\n\n\nGit and GitHub\ngit config --global user.name \"&lt;NAME&gt;\"\ngit config --global user.email \"&lt;EMAIL&gt;\"\nIf needed, generate an SSH key: RStudio &gt; Tools &gt; Git/SVN &gt; Create RSA Key…\nThen give GitHub your SSH public key: GitHub &gt; SSH and GPG Keys &gt; New SSH key\n# ...or create a new repository on the command line\necho \"# &lt;REPO&gt;\" &gt;&gt; README.md\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin git@github.com:&lt;OWNER&gt;/&lt;REPO&gt;.git\ngit push -u origin main\n# ...or push an existing repository from the command line\ngit remote add origin git@github.com:&lt;OWNER&gt;/&lt;REPO&gt;.git\ngit branch -M main\ngit push -u origin main\n# git remote set-url origin git@github.com:&lt;OWNER&gt;/&lt;REPO&gt;.git\n\n\nDevelopment workflow\n\nRcppArmadillo::RcppArmadillo.package.skeleton(name = \"anRpackage\",\n                                              path = \".\",\n                                              example_code = FALSE)\n\n\n\nCompiled code\n\nRcpp::compileAttributes(verbose = TRUE)\ntools::package_native_routine_registration_skeleton(\".\", character_only = FALSE)\n\n\n\nObject documentation\n\nroxygen2::roxygenize()\n\n\n\nAutomated checking\n\nusethis::use_github_action(\"check-standard\")\nusethis::use_github_action(\"test-coverage\")"
  },
  {
    "objectID": "posts/roll/index.html",
    "href": "posts/roll/index.html",
    "title": "Statistics",
    "section": "",
    "text": "Usage\n\nlibrary(roll)\nlibrary(microbenchmark)\noptions(microbenchmark.unit = \"us\")\n\n\nn_vars &lt;- 10\nn_obs &lt;- 1000\nweights &lt;- 0.9 ^ (n_obs:1)\n\nx &lt;- matrix(rnorm(n_obs * n_vars), nrow = n_obs, ncol = n_vars)\ny &lt;- matrix(rnorm(n_obs), nrow = n_obs, ncol = 1)\nx_lgl &lt;- x &lt; 0\n\n\n\nRolling any\n\nresult &lt;- microbenchmark(\"125\" = roll_any(x_lgl, width = 125, min_obs = 1),\n                         \"250\" = roll_any(x_lgl, width = 250, min_obs = 1),\n                         \"500\" = roll_any(x_lgl, width = 500, min_obs = 1),\n                         \"1000\" = roll_any(x_lgl, width = 1000, min_obs = 1))\nprint(result)\n\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 109.4 149.30 177.094 170.45 195.15 411.7   100\n  250 123.9 153.80 177.767 169.10 191.60 325.1   100\n  500 112.1 147.75 175.105 165.05 195.80 329.9   100\n 1000 122.2 151.75 194.340 176.75 207.80 823.9   100\n\n\n\n\nRolling all\n\nresult &lt;- microbenchmark(\"125\" = roll_all(x_lgl, width = 125, min_obs = 1),\n                         \"250\" = roll_all(x_lgl, width = 250, min_obs = 1),\n                         \"500\" = roll_all(x_lgl, width = 500, min_obs = 1),\n                         \"1000\" = roll_all(x_lgl, width = 1000, min_obs = 1))\nprint(result)\n\nUnit: microseconds\n expr  min     lq    mean median     uq   max neval\n  125 89.0 122.80 137.074 135.55 144.80 218.5   100\n  250 85.8 124.80 141.895 133.30 146.75 342.9   100\n  500 92.0 124.35 140.008 135.75 144.95 234.3   100\n 1000 89.4 124.70 137.962 134.10 140.75 220.1   100\n\n\n\n\nRolling sums\n\\[\n\\begin{aligned}\n&\\text{Expanding window} \\\\\n&\\bullet\\text{sum}_{x}\\leftarrow\\lambda\\times\\text{sum}_{x}+\\text{w}_{new}\\times\\text{x}_{new}\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{sum}_{x}\\leftarrow\\lambda\\times\\text{sum}_{x}+\\text{w}_{new}\\times\\text{x}_{new}-\\lambda\\times\\text{w}_{old}\\times\\text{x}_{old}\n\\end{aligned}\n\\]\n\nresult &lt;- microbenchmark(\"125\" = roll_sum(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_sum(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_sum(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_sum(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n\nUnit: microseconds\n expr  min     lq    mean median     uq   max neval\n  125 98.8 119.95 136.555 127.95 142.25 261.7   100\n  250 91.1 117.85 135.405 124.75 145.15 328.0   100\n  500 99.7 118.20 136.366 128.35 149.20 295.0   100\n 1000 89.1 116.65 131.293 122.75 138.70 215.7   100\n\n\n\n\nRolling products\n\\[\n\\begin{aligned}\n&\\text{Expanding window}\\\\\n&\\bullet\\text{prod}_{w}\\leftarrow\\text{prod}_{w}\\times\\text{w}_{new}\\\\\n&\\bullet\\text{prod}_{x}\\leftarrow\\text{prod}_{x}\\times\\text{x}_{new}\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{prod}_{x}\\leftarrow\\text{prod}_{x}\\times\\text{x}_{new}/\\text{x}_{old}\n\\end{aligned}\n\\]\n\nresult &lt;- microbenchmark(\"125\" = roll_prod(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_prod(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_prod(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_prod(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 224.3 243.25 268.897 258.20 278.00 548.9   100\n  250 223.0 240.65 260.640 257.05 272.35 386.4   100\n  500 158.1 173.75 190.158 182.55 197.20 294.4   100\n 1000 152.6 165.55 183.500 177.95 195.55 272.3   100\n\n\n\n\nRolling means\n\\[\n\\begin{aligned}\n&\\text{Expanding window}\\\\\n&\\bullet\\text{sum}_{w}\\leftarrow\\text{sum}_{w}+\\text{w}_{new}\\\\\n&\\bullet\\text{sum}_{x}\\leftarrow\\lambda\\times\\text{sum}_{x}+\\text{w}_{new}\\times\\text{x}_{new}\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{sum}_{x}\\leftarrow\\lambda\\times\\text{sum}_{x}+\\text{w}_{new}\\times\\text{x}_{new}-\\lambda\\times\\text{w}_{old}\\times \\text{x}_{old}\n\\end{aligned}\n\\]\n\nresult &lt;- microbenchmark(\"125\" = roll_mean(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_mean(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_mean(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_mean(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n\nUnit: microseconds\n expr   min     lq    mean median    uq   max neval\n  125 101.7 121.45 135.053  131.9 145.1 192.2   100\n  250 100.6 122.45 137.783  131.3 141.1 409.5   100\n  500  99.1 124.00 135.235  129.9 140.0 210.2   100\n 1000  97.9 120.05 131.587  128.9 134.7 366.0   100\n\n\n\n\nRolling minimums\n\nresult &lt;- microbenchmark(\"125\" = roll_min(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_min(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_min(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_min(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n\nUnit: microseconds\n expr   min    lq    mean median     uq   max neval\n  125 106.2 125.2 137.650 136.45 144.40 226.2   100\n  250 103.3 125.8 140.044 135.75 143.20 389.8   100\n  500 107.2 126.4 140.519 134.70 144.20 237.0   100\n 1000 117.0 130.2 143.505 140.05 147.75 236.4   100\n\n\n\n\nRolling maximums\n\nresult &lt;- microbenchmark(\"125\" = roll_max(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_max(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_max(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_max(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 109.9 143.10 167.924 157.25 184.25 339.3   100\n  250 115.5 150.60 171.372 167.70 186.05 286.2   100\n  500 109.6 138.75 160.233 155.80 169.60 286.0   100\n 1000 107.6 141.70 167.000 154.80 181.50 376.1   100\n\n\n\n\nRolling index of minimums\n\nresult &lt;- microbenchmark(\"125\" = roll_idxmin(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_idxmin(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_idxmin(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_idxmin(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n\nUnit: microseconds\n expr   min    lq    mean median     uq   max neval\n  125 107.5 116.9 136.652 123.05 140.00 256.0   100\n  250 103.3 115.9 133.104 120.10 130.50 325.1   100\n  500 104.0 116.8 137.644 121.90 134.20 400.2   100\n 1000 108.4 119.3 138.534 126.55 142.65 269.0   100\n\n\n\n\nRolling index of maximums\n\nresult &lt;- microbenchmark(\"125\" = roll_idxmax(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_idxmax(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_idxmax(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_idxmax(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 102.4 116.00 137.632 123.50 136.95 321.4   100\n  250 103.8 125.95 143.361 135.15 152.30 262.4   100\n  500  99.5 113.90 131.679 120.85 133.60 265.3   100\n 1000 100.3 115.90 133.138 122.40 137.80 323.0   100\n\n\n\n\nRolling medians\n\nresult &lt;- microbenchmark(\"125\" = roll_median(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_median(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_median(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_median(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n\nUnit: microseconds\n expr     min       lq      mean   median       uq     max neval\n  125  4761.9  5224.85  7398.516  5607.95  8128.40 17679.6   100\n  250  9031.8 10162.55 13871.204 10614.35 15502.50 27164.7   100\n  500 17301.2 18006.35 23287.607 19404.70 27288.45 42737.5   100\n 1000 23223.6 25107.05 32203.130 28160.65 39523.40 57024.5   100\n\n\n\n\nRolling quantiles\n\nresult &lt;- microbenchmark(\"125\" = roll_quantile(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_quantile(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_quantile(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_quantile(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n\nUnit: microseconds\n expr     min       lq      mean   median       uq     max neval\n  125  4740.0  5036.65  6993.641  5408.00  7834.75 17076.2   100\n  250  8780.5  9836.30 13384.089 10613.65 15304.80 27246.3   100\n  500 16305.3 17872.80 23975.998 20459.65 29551.40 41000.9   100\n 1000 24395.9 24841.05 32893.480 29825.15 41765.40 46752.2   100\n\n\n\n\nRolling variances\n\\[\n\\begin{aligned}\n&\\text{Expanding window}\\\\\n&\\bullet\\text{sum}_{w}\\leftarrow\\text{sum}_{w}+\\text{w}_{new}\\\\\n&\\bullet\\text{sumsq}_{w}\\leftarrow\\text{sumsq}_{w}+\\text{w}_{new}^{2}\\\\\n&\\bullet\\text{sumsq}_{x}\\leftarrow\\lambda\\times\\text{sumsq}_{x}+\\text{w}_{new}\\times (\\text{x}_{new}-\\text{mean}_{x})(\\text{x}_{new}-\\text{mean}_{prev_x})\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{sumsq}_{x}\\leftarrow\\lambda\\times\\text{sumsq}_{x}+\\text{w}_{new}\\times (\\text{x}_{new}-\\text{mean}_{x})(\\text{x}_{new}-\\text{mean}_{prev_x})-\\\\\n&\\lambda\\times\\text{w}_{old}\\times (\\text{x}_{old}-\\text{mean}_{x})(\\text{x}_{old}-\\text{mean}_{prev_x})\n\\end{aligned}\n\\]\n\nresult &lt;- microbenchmark(\"125\" = roll_var(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_var(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_var(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_var(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 122.1 147.95 158.831 155.35 162.20 307.2   100\n  250 118.8 144.00 157.300 151.40 161.40 410.9   100\n  500 115.2 141.05 153.360 151.30 158.20 248.8   100\n 1000 115.6 136.30 148.578 144.95 151.65 239.2   100\n\n\n\n\nRolling standard deviations\n\nresult &lt;- microbenchmark(\"125\" = roll_sd(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_sd(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_sd(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_sd(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 113.3 145.60 160.591 157.40 169.45 252.3   100\n  250 122.4 148.65 160.883 156.80 166.65 262.6   100\n  500 115.0 144.95 158.967 155.75 164.80 384.6   100\n 1000 113.8 140.15 151.355 148.75 157.10 233.6   100\n\n\n\n\nRolling scaling and centering\n\nresult &lt;- microbenchmark(\"125\" = roll_scale(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_scale(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_scale(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_scale(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n\nUnit: microseconds\n expr   min     lq    mean median     uq   max neval\n  125 144.6 162.35 181.872 176.10 186.60 295.9   100\n  250 148.6 158.70 176.836 172.65 183.80 268.8   100\n  500 147.0 158.55 183.520 172.85 189.75 427.0   100\n 1000 144.0 150.20 169.861 161.00 179.70 265.9   100\n\n\n\n\nRolling covariances\n\\[\n\\begin{aligned}\n&\\text{Expanding window}\\\\\n&\\bullet\\text{sum}_{w}\\leftarrow\\text{sum}_{w}+\\text{w}_{new}\\\\\n&\\bullet\\text{sumsq}_{w}\\leftarrow\\text{sumsq}_{w}+\\text{w}_{new}^{2}\\\\\n&\\bullet\\text{sumsq}_{xy}\\leftarrow\\lambda\\times\\text{sumsq}_{xy}+\\text{w}_{new}\\times (\\text{x}_{new}-\\text{mean}_{x})(\\text{y}_{new}-\\text{mean}_{prev_y})\\\\\n&\\text{Rolling window}\\\\\n&\\bullet\\text{sumsq}_{xy}\\leftarrow\\lambda\\times\\text{sumsq}_{xy}+\\text{w}_{new}\\times (\\text{x}_{new}-\\text{mean}_{x})(\\text{y}_{new}-\\text{mean}_{prev_y})-\\\\\n&\\lambda\\times\\text{w}_{old}\\times (\\text{x}_{old}-\\text{mean}_{x})(\\text{y}_{old}-\\text{mean}_{prev_y})\n\\end{aligned}\n\\]\n\nresult &lt;- microbenchmark(\"125\" = roll_cov(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_cov(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_cov(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_cov(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n\nUnit: microseconds\n expr   min      lq     mean  median      uq    max neval\n  125 832.4 1065.85 1216.415 1117.20 1183.65 5998.5   100\n  250 938.2 1050.30 1123.221 1104.30 1183.90 1394.3   100\n  500 918.4 1039.55 1096.597 1088.25 1160.50 1302.7   100\n 1000 847.0  987.45 1198.954 1034.25 1082.45 6408.1   100\n\n\n\n\nRolling correlations\n\nresult &lt;- microbenchmark(\"125\" = roll_cor(x, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_cor(x, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_cor(x, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_cor(x, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n\nUnit: microseconds\n expr    min      lq     mean  median     uq    max neval\n  125 1073.6 1216.60 1494.950 1301.50 1371.0 6146.6   100\n  250 1059.2 1204.75 1515.300 1275.30 1347.4 6016.6   100\n  500  993.1 1194.35 1394.831 1245.15 1324.3 5789.4   100\n 1000  972.7 1134.25 1269.765 1186.10 1228.2 4834.3   100\n\n\n\n\nRolling linear models\n\\[\n\\begin{aligned}\n&\\text{coef}=\\text{cov}_{xx}^{-1}\\times\\text{cov}_{xy}\\\\\n&\\text{intercept}=\\text{mean}_{y}-\\text{coef}\\times\\text{mean}_{x}\\\\\n&\\text{rsq}=\\frac{\\text{coef}^{T}\\times\\text{cov}_{xx}\\times\\text{coef}}{\\text{var}_{y}}\\\\\n&\\text{var}_{resid}=\\frac{(1-\\text{rsq})(\\text{var}_{y})(\\text{sum}_{w}-\\text{sumsq}_{w}/\\text{sum}_{w})}{\\text{n}_{rows}-\\text{n}_{cols}}\\\\\n&\\text{xx}=\\text{cov}_{xx}\\times(\\text{sum}_{w}-\\text{sumsq}_{w}/\\text{sum}_{w})\\\\\n&\\text{se}_{coef}=\\sqrt{\\text{var}_{resid}\\times\\text{diag}(\\text{xx}^{-1})}\\\\\n&\\text{se}_{intercept}=\\sqrt{\\text{var}_{resid}\\left(1/\\text{sum}_{w}+\\text{mean}_{x}^{T}\\text{xx}^{-1}\\text{mean}_{x}\\right)}\n\\end{aligned}\n\\]\n\nresult &lt;- microbenchmark(\"125\" = roll_lm(x, y, width = 125, min_obs = 1, weights = weights),\n                         \"250\" = roll_lm(x, y, width = 250, min_obs = 1, weights = weights),\n                         \"500\" = roll_lm(x, y, width = 500, min_obs = 1, weights = weights),\n                         \"1000\" = roll_lm(x, y, width = 1000, min_obs = 1, weights = weights))\nprint(result)\n\nUnit: microseconds\n expr    min      lq     mean  median      uq     max neval\n  125 3984.1 4581.95 7343.179 7848.90 9632.95 24557.8   100\n  250 3767.6 4489.20 6844.886 5320.25 9256.05 13027.8   100\n  500 3702.5 4386.10 6499.245 5396.55 8906.40 11296.9   100\n 1000 3533.2 3978.50 5996.301 4878.90 8164.40 12258.6   100\n\n\n\n\nReferences\n\nhttps://stackoverflow.com/a/9933794\nhttps://stackoverflow.com/a/11316626\nhttps://stackoverflow.com/a/34363187\nhttps://stackoverflow.com/a/243342\nhttps://stats.stackexchange.com/a/64217\nhttps://stackoverflow.com/a/51992954\nhttps://stackoverflow.com/a/25921772\nhttps://stackoverflow.com/a/40416506\nhttps://stackoverflow.com/a/5970314\nhttps://gist.github.com/ashelly/5665911\nhttps://stackoverflow.com/a/51992954"
  }
]