# Black-Litterman

## Prior distribution

$$
\begin{aligned}
\text{Risk aversion: } &\lambda=\frac{E(r)-r_{f}}{\sigma^{2}}=\frac{IR}{\sigma}\\
\text{Implied returns: } &\Pi=\lambda\Sigma w\\
\text{Distribution: } &N\sim(\Pi,\tau\Sigma)
\end{aligned}
$$

```{r}
implied_pnl <- function(params, ir, sigma) {
    
    lmbda <- as.numeric(ir / sqrt(t(params) %*% sigma %*% params))
    
    result <- lmbda * sigma %*% params
    
    return(result)    
    
}
```

```{r}
implied_pnl(params3, ir, sigma)
```

## Conditional distribution

$$
\begin{aligned}
\text{Prior mean variance: } &\tau\in(0.01, 0.05)\approx(0.025)\\
\text{Asset views: } &\mathbf{P}={\begin{bmatrix}
p_{11}&\cdots&p_{1n}\\
\vdots&\ddots&\vdots\\
p_{k1}&\cdots&p_{kn}
\end{bmatrix}}=
{\begin{bmatrix}
0&0&0&0&0&0&1&0\\
-1&1&0&0&0&0&0&0\\
0&0&0.5&-0.5&0.5&-0.5&0&0
\end{bmatrix}}\\
\text{View returns: } &\mathbf{Q}={\begin{bmatrix}
q_{1}\\
\vdots\\
q_{k}
\end{bmatrix}}=
{\begin{bmatrix}
0.0525\\
0.0025\\
0.0200
\end{bmatrix}}\\
\text{View confidence: } &\mathbf{C}={\begin{bmatrix}
c_{1}\\
\vdots\\
c_{k}
\end{bmatrix}}=
{\begin{bmatrix}
0.2500\\
0.5000\\
0.6500
\end{bmatrix}}\\
\text{View covariance: } &\mathbf{\Omega}={\begin{bmatrix}
\tau\left(\frac{1-c_{1}}{c_{1}}\right)\left(p_{1}\Sigma p_{1}^{T}\right)&0&0\\
0&\ddots&0\\
0&0&\tau\left(\frac{1-c_{k}}{c_{k}}\right)\left(p_{k}\Sigma p_{k}^{T}\right)
\end{bmatrix}}\\
\text{Distribution: } &N\sim(\mathbf{Q}, \mathbf{\Omega})
\end{aligned}
$$

## Posterior distribution

$$
\begin{aligned}
\text{Implied returns: } &\hat{\Pi}=\Pi+\tau\Sigma \mathbf{P}^{T}\left(\tau \mathbf{P}\Sigma \mathbf{P}^{T}+\mathbf{\Omega}\right)^{-1}\left(\mathbf{Q}-\mathbf{P}\Pi^{T}\right)\\
\text{Covariance: } &\hat{\Sigma}=\Sigma+\tau\left[\Sigma-\Sigma\mathbf{P}^{T}\left(\tau\mathbf{P}\Sigma\mathbf{P}^{T}+\mathbf{\Omega}\right)^{-1}\tau\mathbf{P}\Sigma\right]\\
\text{Weights: } &\hat{w}=\hat{\Pi}\left(\lambda\Sigma\right)^{-1}\\
\text{Distribution: } &N\sim\left(\left[\left(\tau\Sigma\right)^{-1}+\mathbf{P}^{T}\Omega^{-1}\mathbf{P}\right]^{-1}\left[\left(\tau\Sigma\right)^{-1}\Pi+\mathbf{P}^{T}\Omega^{-1}\mathbf{Q}\right],\left[\left(\tau\Sigma\right)^{-1}+\mathbf{P}^{T}\Omega^{-1}\mathbf{P}\right]^{-1}\right)
\end{aligned}
$$

```{r}
black_litterman <- function(params, ir, sigma, views) {
    
    # prior distribution
    weights_prior <- params
    sigma_prior <- sigma    
    lmbda <- as.numeric(ir / sqrt(t(weights_prior) %*% sigma %*% weights_prior))
    pi_prior <- lmbda * sigma_prior %*% weights_prior
    
    # matrix calculations
    matmul_left <- views[["tau"]] * sigma_prior %*% t(views[["P"]])
    matmul_mid <- views[["tau"]] * views[["P"]] %*% sigma_prior %*% t(views[["P"]])
    matmul_right <- views[["Q"]] - views[["P"]] %*% pi_prior
    
    # conditional distribution
    omega <- diag(diag(diag((1 - views[["C"]]) / views[["C"]]) %*% matmul_mid))
        
    # posterior distribution
    pi_posterior <- pi_prior + matmul_left %*% solve(matmul_mid + omega) %*% matmul_right

    sigma_posterior <- sigma_prior +  views[["tau"]] * sigma_prior -
        matmul_left %*% solve(matmul_mid + omega) %*% (tau * views[["P"]] %*% sigma_prior)
    
    weights_posterior <- t(pi_posterior) %*% solve(lmbda * sigma_prior)
    
    # implied confidence
    pi_posterior_100 <- pi_prior + matmul_left %*% solve(matmul_mid) %*% matmul_right
    
    weights_posterior_100 <- t(pi_posterior_100) %*% solve(lmbda * sigma_prior)
    
    implied_confidence <- (weights_posterior - weights_prior) / (weights_posterior_100 - weights_prior)
    
    result <- list("implied_confidence" = implied_confidence,
                   "weights_prior" = t(as.matrix(weights_prior)),
                   "weights_posterior" = weights_posterior,
                   "pi_prior" = t(pi_prior),
                   "pi_posterior" = t(pi_posterior),
                   "sigma_prior" = sigma_prior,
                   "sigma_posterior" = sigma_posterior)
    
    return(result)   
    
}
```

```{r}
tau <- 0.025
P <- diag(length(factors))
Q <- t(implied_shocks(0.1, overlap_x_xts, overlap_x_xts[ , 1], 1))
C <- rep(0.95, length(factors))
views <- list("tau" = tau, "P" = P, "Q" = Q, "C" = C)
```

```{r}
bl <- black_litterman(as.vector(params3), ir, sigma, views)
bl
```

```{r}
params4 <- as.vector(bl[["weights_posterior"]])
params4 <- params4 / sum(params4) # no leverage
params4
```

```{r}
mu %*% params4
```

```{r}
sqrt(t(params4) %*% sigma %*% params4)
```

# Risk parity

Risk parity is an approach to portfolio management that focuses on allocation of risk rather than allocation of capital. In a risk parity strategy, the asset allocations are leveraged, or deleveraged, to have equal risk contributions. Suppose that $\mathbf{R}$ is a $T \times N$ matrix of asset returns where the return of the $i^{th}$ asset is $R_{i,t}$ at time $t$. Define $\Sigma$ to be the covariance matrix of $\mathbf{R}$ and let $\mathbf{w}=(w_{1},\dots,w_{N})$ be a vector of asset weights. Then the volatility of the return of the strategy is $\sigma_{P}=\sqrt{\mathbf{w}^T\Sigma\mathbf{w}}$ and, by Euler's Theorem, satisfies: 

$$
\begin{aligned}
\sigma_{P}&=\sum_{i=1}^{N}w_{i}\frac{\partial\sigma_{P}}{\partial w_{i}}\\
&=w_{1}\frac{\partial\sigma_{P}}{\partial w_{1}}+\dots+w_{N}\frac{\partial\sigma_{P}}{\partial w_{N}}
\end{aligned}
$$

where each element is the risk contribution of the $i^{th}$ risky asset. The risk parity objective solves for weights such that each asset contributes equal risk using the following nonlinear constrained optimization problem:

$$
\begin{aligned}
\begin{array}{rrcl}
\displaystyle\max_{x}&\displaystyle\sum_{i=1}^{N}\log(w_{i})\\
\textrm{s.t.}&\sqrt{\mathbf{w}^T\Sigma\mathbf{w}}&\leq&\sigma 
\end{array}
\end{aligned}
$$

To incorporate these conditions into one equation, introduce a new variable $\lambda$ that is the Lagrange multiplier and define a new function $\mathcal{L}$ as follows:

$$
\begin{aligned}
\mathcal{L}(\mathbf{w},\lambda)&=\sum_{i=1}^{N}\log(w_{i})-\lambda(\sqrt{\mathbf{w}^T\Sigma\mathbf{w}}-\sigma)
\end{aligned}
$$

Then set the partial derivatives of $\mathcal{L}$ equal to zero for each asset $i$:

$$
\begin{aligned}
\frac{\partial\mathcal{L}(\mathbf{w},\lambda)}{\partial w_{i}}&=\frac{1}{w_{i}}-\lambda\frac{\partial\sigma_{P}}{\partial w_{i}}=0
\Leftrightarrow
w_{i}\frac{\partial\sigma_{P}}{\partial w_{i}}=\frac{1}{\lambda}
\end{aligned}
$$

Notice that $1/\lambda$ is the risk contribution of the $i^{th}$ asset. Now use `R` to maximize the Lagrangian numerically:

```{r}
# http://faculty.washington.edu/ezivot/econ424/riskbudgetingslides.pdf
# https://systematicinvestor.wordpress.com/2011/11/16/black-litterman-model/
# https://cran.r-project.org/web/packages/BLCOP/vignettes/BLCOP.pdf
# http://math.stackexchange.com/questions/17776/inverse-of-the-sum-of-matrices
risk_parity_optim <- function(sigma, target) {
    
    params <- Variable(nrow(sigma))
    
    risk <- quad_form(params, sigma)
    risk_contrib <- target ^ 2 / nrow(sigma)
            
    obj <- Maximize((sum(log(params)) - (1 / risk_contrib) * (risk - target ^ 2)))
        
    result <- solve(Problem(obj))$getValue(params)
    result <- result / sum(result) # no leverage
    
    return(result)

}
```

```{r}
target <- 1
```

```{r}
params5 <- risk_parity_optim(sigma, target)
params5
```

```{r}
risk <- as.numeric(sqrt(t(params5) %*% sigma %*% params5))
risk_contrib <- params5 * sigma %*% params5 / risk
risk_contrib
```

```{r}
mu %*% params5
```

```{r}
sqrt(t(params5) %*% sigma %*% params5)
```

# Portfolio attribution

## Single-period

The arithmetic active return is commonly decomposed using the Brinson-Fachler method:

$$
\begin{aligned}
\text{Allocation: } &r_{a}=\sum_{k=1}^{n}(w_{p,k}-w_{b,k})(r_{b,k}-r_{b})\\
\text{Selection: } &r_{s}=\sum_{k=1}^{n}w_{p,k}(r_{p,k}-r_{b,k})\\
\end{aligned}
$$

where $k=1,\ldots,n$ is each sector or factor.

## Multi-period

Arithmetic attributes add to the active return of a single period; however, they cannot be summed or compounded to explain the active return over multiple periods. To solve this problem, the original arithmetic attribute is multiplied by a single scaling coefficient for that period. After all single-period original attributes have been transformed, the adjusted attributes sum to the active return over the periods.

$$
\begin{aligned}
\text{Carino scaling coefficient: } &c_{t}=\frac{[\ln(1+r_{p,t})-\ln(1+r_{b,t})]/(r_{p,t}-r_{b,t})}{[\ln(1+r_{p})-\ln(1+r_{b})]/(r_{p}-r_{b})}
\end{aligned}
$$

where $t=1,\ldots,n$ is each period.

```{r}
# http://www.frongello.com/support/Works/Chap20RiskBook.pdf
# https://github.com/R-Finance/PortfolioAttribution/blob/master/R/Carino.R
pnl_attrib <- function(params, x) {
    
    total_i <- rowSums(x)
    total <- prod(1 + total_i) - 1
    
    coef <- (log(1 + total_i) / total_i) / (log(1 + total) / total)
    
    result <- colSums(x * coef)
    
    return(result)
    
}
```

```{r}
attrib_mat <- sweep(tail(na.omit(returns_xts)[ , factors], width), 2, params1, "*")
```

```{r}
pnl_attrib(params1, attrib_mat)
```
