---
title: "Cloud"
author: "[Jason Foster](mailto:jason.j.foster@gmail.com)"
date: last-modified
categories:
  - computing
  - python
  - r
---

# Amazon Elastic Compute Cloud (EC2)

## Secure Shell

`EC2 > Network & Security > Key Pairs > Create Key Pair > *.pem`

`PuTTYgen > Load an existing private key file > Save private key > *.ppk`

Host Name: `ec2-user\@ec2-1-23-456-789.us-east-2.compute.amazonaws.com`

`Connection > SSH > Auth & WinSCP > Auth > Private key file for authentication`

```         
sudo yum update
```

## Jupyter Server

Install `Amazon Linux 2`

```         
wget https://repo.anaconda.com/archive/Anaconda3-2023.03-Linux-x86_64.sh

bash Anaconda3-2023.03-Linux-x86_64.sh
```

Then close and re-open current shell

-   <https://pypi.org/project/ipython/#history>

-   <https://stackoverflow.com/a/76521018>

-   <https://stackoverflow.com/a/77117477>

```         
pip install 'ipython==7.34.0' --force-reinstall
ipython
from IPython.lib import passwd
passwd("12345")
# sha1:asdfasdf:asfasdfasdf
exit()
```

```         
jupyter notebook --generate-config 
vi ~/.jupyter/jupyter_notebook_config.py

# [i]
c = get_config()  # Get the config object.
# c.NotebookApp.certfile = u'/home/ubuntu/ssl/cert.pem' # path to the certificate we generated
# c.NotebookApp.keyfile = u'/home/ubuntu/ssl/cert.key' # path to the certificate key we generated
c.NotebookApp.ip = '0.0.0.0' # serve notebooks locally
c.NotebookApp.open_browser = False # do not open a browser window by default when using notebooks.
c.NotebookApp.password = 'sha1:asdfasdf:asfasdfasdf'
# [ESC][:wq][ENTER]
```

```         
# nohup jupyter notebook
nohup jupyter lab
```

Then close and re-open current shell

```         
jupyter nbconvert --to python <notebook>.ipynb
sudo service crond start
crontab -e
# [i]
# https://crontab.guru/
# * * * * * /home/ec2-user/anaconda3/bin/python /home/ec2-user/<notebook>.py
# [ESC][:wq][ENTER]
```

-   <http://1.23.456.789:8888>

## RStudio Server

-   <https://aws.amazon.com/blogs/big-data/running-r-on-aws/>

Install `R`

```         
sudo su
# yum install -y R # Amazon Linux
# amazon-linux-extras list
sudo amazon-linux-extras install R3.4 # Amazon Linux 2
```

Install `RStudio Server`

-   <https://posit.co/download/rstudio-server/>

```         
wget https://download2.rstudio.org/server/centos6/x86_64/rstudio-server-rhel-1.2.5019-x86_64.rpm
yum install rstudio-server-rhel-1.2.5019-x86_64.rpm
rm rstudio-server-rhel-1.2.5019-x86_64.rpm
```

Install `Shiny Server`

-   <https://posit.co/download/shiny-server/>

```         
R -e "install.packages('shiny', repos = 'http://cran.rstudio.com/')"
wget https://download3.rstudio.org/centos6.3/x86_64/shiny-server-1.5.12.933-x86_64.rpm
yum install --nogpgcheck shiny-server-1.5.12.933-x86_64.rpm
rm shiny-server-1.5.12.933-x86_64.rpm
```

Add user(s)

```         
useradd -m jjf234
sudo passwd jjf234 # prompt to enter password
```

Need to create `/ShinyApps` under `/ec2-user` and then subfolders with code, e.g. `/home/ec2-user/ShinyApps/hello`

```         
# sudo /opt/shiny-server/bin/deploy-example user-dirs
# mkdir ~/ShinyApps
# sudo cp -R /opt/shiny-server/samples/sample-apps/hello ~/ShinyApps
```

Install `devtools`

```         
sudo yum install libcurl-devel
sudo yum install openssl-devel
sudo yum install libxml2-devel
R -e "install.packages('devtools', repos = 'http://cran.rstudio.com/')"
```

Install `RcppParallel`

```         
R -e "install.packages('RcppParallel', repos = 'http://cran.rstudio.com/')"
```

Install `RcppArmadillo`

```         
R -e "install.packages('RcppArmadillo', repos = 'http://cran.rstudio.com/')"
```

Install other packages

```         
R -e "install.packages(c('data.table', 'xts', 'testthat', 'microbenchmark'),
repos = 'http://cran.rstudio.com/')"
```

Install `roll`

```         
R -e "devtools::install_github('jjf234/roll')"
```

-   <http://1.23.456.789:8787/>
-   <http://1.23.456.789:3838/ec2-user/hello/>

# Amazon Route 53

-   <https://www.clickittech.com/aws/migrate-godaddy-to-aws-route53/>
-   <https://blog.shikisoft.com/transferring-domain-registrations-from-godaddy-to-amazon-route-53/>

Use Amazon Route 53 as the DNS service provider:

-   Click `Create Hosted Zone` in AWS
-   Click `Create Record Set` in AWS: copy existing records from GoDaddy to AWS
-   Change nameserver types in GoDaddy

Transfer registration for a domain to Amazon Route 53:

-   Remove privacy and turn off `Domain Lock` in GoDaddy
-   Wait until email is received that the domain status changed
-   Get authorization code from GoDaddy
-   Go to `Domains > Registered domains > Transfer Domain` in AWS
-   Type the authorization codes and nameserver options
-   Select `Import name servers from a Route 53 hosted zone that has the same name as the domain`
-   `Monitor Domains > Pending requests: 'Domain transfer in progress'`
-   Wait until email is received to authorize the transfer or status is changed
-   `Domain transfer in progress: Waiting for the current registrar to approve the transfer. This can take up to 10 days depending on the TLD and the current registrar`
-   Go to `My Domains > Pending transfer out > View details` in GoDaddy
-   Click `Accept or decline > Accept transfer`
