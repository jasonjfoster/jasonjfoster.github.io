---
title: "Cloud computing"
author: "Jason Foster"
date: "2023-10-23"
categories: [software]

---

# Amazon Elastic Compute Cloud (EC2)

* Instance Types: <https://aws.amazon.com/ec2/instance-types/>
* Pricing: <https://aws.amazon.com/ec2/pricing/on-demand/>

## Secure Shell

```
# EC2 > Network & Security > Key Pairs > Create Key Pair > *.pem
# PuTTYgen > Load an existing private key file > Save private key > *.ppk
```

```
# Host Name: ec2-user@ec2-1-23-456-789.us-east-2.compute.amazonaws.com 
# Connection > SSH > Auth & WinSCP > Auth > Private key file for authentication
    
sudo yum update
```

## Jupyter Server
    
* Setup: <https://docs.aws.amazon.com/dlami/latest/devguide/setup-jupyter.html>

```
# Amazon Linux 2
wget https://repo.anaconda.com/archive/Anaconda3-2023.03-Linux-x86_64.sh

bash Anaconda3-2023.03-Linux-x86_64.sh
# then close and re-open current shell
```

```
# cd ~
# mkdir ssl
# cd ssl
# sudo openssl req -x509 -nodes -days 365 -newkey rsa:1024 -keyout "cert.key" -out "cert.pem" -batch
```

```
# https://pypi.org/project/ipython/#history
pip install 'ipython==7.34.0' --force-reinstall
ipython
from IPython.lib import passwd
passwd("12345")
# sha1:asdfasdf:asfasdfasdf
exit()
```

```
jupyter notebook --generate-config 
vi ~/.jupyter/jupyter_notebook_config.py

# [i]
c = get_config()  # Get the config object.
# c.NotebookApp.certfile = u'/home/ubuntu/ssl/cert.pem' # path to the certificate we generated
# c.NotebookApp.keyfile = u'/home/ubuntu/ssl/cert.key' # path to the certificate key we generated
c.NotebookApp.ip = '0.0.0.0' # serve notebooks locally
c.NotebookApp.open_browser = False  # do not open a browser window by default when using notebooks.
c.NotebookApp.password = 'sha1:asdfasdf:asfasdfasdf'
# [ESC][:wq][ENTER]
```

```
# nohup jupyter notebook
nohup jupyter lab
# then close and re-open current shell
```

```
jupyter nbconvert --to python <notebook>.ipynb
sudo service crond start
crontab -e
# [i]
# https://crontab.guru/
# * * * * * /home/ec2-user/anaconda3/bin/python /home/ec2-user/<notebook>.py
# [ESC][:wq][ENTER]
```

```
# http://1.23.456.789:8888
```

## RStudio Server

* Setup: <https://aws.amazon.com/blogs/big-data/running-r-on-aws/>

```
# install R
sudo su
# yum install -y R # Amazon Linux
# amazon-linux-extras list
sudo amazon-linux-extras install R3.4 # Amazon Linux 2
```

```
# https://www.rstudio.com/products/rstudio/download-server/
# install RStudio Server 1.2.5019 (2019-11-01)
wget https://download2.rstudio.org/server/centos6/x86_64/rstudio-server-rhel-1.2.5019-x86_64.rpm
yum install rstudio-server-rhel-1.2.5019-x86_64.rpm
rm rstudio-server-rhel-1.2.5019-x86_64.rpm

# https://www.rstudio.com/products/shiny/download-server/
# install Shiny Server (2019-09-09)
R -e "install.packages('shiny', repos = 'http://cran.rstudio.com/')"
wget https://download3.rstudio.org/centos6.3/x86_64/shiny-server-1.5.12.933-x86_64.rpm
yum install --nogpgcheck shiny-server-1.5.12.933-x86_64.rpm
rm shiny-server-1.5.12.933-x86_64.rpm
```

```
# add user(s)
useradd -m jjf234
sudo passwd jjf234 # prompt to enter password
```

```
# sudo /opt/shiny-server/bin/deploy-example user-dirs
# mkdir ~/ShinyApps
# sudo cp -R /opt/shiny-server/samples/sample-apps/hello ~/ShinyApps

# need to create '/ShinyApps' under '/ec2-user' and then subfolders with code
# e.g.: /home/ec2-user/ShinyApps/hello
```

```
# install devtools
sudo yum install libcurl-devel
sudo yum install openssl-devel
sudo yum install libxml2-devel
R -e "install.packages('devtools', repos = 'http://cran.rstudio.com/')"

# install RcppParallel
R -e "install.packages('RcppParallel', repos = 'http://cran.rstudio.com/')"

# install RcppArmadillo
R -e "install.packages('RcppArmadillo', repos = 'http://cran.rstudio.com/')"

# install other packages
R -e "install.packages(c('data.table', 'xts', 'testthat', 'microbenchmark'),
repos = 'http://cran.rstudio.com/')"

# install roll
R -e "devtools::install_github('jjf234/roll')"
```

```
# http://1.23.456.789:8787/
# http://1.23.456.789:3838/ec2-user/hello/
```

# Amazon Route 53

* <https://www.clickittech.com/aws/migrate-godaddy-to-aws-route53/>
* <https://blog.shikisoft.com/transferring-domain-registrations-from-godaddy-to-amazon-route-53/>

```
# use Amazon Route 53 as the DNS service provider
# - create Hosted Zone in AWS
# - create Record Set in AWS: copy existing records from GoDaddy to AWS
# - change nameserver types in GoDaddy
```

```
# transfer registration for a domain to Amazon Route 53
# - remove privacy and turn off Domain Lock in GoDaddy
# - wait until email is received that the domain status changed
# - get authorization code from GoDaddy
# - go to Domains > Registered domains > Transfer Domain in AWS
# - type the authorization codes and nameserver options
# - select "Import name servers from a Route 53 hosted zone that has the same name as the domain"
# - monitor Domains > Pending requests: "Domain transfer in progress"
# - wait until email is received to authorize the transfer or status is changed
# - "Domain transfer in progress: Waiting for the current registrar to approve the transfer.
#   This can take up to 10 days depending on the TLD and the current registrar"
# - go to My Domains > Pending transfer out > View details in GoDaddy
# - click "Accept or decline" > "Accept transfer"
```