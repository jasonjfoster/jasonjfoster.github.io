---
title: "Optimization"
author: "[Jason Foster](mailto:jason.j.foster@gmail.com)"
date: last-modified
categories:
  - analysis
  - finance
  - python
---

```{python, echo = FALSE}
# closed: https://github.com/rstudio/rstudio/issues/5945
# closed: https://github.com/rstudio/reticulate/issues/808
# closed: https://github.com/rstudio/reticulate/issues/847
# open: "run all chunks"
```

```{r, echo = FALSE, message = FALSE}
library(reticulate)
library(data.table)
source("../plot/theme_jjf.R")
```

```{python}
import pandas as pd
import numpy as np
import statsmodels.api as sm
import pandas_datareader as pdr
from scipy.stats import norm, chi2
```

```{python}
factors_r = ["SP500", "DTWEXAFEGS"] # "SP500" does not contain dividends; note: "DTWEXM" discontinued as of Jan 2020
factors_d = ["DGS10", "BAMLH0A0HYM2"]
factors = factors_r + factors_d
width = 252
scale = {"periods": 252, "overlap": 5}
```

```{r, echo = FALSE}
palette <- c("black", palette_jjf(length(py$factors)))
names(palette) <- c("Overall", py$factors)
```

-   <https://pandas-datareader.readthedocs.io/en/latest/remote_data.html>

```{python}
levels_df = pdr.get_data_fred(factors, start = "1900-01-01")
```

```{python}
returns_df = levels_df.apply(lambda x: np.log(x).diff() if x.name in factors_r else -x.diff() / 100)
overlap_df = returns_df.rolling(scale["overlap"], min_periods = 1).mean()
returns_df = pd.concat([returns_df, overlap_df], keys = ["returns", "overlap"], axis = 1)
```

```{python}
import os
from scipy.optimize import minimize
```

-   Open: <https://github.com/pydata/pandas-datareader/issues/965>

```{python}
tickers = ["BAICX"] # fund inception date is "2011-11-28"
prices_df = pdr.get_data_tiingo(tickers, start = "1900-01-01", api_key = os.getenv("TIINGO_API_KEY"))
prices_df = prices_df.pivot_table(index = "date", columns = "symbol", values = "adjClose") \
    .tz_localize(None)
```

```{python}
returns_cols = list(zip(["returns"], tickers))
overlap_cols = list(zip(["overlap"], tickers))
returns_df[returns_cols] = np.log(prices_df).diff()
returns_df[overlap_cols] = returns_df[returns_cols].rolling(scale["overlap"], min_periods = 1).mean()
returns_df.sort_index(axis = 1, inplace = True)
```

```{python}
# weights = np.array([0.9 ** i for i in range(width - 1, -1, -1)]).reshape((width, 1))
weights = np.array([1] * width).reshape((width, 1))
```

```{python}
overlap_df = returns_df.dropna()["overlap"]
overlap_x_df = returns_df.dropna()["overlap"][factors][-width:] # same dimension as `weights`
overlap_y_df = returns_df.dropna()["overlap"][tickers][-width:]
```

# Random weights

Need to generate uniformly distributed weights $\mathbf{w}=(w_{1},w_{2},\ldots,w_{N})$ such that $\sum_{j=1}^{N}w_{i}=1$ and $w_{i}\geq0$:

-   **Approach 1**: tempting to use $w_{i}=\frac{u_{i}}{\sum_{j=1}^{N}u_{i}}$ where $u_{i}\sim U(0,1)$ but the distribution of $\mathbf{w}$ is not uniform

-   **Approach 2**: instead, generate $\text{Exp}(1)$ and then normalize

Can also scale random weights by $M$, e.g. if sum of weights must be 10% then multiply weights by 10%.

```{python}
def rand_weights1(n_sim, n_assets):  
    
    rand_exp = np.matrix(np.random.uniform(size = (n_sim, n_assets)))
    rand_exp_sum = np.sum(rand_exp, axis = 1)
    
    result = rand_exp / rand_exp_sum
    
    return result
```

```{python}
n_assets = 3
n_sim = 10000
```

```{python}
approach1 = rand_weights1(n_sim, n_assets)
```

```{r, echo = FALSE, fig.width = 4, fig.height = 4}
plot_pairs(as.data.table(py$approach1), title = "Weight (%)")
```

**Approach 2**: uniform sampling from the simplex (<http://mathoverflow.net/a/76258>)

-   $z\sim U(0,1)$ then $-\ln(z)$ is an $\text{Exp}(1)$ distribution

This is also known as generating a random vector from the symmetric Dirichlet distribution.

```{python}
def rand_weights2(n_sim, n_assets, lmbda):   
    
    rand_exp = np.matrix(-np.log(1 - np.random.uniform(size = (n_sim, n_assets))) / lmbda)
    rand_exp_sum = np.sum(rand_exp, axis = 1)
    
    result = rand_exp / rand_exp_sum
    
    return result
```

```{python}
lmbda = 1
```

```{python}
approach2 = rand_weights2(n_sim, n_assets, lmbda)
```

```{r, echo = FALSE, fig.width = 4, fig.height = 4}
plot_pairs(as.data.table(py$approach2), title = "Weight (%)")
```

**Approach 3**

1. Generate $\text{Exp}(1)$ random variables $x_{1},x_{2},\ldots,x_{N}$
2. Let $y_{i}=\frac{x_{i}}{\sum_{i=1}^{N}x_{i}}$

```{python}
def rand_weights3(n_sim, n_assets):
    
    rand_exp = np.matrix(np.random.exponential(size = (n_sim, n_assets)))
    rand_exp_sum = np.sum(rand_exp, axis = 1)
    
    result = rand_exp / rand_exp_sum
    
    return result
```

```{python}
approach3 = rand_weights3(n_sim, n_assets)
```

```{r, echo = FALSE, fig.width = 4, fig.height = 4}
plot_pairs(as.data.table(py$approach3), title = "Weight (%)")
```

## Random turnover

How to generate random weights between lower bound $a$ and upper bound $b$ that sum to zero?

-   **Approach 1**: tempting to multiply random weights by $M$ and then subtract by $\frac{M}{N}$ but the distribution is not between $a$ and $b$

-   **Approach 2**: instead, use an iterative approach for random turnover:

    1.  Generate $N-1$ uniformly distributed weights between $a$ and $b$
    2.  For $u_{N}$ compute sum of values and subtract from $M$
    3.  If $u_{N}$ is between $a$ and $b$, then keep; otherwise, discard

Then add random turnover to previous period's random weights.

```{python}
def rand_iterative(n_assets, lower, upper, target):
    
    plug = False
    
    while not plug:
        
        result = np.random.uniform(low = lower, high = upper, size = n_assets - 1)
        temp = target - sum(result)
        
        if ((temp <= upper) and (temp >= lower)):
            plug = True
        
    result = np.append(result, temp)
    
    return result
```

```{python}
def rand_turnover1(n_sim, n_assets, lower, upper, target):
    
    rng = upper - lower
    
    result = rand_weights3(n_sim, n_assets) * rng
    result = result - rng / n_assets
    
    return result
```

```{python}
def rand_turnover2(n_sim, n_assets, lower, upper, target):
    
    result = np.matrix(rand_iterative(n_assets, lower, upper, target))
    
    while result.shape[0] < n_sim:
    
        temp = np.matrix(rand_iterative(n_assets, lower, upper, target))
        result = np.concatenate((result, temp), axis = 0)
    
    return result
```

```{python}
lower = -0.05
upper = 0.05
target = 0
```

```{python}
approach1 = rand_turnover1(n_sim, n_assets, lower, upper, target)
approach2 = rand_turnover2(n_sim, n_assets, lower, upper, target)
```

```{r, echo = FALSE, fig.width = 4, fig.height = 4}
plot_pairs(as.data.table(py$approach1), title = "Weight (%)")
```

```{r, echo = FALSE, fig.width = 4, fig.height = 4}
plot_pairs(as.data.table(py$approach2), title = "Weight (%)")
```

# Mean-variance

```{python}
def geometric_mean(x, scale):
    
    result = np.prod(1 + x) ** (scale / x.shape[1]) - 1
    
    return result
```

```{python}
returns_x_df = returns_df.dropna()["returns"][factors] # REMOVE LATER
returns_x_mat = np.matrix(returns_x_df) # extended history # REMOVE LATER
mu = np.apply_along_axis(geometric_mean, 0, returns_x_mat, scale["periods"])
sigma = np.cov(overlap_x_df.T, ddof = 1) * scale["periods"] * scale["overlap"]
```

## Maximize mean

$$
\begin{aligned}
\begin{array}{rrcl}
\displaystyle\max_{x}&\mu^{T}\mathbf{w}\\
\textrm{s.t.}&\mathbf{w}^T\Sigma\mathbf{w}&\leq&\sigma^{2}\\
&e^T\mathbf{w}&=&1
\end{array}
\end{aligned}
$$

```{python}
target = 0.06
start = np.array([1] * len(factors))
bnds = [(np.finfo(float).eps, 1) for i in range(len(factors))]
cons = [{"type": "ineq", "fun": lambda params, sigma, target: max_pnl_cons(params, sigma, target),
         "args": (sigma, target)},
        {"type": "eq", "fun": lambda params: np.sum(params) - 1}]
```

```{python}
def max_pnl_cons(params, sigma, target):
    
    var = np.matmul(np.transpose(params), np.matmul(sigma, params))
    
    result = target ** 2 - var
    
    return result

def max_pnl_obj(params, mu):
    
    result = np.matmul(mu, params)
    
    return -result

def max_pnl_optim(params, mu):
    
    result = minimize(max_pnl_obj, params, args = (mu), bounds = bnds, constraints = cons)
    
    return result.x
```

```{python}
params1 = max_pnl_optim(start, mu)
params1
```

```{python}
np.matmul(mu, params1)
```

```{python}
np.sqrt(np.matmul(np.transpose(params1), np.matmul(sigma, params1)))
```

## Minimize variance

$$
\begin{aligned}
\begin{array}{rrcl}
\displaystyle\min_{x}&\mathbf{w}^T\Sigma\mathbf{w}\\
\textrm{s.t.}&\mu^{T}\mathbf{w}&\geq&M\\
&e^T\mathbf{w}&=&1
\end{array}
\end{aligned}
$$

```{python}
target = 0.03
start = np.array([1] * len(factors))
cons = [{"type": "ineq", "fun": lambda params, mu, target: min_risk_cons(params, mu, target),
         "args": (mu, target)},
        {"type": "eq", "fun": lambda params: np.sum(params) - 1}]
```

```{python}
def min_risk_cons(params, mu, target):
    
    result = np.matmul(mu, params) - target
    
    return result

def min_risk_obj(params, sigma):
    
    result = np.matmul(np.transpose(params), np.matmul(sigma, params))
    
    return result

def min_risk_optim(params, sigma):
    
    result = minimize(min_risk_obj, params, args = (sigma), bounds = bnds, constraints = cons)
    
    return result.x
```

```{python}
params2 = min_risk_optim(start, sigma)
params2
```

```{python}
np.matmul(mu, params2)
```

```{python}
np.sqrt(np.matmul(np.transpose(params2), np.matmul(sigma, params2))) 
```

## Maximize utility

$$
\begin{aligned}
\begin{array}{rrcl}
\displaystyle\max_{x}&\mu^{T}\mathbf{w}-\frac{1}{2}\delta(\mathbf{w}^T\Sigma\mathbf{w})\\
\textrm{s.t.}&e^T\mathbf{w}&=&1
\end{array}
\end{aligned}
$$

```{python}
ir = 0.5
target = ir / 0.06 # ir / std (see Black-Litterman)
start = np.array([1] * len(factors))
cons = [{"type": "eq", "fun": lambda params: np.sum(params) - 1}]
```

```{python}
def max_ratio_obj(params, mu, sigma, target):
    
    result = np.matmul(mu, params) - 0.5 * target * (np.matmul(np.transpose(params),
                                                               np.matmul(sigma, params)))
#     result = np.matmul(mu, params) / np.sqrt(np.matmul(np.transpose(params), np.matmul(sigma, params)))
    
    return -result

def max_ratio_optim(params, mu, sigma, target):
    
    result = minimize(max_ratio_obj, params, args = (mu, sigma, target), bounds = bnds,
                      constraints = cons) 
    
    return result.x
```

```{python}
params3 = max_ratio_optim(start, mu, sigma, target)
params3
```

```{python}
np.matmul(mu, params3)
```

```{python}
np.sqrt(np.matmul(np.transpose(params3), np.matmul(sigma, params3)))
```

## Minimize residual sum of squares

```{python}
pd.DataFrame.from_dict({"max_pnl": params1,
                        "min_risk": params2,
                        "max_ratio": params3})
```