---
title: "Crowds"
author: "[Jason Foster](mailto:jason.j.foster@gmail.com)"
date: last-modified
categories:
  - analysis
  - finance
  - r
draft: true
editor: 
  mode: source
---

```{r}
factors_r <- c("SP500") # "SP500" does not contain dividends
factors_d <- c("DTB3")
```

```{r}
#| echo: false
#| output: false
source("../helper-levels.R")
width <- 20 * 3
```

# Parse web

```{r}
library(yfscreen)
```

```{r}
filters <- list("eq", list("categoryname", "Tactical Allocation"))
query <- create_query(filters)
payload <- create_payload("mutualfund", query, 250)
data <- get_data(payload)
```

```{r}
sorted_df <- data[order(data[["netAssets.raw"]], data[["firstTradeDateMilliseconds"]]), ]
tickers <- sorted_df[!duplicated(sorted_df[["netAssets.raw"]]), "symbol"]
```

```{r}
# allocations <- c("AOK", "AOM", "AOR", "AOA")
# tickers <- c(tickers, allocations)
```

# Optimization

```{r}
# install.packages("devtools")
# devtools::install_github("jasonjfoster/rolloptim")
```

```{r}
#| output: false
# library(CVXR)
library(rolloptim)
```

```{r}
# min_rss_optim <- function(x, y) {
#     
#     params <- Variable(ncol(x))
#     
#     obj <- Minimize(sum_squares(y - x %*% params))
#     
#     cons <- list(sum(params) == 1, params >= 0, params <= 1)
#     
#     prob <- Problem(obj, cons)
#         
#     result <- solve(prob)$getValue(params)
#     
#     return(result)
# 
# }
```

```{r}
#| echo: false
#| output: false
#| warning: false
source("../helper-prices-yfh.R")

overlap_xts <- roll_mean(returns_xts, scale[["overlap"]], min_obs = 1)

# overlap_xts <- na.omit(overlap_xts)
overlap_x_xts <- overlap_xts[ , factors]
overlap_y_xts <- overlap_xts[ , tickers]
# overlap_z_xts <- overlap_xts[ , allocations]
```

```{r}
performance_xts <- roll_prod(1 + returns_xts, width, min_obs = 1) - 1
```

```{r}
n_rows <- nrow(overlap_xts)
result_ls <- list()
index_ls <- list()

# for (i in width:n_rows) {
for (i in n_rows) {
    
    idx <- max(i - width + 1, 1):i
    x_subset <- coredata(overlap_x_xts[idx, ])
    y_subset <- coredata(overlap_y_xts[idx, ])
    params_ls <- list()
    tickers_ls <- list()
    performance_ls <- list()
    
    # for (j in tickers[!tickers %in% allocations]) {
    for (j in tickers) {
      
        idx <- complete.cases(x_subset, y_subset[ , j])
        x_complete <- x_subset[idx, , drop = FALSE]
        y_complete <- y_subset[idx, j]
        
        if ((nrow(x_complete) > 0) && (length(y_complete) > 0)) {
            
            # params <- t(min_rss_optim(x_complete, y_complete))
            # params_ls <- append(params_ls, list(params))
          
            xx <- roll_crossprod(x_complete, x_complete, width = nrow(x_complete))
            xy <- roll_crossprod(x_complete, y_complete, width = nrow(x_complete))
            
            params <- roll_min_rss(xx, xy, total = 1, lower = 0, upper = 1)[nrow(x_complete), ]
            params_ls <- append(params_ls, list(params))
            
            tickers_ls <- append(tickers_ls, list(j))
            
            performance_ls <- append(performance_ls, list(performance_xts[i, j]))
            
        }
        
    }
    
    if (length(params_ls) > 0) {
        
        result <- do.call(rbind, params_ls)
        rownames(result) <- unlist(tickers_ls)
        
        result <- cbind(result, performance = unlist(performance_ls))
        
        result_ls <- append(result_ls, list(result))
        index_ls <- append(index_ls, list(index(overlap_xts)[i]))
        
    }
    
}
```

```{r}
# save(result_ls, file = "result_ls.rda")
# save(index_ls, file = "index_ls.rda")
```

# Performance

```{r}
# load("result_ls.rda")
# load("index_ls.rda")
```

```{r}
quantile_cut <- function(x) {
  
  result <- cut(
    -x,
    breaks = quantile(-x, probs = c(0, 0.25, 0.5, 0.75, 1)),
    labels = c("Q1", "Q2", "Q3", "Q4"),
    include.lowest = TRUE
  )
  
  return(result)
  
}
```

```{r}
n_rows <- length(result_ls)
score_ls <- list()

for (i in 1:n_rows) {
  
  score_df <- data.frame(result_ls[[i]])
  colnames(score_df) <- c(factors, "performance")
  
  score_df[["date"]] <- index_ls[[i]]
  score_df[["quantile"]] <- quantile_cut(score_df[["performance"]])
  
  score <- aggregate(
    cbind(weight = get(factors[1]), performance) ~ date + quantile,
    score_df, mean
  )
  
  overall <- data.frame(
    date = index_ls[[i]],
    quantile = "Overall",
    weight = mean(score_df[[factors[1]]]),
    performance = mean(score_df[["performance"]])
  )
  
  score <- rbind(score, overall)
  
  score_ls <- append(score_ls, list(score))
  
}
```

```{r}
score_df <- do.call(rbind, score_ls)
print(score_df)
```

```{r}
# save(score_df, file = "score_df.rda")
# score_xts <- xts(score_df[score_df[["quantile"]] == "Q1", "weight"],
#                  score_df[score_df[["quantile"]] == "Q1", "date"])
# plot(score_xts)
```
