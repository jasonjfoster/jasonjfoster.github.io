---
title: "Crowds"
author: "[Jason Foster](mailto:jason.j.foster@gmail.com)"
date: last-modified
categories:
  - analysis
  - finance
  - r
draft: true
---

```{r}
factors_r <- c("SP500") # "SP500" does not contain dividends
factors_d <- c("DTB3")
```

```{r, echo = FALSE, message = FALSE}
source("../helper-levels.R")
width <- 20 * 3
```

# Parse web

```{r}
process_filter <- function(filter) {

  result <- list(
    operator = filter[[1]],
    operands = lapply(filter[[2]], function(operand) {
      if (is.list(operand)) {
        process_filter(operand)
      } else {
        operand
      }
    })
  )

  return(result)

}
```

```{r}
create_query <- function(filters = list(list("or", list(list("eq", list("region", "us"))))),
                         top_operator = "and") {

  result <- list(
    operator = top_operator,
    operands = lapply(filters, process_filter)
  )

  return(result)

}
```

```{r}
create_payload <- function(quote_type = "equity", query = create_query(),
                           size = 25, offset = 0,
                           sort_field = NULL, sort_type = NULL,
                           top_operator = "and") {

  result <- list(
    includeFields = NULL, # unable to modify the result
    offset = offset,
    query = query,
    quoteType = quote_type,
    size = size,
    sortField = sort_field,
    sortType = sort_type,
    topOperator = top_operator
  )

  return(result)

}
```

```{r}
get_crumb_and_cookies <- function() {

  handle <- curl::new_handle()

  api_url <- "https://query1.finance.yahoo.com/v1/test/getcrumb"

  headers <- c(
    `Accept` = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8",
    `User-Agent` = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
  )

  curl::handle_setheaders(handle, .list = headers)

  response <- curl::curl_fetch_memory(api_url, handle = handle)
  crumb <- rawToChar(response$content)

  cookies <- curl::handle_cookies(handle)

  result <- list(
    handle = handle,
    crumb = crumb,
    cookies = cookies
  )

  return(result)

}
```

```{r}
build_query_string <- function(params) {
  paste0("?", paste(names(params), params, sep = "=", collapse = "&"))
}
```

```{r}
get_screen <- function(payload = create_payload()) {

  session <- get_crumb_and_cookies()

  crumb <- session[["crumb"]]
  cookies <- session[["cookies"]]
  handle <- session[["handle"]]

  params <- list(
    crumb = crumb,
    lang = "en-US",
    region = "US",
    formatted = "true",
    corsDomain = "finance.yahoo.com"
  )

  api_url <- paste0("https://query1.finance.yahoo.com/v1/finance/screener", build_query_string(params))

  json_payload <- jsonlite::toJSON(payload, auto_unbox = TRUE)
  
  headers <- c(
    `Content-Type` = "application/json",
    `Cookie` = paste0(cookies[["name"]], "=", cookies[["value"]], collapse = "; ")
  )

  max_size <- 250
  size <- payload[["size"]]
  offset <- payload[["offset"]]

  result_cols <- NULL
  result_ls <- list()

  while (size > 0) {

    chunk_size <- min(size, max_size)
    payload[["size"]] <- chunk_size
    payload[["offset"]] <- offset

    json_payload <- jsonlite::toJSON(payload, auto_unbox = TRUE)

    curl::handle_setopt(handle, postfields = json_payload)
    curl::handle_setheaders(handle, .list = headers)

    response <- curl::curl(api_url, handle = handle)

    result <- jsonlite::fromJSON(response)
    result_df <- result[["finance"]][["result"]][["quotes"]][[1]]

    if (!is.null(result_df)) {

      result_df <- jsonlite::flatten(result_df)

      result_ls <- append(result_ls, list(result_df))
      result_cols <- union(result_cols, colnames(result_df))

      offset <- offset + chunk_size
      size <- size - chunk_size

    } else {
      size <- 0
    }

  }

  result_ls <- lapply(result_ls, function(x) {

    cols_na <- setdiff(result_cols, colnames(x))

    for (j in cols_na) {
      x[[j]] <- NA
    }

    x <- x[ , result_cols]

  })

  result <- do.call(rbind, result_ls)

  return(result)

}
```

# Optimization

```{r, message = FALSE}
library(CVXR)
```

```{r}
min_rss_optim <- function(x, y) {
    
    params <- Variable(ncol(x))
    
    obj <- Minimize(sum_squares(y - x %*% params))
    
    cons <- list(sum(params) == 1, params >= 0, params <= 1)
    
    prob <- Problem(obj, cons)
        
    result <- solve(prob)$getValue(params)
    
    return(result)

}
```

```{r}
query <- create_query(filters = list(list("or", list(list("eq", list("categoryname", "Tactical Allocation"))))))
payload <- create_payload(quote_type = "mutualfund", query = query, size = 250, 
                          sort_field = "fundnetassets")
screen <- get_screen(payload)
```

```{r}
sorted_df <- screen[order(screen[["netAssets.raw"]], screen[["firstTradeDateMilliseconds"]]), ]
tickers <- sorted_df[!duplicated(sorted_df[["netAssets.raw"]]), "symbol"]
```

```{r}
# allocations <- c("AOK", "AOM", "AOR", "AOA")
# tickers <- c(tickers, allocations)
```

```{r, echo = FALSE, message = FALSE, warning = FALSE}
# select tickers are not included in tiingo's free subscription
# source("../helper-prices.R")
invisible(getSymbols(tickers, adjust = TRUE))
tickers <- tickers[tickers %in% ls()]
prices_xts <- do.call(merge, c(lapply(tickers, function(i) Cl(get(i))), all = TRUE))
colnames(prices_xts) <- tickers
index(prices_xts) <- as.Date(index(prices_xts))

returns_xts <- merge(returns_xts, diff(log(prices_xts)))
overlap_xts <- merge(overlap_xts, roll_mean(returns_xts[ , tickers], scale[["overlap"]], min_obs = 1))

# weights <- 0.9 ^ ((width - 1):0)
weights <- rep(1, width)

# overlap_xts <- na.omit(overlap_xts)
overlap_x_xts <- overlap_xts[ , factors]
overlap_y_xts <- overlap_xts[ , tickers]
# overlap_z_xts <- overlap_xts[ , allocations]
```

```{r}
performance_xts <- roll_prod(1 + returns_xts, width, min_obs = 1) - 1
```

```{r}
n_rows <- nrow(overlap_xts)
result_ls <- list()
index_ls <- list()

# for (i in width:n_rows) {
for (i in n_rows) {
    
    idx <- max(i - width + 1, 1):i
    x_subset <- coredata(overlap_x_xts[idx, ])
    y_subset <- coredata(overlap_y_xts[idx, ])
    params_ls <- list()
    tickers_ls <- list()
    performance_ls <- list()
    
    # for (j in tickers[!tickers %in% allocations]) {
    for (j in tickers) {
      
        idx <- complete.cases(x_subset, y_subset[ , j])
        x_complete <- x_subset[idx, , drop = FALSE]
        y_complete <- y_subset[idx, j]
        
        if ((nrow(x_complete) > 0) && (length(y_complete) > 0)) {
            
            params <- t(min_rss_optim(x_complete, y_complete))
            params_ls <- append(params_ls, list(params))
            
            tickers_ls <- append(tickers_ls, list(j))
            
            performance_ls <- append(performance_ls, list(performance_xts[i, j]))
            
        }
        
    }
    
    if (length(params_ls) > 0) {
        
        result <- do.call(rbind, params_ls)
        rownames(result) <- unlist(tickers_ls)
        
        result <- cbind(result, performance = unlist(performance_ls))
        
        result_ls <- append(result_ls, list(result))
        index_ls <- append(index_ls, list(index(overlap_xts)[i]))
        
    }
    
}
```

```{r}
# saveRDS(result_ls, file = "result_ls.rds")
# saveRDS(index_ls, file = "index_ls.rds")
```

# Performance

```{r}
# result_ls <- readRDS("./posts/crowds-r/result_ls.rds")
# index_ls <- readRDS("./posts/crowds-r/index_ls.rds")
```

```{r}
quantile_cut <- function(x) {
  cut(
    -x,
    breaks = quantile(-x, probs = c(0, 0.25, 0.5, 0.75, 1)),
    labels = c("Q1", "Q2", "Q3", "Q4"),
    include.lowest = TRUE
  )
}
```

```{r}
n_rows <- length(result_ls)
score_ls <- list()

for (i in 1:n_rows) {
  
  score_df <- data.frame(result_ls[[i]])
  colnames(score_df) <- c(factors, "performance")
  
  score_df[["date"]] <- index_ls[[i]]
  score_df[["quantile"]] <- quantile_cut(score_df[["performance"]])
  
  score <- aggregate(
    cbind(weight = get(factors[1]), performance) ~ date + quantile,
    score_df, mean
  )
  
  overall <- data.frame(
    date = index_ls[[i]],
    quantile = "Overall",
    weight = mean(score_df[[factors[1]]]),
    performance = mean(score_df[["performance"]])
  )
  
  score <- rbind(score, overall)
  
  score_ls <- append(score_ls, list(score))
  
}
```

```{r}
do.call(rbind, score_ls)
```