---
title: "Alpha Distribution Analysis"
author: "[Jason Foster](mailto:jason.j.foster@gmail.com)"
date: last-modified
categories:
  - analysis
  - finance
  - r
editor: 
  mode: source
---

```{r, echo = FALSE, message = FALSE}
source("../plot/theme_jjf.R")
```

# Question

Could an optimally combined portfolio of hedge funds have won Warren Buffet's 10-year bet against the S&P 500?

-   <https://longbets.org/362/>

# Optimization

```{r, message = FALSE}
library(CVXR)
```

```{r}
min_rss_optim <- function(x, y) {

  n_rows <- nrow(x)
  x <- as.matrix(x)
  y <- as.numeric(y)
  params <- Variable(ncol(x))
  
  obj <- Minimize(sum_squares(y - x %*% params))
  cons <- list(sum(params) == 1, params >= 0, params <= 1)
  prob <- Problem(obj, cons)
  
  result <- solve(prob)$getValue(params)
  
  return(result)

}
```

```{r, echo = FALSE, message = FALSE}
returns <- data.table::fread("input_returns.csv")
returns[ , Year := data.table::as.IDate(paste0(Year, "-12-31"))]
returns <- na.omit(xts::as.xts(returns))
```

# Bootstrapping

```{r}
# library(NNS)
```

```{r}
set.seed(5640)
n_rows <- nrow(returns)
n_cols <- ncol(returns)
n_boot <- 1000
optim_weights_ls <- list()
optim_alpha_ls <- list()
optim_te_ls <- list()
# returns_boot <- array(NA, dim = c(n_rows, n_cols, n_boot)) # time, asset, and bootstrap
```

```{r}
# for (j in 1:n_cols) {
# 
#   col_boot <- NNS.meboot(as.vector(returns[ , j]), reps = n_boot,
#                          rho = 1, type = "pearson")["replicates", ]$replicates
# 
#   returns_boot[ , j, ] <- col_boot
# 
# }
```

```{r}
# colnames(returns_boot) <- colnames(returns)
```

```{r}
for (z in 1:n_boot) {
  
  idx <- sample(1:n_rows, n_rows, replace = TRUE)
  # boot_sample <- returns_boot[ , , z]
  
  x_boot <- returns[idx, colnames(returns) != "S&P Index Fund"]
  y_boot <- returns[idx, "S&P Index Fund"]
  # x_boot <- boot_sample[ , colnames(boot_sample) != "S&P Index Fund"]
  # y_boot <- boot_sample[ , "S&P Index Fund"]
  
  optim_weights <- min_rss_optim(x_boot, y_boot)
  optim_returns <- x_boot %*% optim_weights
  optim_port <- prod(1 + optim_returns) ^ (1 / n_rows) - 1
  optim_bench <- prod(1 + y_boot) ^ (1 / n_rows) - 1
  optim_alpha <- optim_port - optim_bench
  optim_te <- sd(optim_returns - y_boot)
  
  optim_weights_ls <- append(optim_weights_ls, list(t(optim_weights)))
  optim_alpha_ls <- append(optim_alpha_ls, list(optim_alpha))
  optim_te_ls <- append(optim_te_ls, list(optim_te))

}
```

```{r}
optim_weights <- do.call(rbind, optim_weights_ls)
optim_alpha <- do.call(rbind, optim_alpha_ls)
optim_te <- do.call(rbind, optim_te_ls)
```

# Answer

Analysis shows that `{r} round(mean(optim_alpha > 0), 2) * 100`% of the optimized portfolios produced alpha values greater than zero, which means that `{r} round(mean(optim_alpha <= 0), 2) * 100`% of optimized combinations did not outperform the S&P 500.

```{r, message = FALSE, echo = FALSE, fig.width = 6, fig.height = 3}
# 1. Setup data and parameters
dt <- data.table::as.data.table(list(optim_alpha = optim_alpha))
q_vals <- quantile(dt$optim_alpha, probs = c(0.05, 0.50, 0.95))
bin_width <- diff(range(dt$optim_alpha)) / 30

# 2. Compute histogram manually
hist_data <- hist(dt$optim_alpha, breaks = 30, plot = FALSE)
hist_dt <- data.table::data.table(
  mids = hist_data$mids * 100,  # scale x to percentage
  counts = hist_data$counts,
  freq_pct = hist_data$counts / sum(hist_data$counts) * 100
)

# 3. Compute density manually
dens <- density(dt$optim_alpha)
density_dt <- data.table::data.table(
  alpha_pct = dens$x * 100,
  density = dens$y * bin_width * 100  # scale y to match freq_pct
)

# 4. Compute y_max for annotation placement
y_max <- max(hist_dt$freq_pct)

# 5. Plot
ggplot() +
  theme_minimal(base_size = 14) +

  # Histogram from manually precomputed values
  geom_col(data = hist_dt,
           aes(x = mids, y = freq_pct),
           fill = "lightgray",
           color = "white",
           width = bin_width * 100,
           position = "identity") +

  # Density line (scaled to match histogram)
  geom_line(data = density_dt,
            aes(x = alpha_pct, y = density),
            color = "black") +

  # Vertical lines at quantiles
  geom_vline(xintercept = 0, color = "black", linewidth = 1) +
  # geom_vline(xintercept = q_vals * 100, linetype = "dashed", color = "red") +
  # 
  # # Quantile annotations
  # annotate("text", x = q_vals[1] * 100, y = y_max, label = "5%", color = "red", hjust = 1) +
  # annotate("text", x = q_vals[2] * 100, y = y_max, label = "Median", color = "red", hjust = 1) +
  # annotate("text", x = q_vals[3] * 100, y = y_max, label = "95%", color = "red", hjust = 1) +

  # Axis labels
  labs(title = "Alpha Distribution",
       x = "Alpha (%)",
       y = "Frequency (%)")

```