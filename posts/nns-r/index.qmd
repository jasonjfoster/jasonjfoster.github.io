---
title: "Nonlinear nonparametric statistics"
author: "[Jason Foster](mailto:jason.j.foster@gmail.com)"
date: last-modified
categories:
  - analysis
  - finance
  - r
draft: true
editor: 
  mode: source
---

```{r}
factors_r <- c("SP500", "DTWEXAFEGS") # "SP500" does not contain dividends; note: "DTWEXM" discontinued as of Jan 2020
factors_d <- c("DGS10", "BAMLH0A0HYM2")
```

```{r, echo = FALSE, output = FALSE}
# source("../helper-levels.R")
library(quantmod)
options("getSymbols.warning4.0" = FALSE)

factors <- c(factors_r, factors_d)

getSymbols(factors, src = "FRED")
levels_xts <- do.call(merge, c(lapply(factors, function(i) get(i)), all = TRUE))

returns_xts <- do.call(merge, lapply(factors, function(i) {
  if (i %in% factors_r) {
    diff(log((levels_xts[ , i]))) # price
  } else if (i %in% factors_d) {
    -diff(levels_xts[ , i]) / 100 # price
  }    
}))

risk_sign <- c(SP500 = 1, DTWEXAFEGS = 1, DGS10 = -1, BAMLH0A0HYM2 = -1)
```

```{r, echo = FALSE}
returns_xts <- na.omit(returns_xts)
```

# Ordinary least squares

```{r}
shock <- -0.1
returns_z_xts <- returns_xts[ , "SP500"]
```

```{r}
beta <- solve(t(returns_z_xts) %*% returns_z_xts) %*% (t(returns_z_xts) %*% returns_xts)
implied_shocks <- shock %*% beta * risk_sign
```

```{r}
round(data.frame(
  implied_shocks = t(implied_shocks),
  row.names = c("SP500", "USD", "US10Y", "USHY")
) * 100, 2)
```


# Principal components analysis

```{r}
comp <- 1
```

```{r}
LV <- eigen(cov(returns_xts))
L <- LV[["values"]]
V <- LV[["vectors"]]
scale <- shock / (sqrt(L[comp]) * V[ , comp])[1]
implied_shocks_pc <- scale * (sqrt(L[comp]) * V[ , comp]) * risk_sign
```

```{r}
round(data.frame(
  implied_shocks = t(implied_shocks),
  implied_shocks_pc = implied_shocks_pc,
  row.names = c("SP500", "USD", "US10Y", "USHY")
) * 100, 2)
```

# Nonlinear nonparametric statistics

```{r}
library(NNS)
```

## Partial moments

-   <https://cran.r-project.org/web/packages/NNS/vignettes/NNSvignette_Partial_Moments.html>

```{r}
sigma <- cov(returns_xts)
```

```{r}
pm <- PM.matrix(LPM_degree = 1, UPM_degree = 1, target = "mean",
                variable = returns_xts, pop_adj = TRUE)
```

```{r}
all.equal(sigma, pm$cov.matrix)
```

```{r}
cl_pm <- pm$clpm
cu_pm <- pm$cupm
dl_pm <- pm$dlpm
du_pm <- pm$dupm
```

```{r}
all.equal(sigma, (cl_pm + cu_pm) - (dl_pm + du_pm))
```

## Implied shocks

```{r}
LV <- eigen(cov(cl_pm - (dl_pm + du_pm)))
L <- LV[["values"]]
V <- LV[["vectors"]]
scale <- shock / (sqrt(L[comp]) * V[ , comp])[1]
implied_shocks_pm <- scale * (sqrt(L[comp]) * V[ , comp]) * risk_sign
```

```{r}
round(data.frame(
  implied_shocks = t(implied_shocks),
  implied_shocks_pc = implied_shocks_pc,
  implied_shocks_pm = implied_shocks_pm,
  row.names = c("SP500", "USD", "US10Y", "USHY")
) * 100, 2)
```

## Bootstrapping

- <https://github.com/OVVO-Financial/Finance/blob/main/stress_test.md>
- <https://cran.r-project.org/web/packages/NNS/vignettes/NNSvignette_Sampling.html>

```{r}
target <- 0
n_samples <- 1e6
```

```{r}
idx <- which(rowSums(returns_xts > target) != length(factors)) # exclude cupm quadrant
```

```{r}
returns_bs <- apply(returns_xts[idx, ], 2, function(x) {
  result <- NNS.meboot(as.vector(x),
                       reps = ceiling(n_samples / length(idx)),
                       rho = 1,
                       type = "pearson")["replicates", ]$replicates
  tail(as.vector(result), n_samples)
})
```

```{r}
pm <- PM.matrix(LPM_degree = 1, UPM_degree = 1, target = "mean",
                variable = returns_bs, pop_adj = TRUE)
```

```{r}
cl_pm <- pm$clpm
cu_pm <- pm$cupm
dl_pm <- pm$dlpm
du_pm <- pm$dupm
```

```{r}
# LV <- eigen(cov(returns_bs))
LV <- eigen(cov(cl_pm - (dl_pm + du_pm)))
L <- LV[["values"]]
V <- LV[["vectors"]]
scale <- shock / (sqrt(L[comp]) * V[ , comp])[1]
implied_shocks_bs <- scale * (sqrt(L[comp]) * V[ , comp]) * risk_sign
```

```{r}
round(data.frame(
  implied_shocks = t(implied_shocks),
  implied_shocks_pc = implied_shocks_pc,
  implied_shocks_pm = implied_shocks_pm,
  implied_shocks_bs = implied_shocks_bs,
  row.names = c("SP500", "USD", "US10Y", "USHY")
) * 100, 2)
```