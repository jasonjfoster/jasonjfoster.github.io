---
title: "Crowds"
author: "[Jason Foster](mailto:jason.j.foster@gmail.com)"
date: last-modified
categories:
  - analysis
  - finance
  - python
draft: true
---

```{python}
factors_r = ["SP500"] # "SP500" does not contain dividends
factors_d = ["DTB3"]
```

```{r, echo = FALSE, message = FALSE}
library(reticulate)
source_python("../helper-levels.py")
```

# Parse web

```{python}
import requests
```

```{python}
def get_crumb_and_cookie():
    
    session = requests.Session()
    
    headers = {
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
    }
    
    session.headers.update(headers)

    response = session.get("https://query1.finance.yahoo.com/v1/test/getcrumb")

    crumb = response.text.strip()
    cookie = session.cookies.get_dict()
    
    result = {
      "crumb": crumb,
      "cookie": cookie
    }

    return result
```

```{python}
def get_yhoo():

    session = get_crumb_and_cookie()
    crumb = session["crumb"]
    cookie = session["cookie"]
    
    params = {
        "crumb": crumb,
        "lang": "en-US",
        "region": "US",
        "formatted": "true",
        "corsDomain": "finance.yahoo.com",
    }
    
    api_url = "https://query1.finance.yahoo.com/v1/finance/screener"
    
    payload = {
        "size": 250,
        "offset": 0,
        "sortField": "fundnetassets",
        "sortType": "DESC",
        "quoteType": "MUTUALFUND",
        "topOperator": "AND",
        "query": {
            "operator": "AND",
            "operands": [
                {
                    "operator": "or",
                    "operands": [
                        {
                            "operator": "EQ",
                            "operands": ["categoryname", "Tactical Allocation"]
                        }
                    ]
                }
            ]
        },
        "userId": "",
        "userIdType": "guid"
    }
    
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
    } 
    
    with requests.session() as session:
        
        for key, value in cookie.items():
            session.cookies.set(key, value)
            
        response = session.post(api_url, params = params, json = payload, headers = headers)

        return response.json()
```

# Optimization

```{python}
import cvxpy as cp
import yfinance as yf
```

```{python}
def min_rss_optim(x, y):
    
    w = cp.Variable(x.shape[1])
    
    objective = cp.Minimize(cp.sum_squares(y - x @ w))
    
    constraints = [cp.sum(w) == 1, w >= 0, w <= 1]
    
    problem = cp.Problem(objective, constraints)
    problem.solve()
    
    return w.value
```

```{python}
yhoo_ls = get_yhoo()
yhoo_df = pd.DataFrame(yhoo_ls["finance"]["result"][0]["quotes"])
```

```{python}
yhoo_df["netAssets_raw"] = yhoo_df["netAssets"].apply(lambda x: x["raw"])
sorted_df = yhoo_df.sort_values(by = ["netAssets_raw", "firstTradeDateMilliseconds"])
tickers = sorted_df.loc[~sorted_df["netAssets_raw"].duplicated(), "symbol"].tolist()
```

```{python}
# allocations = ["AOK", "AOM", "AOR", "AOA"]
# tickers = tickers + allocations
```

```{python, echo = FALSE, message = FALSE, warning = FALSE}
# select tickers are not included in tiingo's free subscription
# source_python("../helper-prices.py")
prices_df = yf.download(tickers, start = "1900-01-01", progress = False)["Adj Close"]

returns_cols = [("returns", i) for i in tickers]
overlap_cols = [("overlap", i) for i in tickers]
returns_df[returns_cols] = np.log(prices_df).diff()
returns_df[overlap_cols] = returns_df[returns_cols].rolling(scale["overlap"], min_periods = 1).mean()
returns_df.sort_index(axis = 1, inplace = True)

# weights = np.array([0.9 ** i for i in range(width - 1, -1, -1)]).reshape((width, 1))
weights = np.array([1] * width).reshape((width, 1))

# overlap_df = returns_df["overlap"]
overlap_x_df = returns_df["overlap"][factors]
overlap_y_df = returns_df["overlap"][tickers]
# overlap_z_df = returns_df["overlap"][allocations]
```

```{python}
n_rows = overlap_df.shape[0]
result_ls = []
index_ls = []

# for i in range(width - 1, n_rows):
for i in range(n_rows - 1, n_rows):
  
  idx = range(max(i - width + 1, 0), i + 1)
  x_subset = overlap_x_df.iloc[idx]
  y_subset = overlap_y_df.iloc[idx]
  params_ls = []
  
  # for j in [ticker for ticker in tickers if ticker not in allocations]:
  for j in tickers:
    
    idx = ~x_subset.isna().any(axis = 1) & ~y_subset[j].isna()
    x_complete = x_subset.loc[idx]
    y_complete = y_subset.loc[idx, j]
    
    if (x_complete.shape[0] > 0) and (y_complete.size > 0):
        
      params = min_rss_optim(x_complete.values, y_complete.values)
      params_ls.append(params)
  
  if params_ls:
    
    result_ls.append(np.mean(params_ls, axis = 0))
    index_ls.append(overlap_x_df.index[i])
```

```{python}
# weights_df = pd.DataFrame(result_ls, index = index_ls, columns = factors)
weights_df = pd.DataFrame(result_ls, index = [overlap_df.index[-1]],
                          columns = factors)
```

```{python}
weights_df.tail()
```
