---
title: "Crowds"
author: "[Jason Foster](mailto:jason.j.foster@gmail.com)"
date: last-modified
categories:
  - analysis
  - finance
  - python
draft: true
---

```{python}
factors_r = ["SP500"] # "SP500" does not contain dividends
factors_d = ["SOFR"]
```

```{r, echo = FALSE, message = FALSE}
library(reticulate)
source_python("../helper-levels.py")
```

# Parse web

```{python}
import requests
from lxml import html
```

```{python}
def get_nth(x, n, offset = 0):
    
    result = x[offset::n]
    
    return result
```

```{python}
def get_text(x, n = 0):
    
    result_ls = []
    
    for i in x:
      
        if (len(i) == 0):
            result_ls.append(i.text_content()) # types
        else:
            result_ls.append(i[n].text_content()) # names and tickers
    
    return result_ls
```

```{python}
def get_mstar():
    
    i = 0
    status = True
    names_ls = []
    tickers_ls = []
    types_ls = []

    while status:

        i += 1

        url = "https://www.morningstar.com/asset-allocation-funds?page=" + str(i)
        response = requests.get(url)
        
        tree = html.fromstring(response.content)
        table = tree.xpath("//div[@class='topic__table-container']")

        if (len(table) == 0):
            status = False
        else:

            names_tickers = tree.xpath("//a[@class='mdc-link mds-link mds-link--data-table mdc-link--no-visited']")
            types = tree.xpath("//span[@class='mdc-data-point mdc-data-point--string mdc-string']")
            
        names_ls.extend(get_text(get_nth(names_tickers, 2)))
        tickers_ls.extend(get_text(get_nth(names_tickers, 2, 1)))
        types_ls.extend(get_text(get_nth(types, 5, 2)))

    result = pd.DataFrame({
      "name": names_ls,
      "ticker": tickers_ls,
      "type": types_ls
    })
    
    return result
```

# Optimization

```{python}
import cvxpy as cp
```

```{python}
def min_rss_optim(x, y):
    
    w = cp.Variable(x.shape[1])
    
    objective = cp.Minimize(cp.sum_squares(y - x @ w))
    
    constraints = [cp.sum(w) == 1, w >= 0, w <= 1]
    
    problem = cp.Problem(objective, constraints)
    problem.solve()
    
    return w.value
```

```{python}
mstar_df = get_mstar()
```

```{python}
tickers = mstar_df.loc[mstar_df["type"] == "Tactical Allocation", "ticker"].tolist()
```

```{r, echo = FALSE, message = FALSE}
source_python("../helper-prices.py")
```

```{python}
# n_rows = overlap_df.shape[0]
result_ls = []

# for i in range(width - 1, n_rows):
for i in range(width - 1, width):
  
  idx = range(max(i - width + 1, 0), i + 1)
  x_subset = overlap_x_df.iloc[idx]
  y_subset = overlap_y_df.iloc[idx]
  params_ls = []
  
  for j in tickers:
  
    params = min_rss_optim(x_subset.values, y_subset.loc[:, j].values)
    params_ls.append(params)
  
  result_ls.append(np.mean(params_ls, axis = 0))
```

```{python}
# position_df = pd.DataFrame(result_ls, index = overlap_df.index[(width - 1):],
#                            columns = factors)
position_df = pd.DataFrame(result_ls, index = [overlap_df.index[-1]],
                           columns = factors)
```

```{python}
position_df.tail()
```
