---
title: "Eigen"
author: "[Jason Foster](mailto:jason.j.foster@gmail.com)"
date: last-modified
categories:
  - analysis
  - finance
  - r
---

```{r}
factors_r <- c("SP500", "DTWEXAFEGS") # "SP500" does not contain dividends; note: "DTWEXM" discontinued as of Jan 2020
factors_d <- c("DGS10", "BAMLH0A0HYM2")
```

```{r, echo = FALSE, message = FALSE}
source("../plot/theme_jjf.R")
source("../helper-levels.R")
```

```{r, echo = FALSE}
palette <- c("black", palette_jjf(length(factors)))
names(palette) <- c("Overall", factors)
```

```{r, echo = FALSE}
overlap_xts <- na.omit(overlap_xts)
```

# Decomposition

Underlying returns are structural bets that can be analyzed through dimension reduction techniques such as principal components analysis (PCA). Most empirical studies apply PCA to a covariance matrix (*note: for multi-asset portfolios, use the correlation matrix because asset-class variances are on different scales*) of equity returns (yield changes) and find that movements in the equity markets (yield curve) can be explained by a subset of principal components. For example, the yield curve can be decomposed in terms of shift, twist, and butterfly, respectively.

$$
\begin{aligned}
\boldsymbol{\Sigma}&=\lambda_{1}\mathbf{v}_{1}\mathbf{v}_{1}^\mathrm{T}+\lambda_{2}\mathbf{v}_{2}\mathbf{v}_{2}^\mathrm{T}+\cdots+\lambda_{k}\mathbf{v}_{k}\mathbf{v}_{k}^\mathrm{T}\\
&=V\Lambda V^{\mathrm{T}}
\end{aligned}
$$

-   <https://www.r-bloggers.com/fixing-non-positive-definite-correlation-matrices-using-r-2/>

```{r}
eigen_decomp <- function(x, comps) {
    
    LV <- eigen(cov(x))
    L <- LV[["values"]][1:comps]
    V <- LV[["vectors"]][ , 1:comps]
    
    result <- V %*% sweep(t(V), 1, L, "*")
    
    return(result)
    
}
```

```{r}
comps <- 1
```

```{r}
eigen_decomp(overlap_xts, comps) * scale[["periods"]] * scale[["overlap"]]
```

```{r}
# cov(overlap_xts) * scale[["periods"]] * scale[["overlap"]]
```

# Variance

We often look at the proportion of variance explained by the first $i$ principal components as an indication of how many components are needed.

$$
\begin{aligned}
\frac{\sum_{j=1}^{i}{\lambda_{j}}}{\sum_{j=1}^{k}{\lambda_{j}}}
\end{aligned}
$$

```{r}
variance_explained <- function(x) {
    
    LV <- eigen(cov(x))
    L <- LV[["values"]]
    
    result <- cumsum(L) / sum(L)
    
    return(result)
    
}
```

```{r}
variance_explained(overlap_xts)
```

# Similarity

Also, a challenge of rolling PCA is to try to match the eigenvectors: may need to change the sign and order.

$$
\begin{aligned}
\text{similarity}=\frac{\mathbf{v}_{t}\cdot\mathbf{v}_{t-1}}{\|\mathbf{v}_{t}\|\|\mathbf{v}_{t-1}\|}
\end{aligned}
$$

```{r}
similarity <- function(x, y) {
    
    n_cols_x <- ncols(x)
    n_cols_y <- ncols(y)
    result <- matrix(0, nrow = n_cols_x, ncol = n_cols_y)
    
    for (i in 1:n_cols_x) {
      for (j in 1:n_cols_y) {
        result[i, j] <- crossprod(x[ , i], y[ , j]) /
            sqrt(crossprod(x[ , i]) * crossprod(y[ , j]))
      }
    }
    
    return(result)
    
}
```

```{r}
roll_eigen1 <- function(x, width, comp) {
    
    n_rows <- nrow(x)
    result_ls <- list()
    
    for (i in width:n_rows) {
        
        idx <- max(i - width + 1, 1):i
        
        LV <- eigen(cov(x[idx, ]))
        V <- LV[["vectors"]]
        
        result_ls <- append(result_ls, list(V[ , comp]))
        
    }
    
    result <- do.call(rbind, result_ls)
    result <- xts(result, index(x)[width:n_rows])
    colnames(result) <- colnames(x)
    
    return(result)
    
}
```

```{r}
comp <- 1
```

```{r}
raw_df <- roll_eigen1(overlap_xts, width, comp)
```

```{r}
# # install.packages("devtools")
# devtools::install_github("jjf234/rolleigen") # roll (>= 1.1.7)
# library(rolleigen)
# raw_df <- roll_eigen(overlap_xts, width)[["vectors"]][ , comp, ]
```

```{r, echo = FALSE, fig.width = 6, fig.height = 3}
raw_mlt <- melt(as.data.table(raw_df), id.vars = "index")
raw_plt <- plot_ts(raw_mlt, title = "Eigenvector 1Y")
print(raw_plt)
```

-   <https://quant.stackexchange.com/a/3095>
-   <https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4400158>

```{r}
roll_eigen2 <- function(x, width, comp) {
    
    n_rows <- nrow(x)
    V_ls <- list()
    result_ls <- list()
    
    for (i in width:n_rows) {
        
        idx <- max(i - width + 1, 1):i
        
        LV <- eigen(cov(x[idx, ]))
        V <- LV[["vectors"]]
                
        if (i > width) {
          
            similarity <- crossprod(V, V_ls[[length(V_ls)]])
            order <- apply(abs(similarity), 1, which.max)
            V <- t(sign(diag(similarity[ , order])) * t(V[ , order]))
            
        }
        
        V_ls <- append(V_ls, list(V))
        result_ls <- append(result_ls, list(V[ , comp]))
                
    }
    
    result <- do.call(rbind, result_ls)
    result <- xts(result, index(x)[width:n_rows])
    colnames(result) <- colnames(x)
    
    return(result)
    
}
```

```{r}
clean_df <- roll_eigen2(overlap_xts, width, comp)
```

```{r, echo = FALSE, fig.width = 6, fig.height = 3}
clean_mlt <- melt(as.data.table(clean_df), id.vars = "index")
clean_plt <- plot_ts(clean_mlt, title = "Eigenvector 1Y")
print(clean_plt)
```

# Implied shocks

Product of the $n$th eigenvector and square root of the $n$th eigenvalue:

```{r}
roll_shocks <- function(x, width, comp) {
  
    n_rows <- nrow(x)
    V_ls <- list()
    result_ls <- list()
    
    for (i in width:n_rows) {
        
        idx <- max(i - width + 1, 1):i
        
        LV <- eigen(cov(x[idx, ]))
        L <- LV[["values"]]
        V <- LV[["vectors"]]
        
        if (length(V_ls) > 1) {
          
            similarity <- crossprod(V, V_ls[[length(V_ls)]])
            order <- apply(abs(similarity), 1, which.max)
            L <- L[order]
            V <- t(sign(diag(similarity[ , order])) * t(V[ , order]))
          
        }
        
        shocks <- sqrt(L[comp]) * V[ , comp]
        V_ls <- append(V_ls, list(V))
        result_ls <- append(result_ls, list(shocks))
                
    }
    
    result <- do.call(rbind, result_ls)
    result <- xts(result, index(x)[width:n_rows])
    colnames(result) <- colnames(x)
    
    return(result)
    
}
```

```{r}
shocks_xts <- roll_shocks(overlap_xts, width, comp) * sqrt(scale[["periods"]] * scale[["overlap"]])
```

```{r, echo = FALSE, fig.width = 6, fig.height = 3}
shocks_mlt <- melt(as.data.table(shocks_xts), id.vars = "index")
shocks_plt <- plot_ts(shocks_mlt, title = "Implied shocks 1Y using PC1 (%)", multiple = 100)
print(shocks_plt)
```
